{"version":3,"file":"static/js/406.d8712dfc.chunk.js","mappings":"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","sources":["emulator/utility.ts","emulator/joystick.ts","emulator/games/aztec.ts","emulator/games/karateka.ts","emulator/game_mappings.ts","emulator/keyboard.ts","emulator/softswitches.ts","emulator/convertdsk2woz.ts","emulator/decodedisk.ts","emulator/assembler.ts","emulator/harddrivedata.ts","emulator/drivestate.ts","emulator/diskdata.ts","emulator/memory.ts","emulator/roms/rom_2e.ts","emulator/instructions.ts","emulator/assemblycode.ts","emulator/roms/slot_disk2_cx00.ts","emulator/motherboard.ts","emulator/worker2main.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { KeyboardEvent } from \"react\"\n\nexport enum STATE {\n  IDLE,\n  NEED_BOOT,\n  NEED_RESET,\n  RUNNING,\n  PAUSED,\n}\n\nexport enum COLOR_MODE {\n  COLOR,\n  NOFRINGE,\n  GREEN,\n  AMBER\n}\n\nexport enum ARROW {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN\n}\n\nexport const colorToName = (mode: COLOR_MODE) => {\n  return [\"Color\", \"Color (no fringe)\", \"Green\", \"Amber\"][mode]\n}\n\nexport const nameToColorMode = (name: string) => {\n  switch (name) {\n    case \"Color (no fringe)\": return COLOR_MODE.NOFRINGE\n    case \"Green\": return COLOR_MODE.GREEN\n    case \"Amber\": return COLOR_MODE.AMBER\n    default: return COLOR_MODE.COLOR\n  }\n}\n\nexport enum DRIVE {\n  MOTOR_OFF,\n  MOTOR_ON,\n  TRACK_END,\n  TRACK_SEEK,\n}\n\nexport enum MODE {\n  IMPLIED,  // BRK\n  IMM,      // LDA #$01\n  ZP_REL,   // LDA $C0 or BCC $FF\n  ZP_X,     // LDA $C0,X\n  ZP_Y,     // LDX $C0,Y\n  ABS,      // LDA $1234\n  ABS_X,    // LDA $1234,X\n  ABS_Y,    // LDA $1234,Y\n  IND_X,    // LDA ($FF,X) or JMP ($1234,X)\n  IND_Y,    // LDA ($FF),Y\n  IND       // JMP ($1234) or LDA ($C0)\n}\n\n// A hack to determine if this is a relative instruction.\nexport const isRelativeInstr = (instr: string) => instr.startsWith('B') && instr !== \"BIT\" && instr !== \"BRK\"\n\n// export const toBinary = (value: number, ndigits = 8) => {\n//   return (\"0000000000000000\" + value.toString(2)).slice(-ndigits)\n// }\n\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\n\nexport const toHex = (value: number, ndigits = 2) => {\n  if (value > 0xFF) {\n    ndigits = 4\n  }\n  return (\"0000\" + value.toString(16).toUpperCase()).slice(-ndigits)\n}\n\nconst getPStatusString = (P: number) => {\n  const result = ((P & 0x80) ? 'N' : 'n') +\n    ((P & 0x40) ? 'V' : 'v') +\n    '-' +\n    ((P & 0x10) ? 'B' : 'b') +\n    ((P & 0x8) ? 'D' : 'd') +\n    ((P & 0x4) ? 'I' : 'i') +\n    ((P & 0x2) ? 'Z' : 'z') +\n    ((P & 0x1) ? 'C' : 'c')\n  return result\n}\n\nexport const getProcessorStatus = (s6502: STATE6502) => {\n  return (\n    `A=${toHex(s6502.Accum)} X=${toHex(s6502.XReg)} ` +\n    `Y=${toHex(s6502.YReg)} P=${toHex(s6502.PStatus)} ${getPStatusString(s6502.PStatus)} S=${toHex(s6502.StackPtr)}`\n  )\n}\n\nconst modeString = (mode: MODE) => {\n  let prefix = \"\"\n  let suffix = \"\"\n  switch (mode) {\n    case MODE.IMM:\n      prefix = \"#\"\n      break\n    case MODE.ZP_X:\n    case MODE.ABS_X:\n      suffix = \",X\"\n      break\n    case MODE.ZP_Y:\n    case MODE.ABS_Y:\n      suffix = \",Y\"\n      break\n    case MODE.IND:\n      prefix = \"(\"\n      suffix = \")\"\n      break\n    case MODE.IND_X:\n      prefix = \"(\"\n      suffix = \",X)\"\n      break\n    case MODE.IND_Y:\n      prefix = \"(\"\n      suffix = \"),Y\"\n      break\n  }\n  return [prefix, suffix]\n}\n\nexport const getInstrString = (code: PCodeInstr, vLo: number, vHi: number, PC: number) => {\n  let result = `${toHex(PC,4)}`\n  if (code) {\n    let [prefix, suffix] = modeString(code.mode)\n    if (code.PC >= 2) {\n      prefix = `   ${code.name}   ${prefix}$`\n    }\n    if (isRelativeInstr(code.name)) {\n      // The extra +2 is for the branch instruction itself\n      const addr = PC + 2 + (vLo > 127 ? vLo - 256 : vLo)\n      result += `${prefix}${toHex(addr, 4)}${suffix}`\n    } else {\n      switch (code.PC) {\n        case 1:\n          result += `   ${code.name}`\n          break\n        case 2:\n          result += `${prefix}${toHex(vLo)}${suffix}`\n          break\n        case 3:\n          result += `${prefix}${toHex(address(vLo, vHi),4)}${suffix}`\n          break\n      }\n    }\n  } else {\n    result += \"         ???\"\n  }\n  return result\n}\n\nexport const convertAppleKey = (e: KeyboardEvent, uppercase=false) => {\n  let key = 0\n  if (e.key.length === 1) {\n    if (e.metaKey || e.altKey) {\n      return 0\n    }\n    key = e.key.charCodeAt(0)\n    if (e.ctrlKey) {\n      if (key >= 0x40 && key <= 0x7E) {\n        key &= 0b00011111\n      } else {\n        return 0\n      }\n    } else if (uppercase) {\n      key = e.key.toUpperCase().charCodeAt(0)\n    }\n  } else {\n    const keymap: { [key: string]: number } = {\n      Enter: 13,\n      ArrowRight: 21,\n      ArrowLeft: 8,\n      Backspace: 8,\n      ArrowUp: 11,\n      ArrowDown: 10,\n      Escape: 27,\n      Tab: 9,\n      Shift: -1,\n      Control: -1\n    };\n    if (e.key === \"Backspace\" && e.shiftKey) {\n      key = 0x7F\n    } else if (e.key in keymap) {\n      key = keymap[e.key]\n    }\n  }\n  return key\n};\n\nexport const getPrintableChar = (value: number, isAltCharSet: boolean) => {\n  let v1 = value\n  if (isAltCharSet) {\n    if ((v1 >= 0 && v1 <= 31) || (v1 >= 64 && v1 <= 95)) {\n      v1 += 64\n    } else if (v1 >= 128 && v1 <= 159) {\n      v1 -= 64\n    } else if (v1 >= 160) {\n      v1 -= 128\n    }\n  } else {\n    // Shift Ctrl chars and second ASCII's into correct ASCII range\n    if ((v1 >= 0 && v1 <= 0x1f) || (v1 >= 0x60 && v1 <= 0x9f)) {\n      v1 += 64\n    }\n    v1 &= 0b01111111\n  }\n  return v1\n}\n\nlet zpPrev = new Uint8Array(1)\nexport const debugZeroPage = (zp: Uint8Array) => {\n  if (zpPrev.length === 1) zpPrev = zp\n  let diff = \"\"\n  for (let i = 0; i < 256; i++) {\n    if (zp[i] !== zpPrev[i]) {\n      diff += \" \" + toHex(i) + \":\" + toHex(zpPrev[i]) + \">\" + toHex(zp[i])\n    }\n  }\n  if (diff !== \"\") console.log(diff)\n  zpPrev = zp\n}\n\nexport const toASCII = (s: String) => s.split('').map(char => char.charCodeAt(0))\nexport const uint16toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF]\nexport const uint32toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF,\n  (n >>> 16) & 0xFF, (n >>> 24) & 0xFF]\n\nexport const replaceSuffix = (fname: String, suffix: String) => {\n  const i = fname.lastIndexOf('.') + 1\n  return fname.substring(0, i) + suffix\n}\n\n","import { gamepadMapping, handleRumbleMapping } from \"./game_mappings\"\nimport { memSetC000 } from \"./memory\"\nimport { SWITCHES } from \"./softswitches\"\n// import { doSaveTimeSlice } from \"./motherboard\"\n// import { addToBufferDebounce } from \"./keyboard\"\n\nlet gamePads: EmuGamepad[]\nconst maxTimeoutCycles = Math.trunc(0.0028*1.020484e6)\nlet paddle0timeout = maxTimeoutCycles / 2\nlet paddle1timeout = maxTimeoutCycles / 2\nlet paddle2timeout = maxTimeoutCycles / 2\nlet paddle3timeout = maxTimeoutCycles / 2\n// let prevPaddle0timeout = paddle0timeout\n// let prevPaddle1timeout = paddle1timeout\nlet countStart = 0\nlet leftAppleDown = false\nlet rightAppleDown = false\nlet leftButtonDown = false\nlet rightButtonDown = false\nlet isPB2down = false\nlet isLeftDown = false\nlet isRightDown = false\n\nexport const setLeftButtonDown = () => { leftButtonDown = true }\nexport const setRightButtonDown = () => { rightButtonDown = true }\nexport const setPushButton2 = () => { isPB2down = true }\n\nconst valueToTimeout = (value: number) => {\n  value = Math.min(Math.max(value, -1), 1)\n  return (value + 1) * maxTimeoutCycles / 2\n}\n\nexport const setGamepad0 = (value: number) => {\n  paddle0timeout = valueToTimeout(value)\n}\nexport const setGamepad1 = (value: number) => {\n  paddle1timeout = valueToTimeout(value)\n}\nexport const setGamepad2 = (value: number) => {\n  paddle2timeout = valueToTimeout(value)\n}\nexport const setGamepad3 = (value: number) => {\n  paddle3timeout = valueToTimeout(value)\n}\n\nexport const setButtonState = () => {\n  const wasLeftDown = isLeftDown\n  const wasRightDown = isRightDown\n  isLeftDown = leftAppleDown || leftButtonDown\n  isRightDown = rightAppleDown || rightButtonDown\n  SWITCHES.PB0.isSet = isLeftDown\n  SWITCHES.PB1.isSet = isRightDown || isPB2down\n  SWITCHES.PB2.isSet = isPB2down\n  if ((isLeftDown && !wasLeftDown) || (isRightDown && !wasRightDown)) {\n//    doSaveTimeSlice()\n  }\n}\n\nexport const pressAppleCommandKey = (isDown: boolean, left: boolean) => {\n  if (left) {\n    leftAppleDown = isDown\n  } else {\n    rightAppleDown = isDown\n  }\n  setButtonState()\n}\n\nexport const resetJoystick = (cycleCount: number) => {\n  memSetC000(0xC064, 0x80)\n  memSetC000(0xC065, 0x80)\n  memSetC000(0xC066, 0x80)\n  memSetC000(0xC067, 0x80)\n  countStart = cycleCount\n}\n\n// const largeDiff = (v1: number, v2: number) => {\n//   return (Math.abs(v1 - v2) > 0.1 * maxTimeoutCycles)\n// }\n\nexport const checkJoystickValues = (cycleCount: number) => {\n//   if (largeDiff(prevPaddle0timeout, paddle0timeout) ||\n//     largeDiff(prevPaddle1timeout, paddle1timeout)) {\n//     prevPaddle0timeout = paddle0timeout\n//     prevPaddle1timeout = paddle1timeout\n//     doSaveTimeSlice()\n//   }\n  const diff = cycleCount - countStart\n  memSetC000(0xC064, (diff < paddle0timeout) ? 0x80 : 0)\n  memSetC000(0xC065, (diff < paddle1timeout) ? 0x80 : 0)\n  memSetC000(0xC066, (diff < paddle2timeout) ? 0x80 : 0)\n  memSetC000(0xC067, (diff < paddle3timeout) ? 0x80 : 0)\n}\n\nlet mapping: GamePadMapping\n\nexport const setGamepads = (gamePadsIn: EmuGamepad[]) => {\n  gamePads = gamePadsIn\n  mapping = gamepadMapping()\n}\n\nconst nearZero = (value: number) => {return value > -0.01 && value < 0.01}\n\nconst convertGamepadAxes = (axes: number[]) => {\n  let xstick = axes[nearZero(axes[0]) ? 2 : 0]\n  let ystick = axes[nearZero(axes[1]) ? 3 : 1]\n  if (nearZero(xstick)) xstick = 0\n  if (nearZero(ystick)) ystick = 0\n  const dist = Math.sqrt(xstick * xstick + ystick * ystick)\n  const clip = 0.95 * ((dist === 0) ? 1 :\n    Math.max(Math.abs(xstick), Math.abs(ystick)) / dist)\n  xstick = Math.min(Math.max(-clip, xstick), clip)\n  ystick = Math.min(Math.max(-clip, ystick), clip)\n  xstick = Math.trunc(maxTimeoutCycles*(xstick + clip)/(2*clip))\n  ystick = Math.trunc(maxTimeoutCycles*(ystick + clip)/(2*clip))\n  return [xstick, ystick]\n}\n\nconst handleGamepad = (gp: number) => {\n  if (!gamePads || gamePads.length <= gp) return\n  const stick = convertGamepadAxes(gamePads[gp].axes)\n  if (gp === 0) {\n    paddle0timeout = stick[0]\n    paddle1timeout = stick[1]\n    leftButtonDown = false\n    rightButtonDown = false\n  } else {\n    paddle2timeout = stick[0]\n    paddle3timeout = stick[1]\n    isPB2down = false\n  }\n  let buttonPressed = false\n  gamePads[gp].buttons.forEach((button, i) => {\n    if (button) {\n      mapping(i, gamePads.length > 1, gp === 1)\n      buttonPressed = true\n    }\n  });\n  // Special \"no buttons down\" call\n  if (!buttonPressed) mapping(-1, gamePads.length > 1, gp === 1)\n\n  handleRumbleMapping()\n  setButtonState()\n}\n\nexport const handleGamepads = () => {\n  handleGamepad(0)\n  handleGamepad(1)\n}\n","import { addToBuffer, addToBufferDebounce } from \"../keyboard\"\nimport { getTextPageAsString } from \"../memory\"\n\n// AZTEC Controls\n// A, D: move left or right (while using weapon); face left or right (otherwise)\n// W: go to walk mode\n// R: go to run mode\n// C: go to climb mode (ascends steps or mounds)\n// J: jump\n// S: stop walking, running, or climbing\n// G: crawl once\n// P: set explosive (must be crawling)\n// O: open box or clear trash mound\n// L: look in box\n// T: take object from ground or box\n// Z: inventory\n// F: draw machete if you have one, gun otherwise, does nothing if unarmed\n// S: turn around while using weapon\n// L: lunge while using machete\n// M: stab at ground while using machete\n// G: switch from machete to gun\n// <spacebar>: fire gun\nconst timeout = 300\nlet leftdown = 0\nlet rightdown = 0\nlet buttonreleased = false\nconst gamepad = (button: number) => {\n  if (button === 14) {\n    rightdown = 0\n    if (leftdown === 0) {\n      addToBuffer('A')\n      leftdown++\n    } else if (leftdown === 1 && buttonreleased) {\n      addToBufferDebounce('W', timeout)\n      leftdown++\n    } else if (leftdown === 2 && buttonreleased) {\n      addToBufferDebounce('R', timeout);\n    }\n    buttonreleased = false\n    return\n  }\n  if (button === 15) {\n    leftdown = 0\n    if (rightdown === 0) {\n      addToBuffer('D')\n      rightdown++\n    } else if (rightdown === 1 && buttonreleased) {\n      addToBufferDebounce('W', timeout);\n      rightdown++\n    } else if (rightdown === 2 && buttonreleased) {\n      addToBufferDebounce('R', timeout);\n    }\n    buttonreleased = false\n    return\n  }\n  switch (button) {\n    case 0: addToBufferDebounce('J', timeout); break  // jump\n    case 1: addToBufferDebounce('G', 50); break       // crawl\n    case 2: addToBuffer('M'); addToBufferDebounce('O', timeout); break  // open/dig\n    case 3: addToBufferDebounce('L', timeout); break  // look/lunge\n    case 4: addToBufferDebounce('F', timeout); break\n    case 5: addToBuffer('P'); addToBufferDebounce('T', timeout); break  // 5 RB\n    case 6: break  // 6 LT\n    case 7: addToBufferDebounce(' ', timeout); break  // 7 RT\n    case 8: break  // 8 Select?\n    case 9: const str = getTextPageAsString();\n      if (str.includes(\"'N'\")) {\n        addToBuffer('N');\n      } else if (str.includes(\"'S'\")) {\n        addToBuffer('S');\n      } else if (str.includes(\"NUMERIC KEY\")) {\n        addToBuffer('1');\n      } else {\n        addToBuffer('N');\n      }\n      break  // 9 Start?\n    case 10: addToBufferDebounce('G', timeout); break  // 10 Left thumb button\n    case 11: break  // 11 Right thumb button\n    case 12: addToBufferDebounce('C', timeout); break  // 12 D-pad U, climb\n    case 13: addToBufferDebounce('S', timeout); break  // 13 D-pad D, stop\n    case 14:  // 14 D-pad L\n      break\n    case 15: break // 15 D-pad R\n    case -1: buttonreleased = true; return\n    default: break;\n  }\n  leftdown = 0\n  rightdown = 0\n  buttonreleased = false\n}\n\n// Aztec gamepad\nconst helptext = \n`AZTEC\nPaul Stephenson, Datamost 1982\n\nW: walk\nR: run\nJ: jump\nS: stop\nC: climb\nA: turn left\nD: turn right\nG: crawl (G to move)\nP: place and light explosive\nT: take item\nO: opens box or dig in trash\nL: look in box\nZ: inventory\n\nF: goes to fight mode:\n   S: spin around\n   A: move one to left\n   D: move one to right\n   L: lunge with machete\n   M: strike down with machete\n   G: draw gun\n   Space: shoot gun`\n\nexport const aztec: GameLibraryItem = {\n  address: 0x196D,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {},\n  gamepad: gamepad,\n  rumble: () => {},\n  helptext: helptext}\n\n","import { memGet } from \"../memory\"\nimport { passRumble } from \"../worker2main\"\n\nlet memB6 = 14\nlet memB7 = 14\nconst karatekaRumble = () => {\n  let newValue = memGet(0xB6)\n  if (memB6 < 40 && newValue < memB6) {\n    passRumble({startDelay: 220, duration: 300, weakMagnitude: 1, strongMagnitude: 0})\n  }\n  memB6 = newValue\n  newValue = memGet(0xB7)\n  if (memB7 < 40 && newValue < memB7) {\n    passRumble({startDelay: 220, duration: 300, weakMagnitude: 0, strongMagnitude: 1})\n  }\n  memB7 = newValue\n}\n\n// Karateka - allows N/M and ,/. to work as left/right arrow keys, for phones\n\nconst helptext = `KARATEKA\nJordan Mechner, Brøderbund 1984\nPress K for Keyboard control\nPress J for Joystick control\n\nKEYBOARD\nFighting stance:\nQ A Z     punch high, middle, low\nW S X     kick high, middle, low\nM . →     advance\nN , ←     retreat\nSpace     stand up\n\nStanding up:\nB         bow\nM . →     run forward\nN , ←     stop\nSpace     fighting stance\n\nJOYSTICK\nPush the joystick up to stand up, and release it to get into a fighting stance.\n\nFighting stance:\nButton 1: punch\nButton 0: kick.\nMove the joystick up and down to control the height of your punches  and kicks. Move it right to advance and left to retreat.\n\nTo run forward, start from a standing position. Then move the joystick to the upper right. Press button 1 to bow.\n`\n\nexport const karateka: GameLibraryItem = {\n  address: 0x6E6C,\n  data: [0xAD, 0x00, 0xC0],\n  keymap: {'N': '\\x08', 'M': '\\x15', ',': '\\x08', '.': '\\x15'},\n  gamepad: () => {},\n  rumble: karatekaRumble,\n  helptext: helptext}\n\n","import { matchMemory } from \"./memory\"\nimport { setGamepad0, setGamepad1,\n  setGamepad2,\n  setGamepad3,\n  setLeftButtonDown, setPushButton2, setRightButtonDown } from \"./joystick\"\nimport { passHelptext } from \"./worker2main\";\nimport { aztec } from \"./games/aztec\";\nimport { karateka } from \"./games/karateka\";\n\nconst gameLibrary = new Array<GameLibraryItem>()\n\ngameLibrary.push(aztec)\ngameLibrary.push(karateka)\n\nconst defaultButtons: GamePadMapping = (button: number,\n  dualJoysticks: boolean, isJoystick2: boolean) => {\n  if (isJoystick2) {\n    switch (button) {\n      case 0: setPushButton2(); break  // button #0 becomes push button 2\n      case 1: break  // ignore button #1\n      case 12: setGamepad3(-1); break   // D-pad U\n      case 13: setGamepad3(1); break    // D-pad D\n      case 14: setGamepad2(-1); break   // D-pad L\n      case 15: setGamepad2(1); break    // D-pad R\n      default: break;\n    }\n  } else {\n    switch (button) {\n      case 0: setLeftButtonDown(); break\n      case 1: if (!dualJoysticks) setRightButtonDown(); break\n      case 12: setGamepad1(-1); break   // D-pad U\n      case 13: setGamepad1(1); break    // D-pad D\n      case 14: setGamepad0(-1); break   // D-pad L\n      case 15: setGamepad0(1); break    // D-pad R\n      default: break;\n    }\n  }\n}\n\n// const wolf = [\n//   () => {setLeftButtonDown()},\n//   () => {setRightButtonDown()},\n//   () => {addToBufferDebounce('U'.charCodeAt(0))},\n//   () => {addToBufferDebounce('T'.charCodeAt(0))},\n//   () => {setLeftButtonDown()},\n//   () => {setRightButtonDown()},\n//   () => {addToBufferDebounce(' '.charCodeAt(0))},\n//   () => {addToBufferDebounce('\\r', timeout)},\n//   () => {setLeftButtonDown()},\n//   () => {setRightButtonDown()},\n//   () => {setLeftButtonDown()},\n//   () => {setRightButtonDown()},\n//   () => {paddle1timeout = 0},\n//   () => {paddle1timeout = maxTimeoutCycles},\n//   () => {paddle0timeout = 0},\n//   () => {paddle0timeout = maxTimeoutCycles},\n// ]\n\n\nexport const keyMapping = (key: string) => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      return (key in game.keymap) ? game.keymap[key] : key\n    }   \n  }\n  return key\n}\n\nexport const gamepadMapping = () => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      return (game.gamepad.length > 0) ? game.gamepad : defaultButtons\n    }   \n  }\n  return defaultButtons\n}\n\nexport const handleRumbleMapping = () => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      game.rumble()\n      return\n    }   \n  }\n}\n\nexport const handleHelptext = (reset = false) => {\n  for (let game of gameLibrary) {\n    if (matchMemory(game.address, game.data)) {\n      passHelptext(game.helptext ? game.helptext : ' ')\n      return\n    }   \n  }\n  if (reset) passHelptext(' ')\n}\n","import { keyMapping } from \"./game_mappings\"\nimport { memGetC000, memSetC000 } from \"./memory\"\nimport { doSaveTimeSlice } from \"./motherboard\"\n\nconst keyPress = (key: number) => {\n  memSetC000(0xC000, key | 0b10000000, 32)\n}\n\nlet keyBuffer = ''\nexport const popKey = () => {\n  if (memGetC000(0xC000) < 128 && keyBuffer !== '') {\n    let key = keyBuffer.charCodeAt(0)\n    keyPress(key)\n    keyBuffer = keyBuffer.slice(1)\n    if (keyBuffer.length === 0) {\n      doSaveTimeSlice()\n    }\n  }\n}\n\nlet prevKey = ''\n\nexport const addToBuffer = (text: string) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  if (text === prevKey && keyBuffer.length > 0) {\n    return\n  }\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\nlet tPrev = 0\n\nexport const addToBufferDebounce = (text: string, timeout: number) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  const t = performance.now()\n  if ((t - tPrev) < timeout) {\n    return\n  }\n  tPrev = t\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\nexport const sendTextToEmulator = (text: string) => {\n  if (text.length === 1) {\n    addToBuffer(keyMapping(text))\n  } else {\n    addToBuffer(text)\n  }\n}\n","import { memGetC000, memSetC000 } from \"./memory\"\nimport { popKey } from \"./keyboard\"\nimport { passClickSpeaker } from \"./worker2main\"\nimport { resetJoystick, checkJoystickValues } from \"./joystick\"\nimport { toHex } from \"./utility\"\n\ntype tSetFunc = ((addr: number, cycleCount: number) => void) | null\n\ntype softSwitch = {\n  offAddr: number\n  onAddr: number\n  isSetAddr: number\n  writeOnly: boolean\n  isSet: boolean\n  setFunc: tSetFunc\n}\n\nconst sswitch: Array<softSwitch> = []\n\nconst NewSwitch = (offAddr: number, isSetAddr: number,\n  writeOnly = false,\n  setFunc: tSetFunc = null): softSwitch => {\n  const result: softSwitch = {\n    offAddr: offAddr,\n    onAddr: offAddr + 1,\n    isSetAddr: isSetAddr,\n    writeOnly: writeOnly,\n    isSet: false,\n    setFunc: setFunc,\n  }\n  if (offAddr >= 0xC000) {\n    sswitch[offAddr - 0xC000] = result\n    sswitch[offAddr + 1 - 0xC000] = result\n  } \n  if (isSetAddr >= 0xC000) {\n    sswitch[isSetAddr - 0xC000] = result\n  } \n  return result\n}\n\nconst SLOT6 = 0x60\n\nconst rand = () => Math.floor(256 * Math.random())\n\nexport const handleBankedRAM = (addr: number) => {\n  // Only keep bits 0, 1, 3 of the 0xC08* number\n  addr &= 0b1011\n  SWITCHES.READBSR2.isSet = addr === 0\n  SWITCHES.WRITEBSR2.isSet = addr === 1\n  SWITCHES.OFFBSR2.isSet = addr === 2\n  SWITCHES.RDWRBSR2.isSet = addr === 3\n  SWITCHES.READBSR1.isSet = addr === 8\n  SWITCHES.WRITEBSR1.isSet = addr === 9\n  SWITCHES.OFFBSR1.isSet = addr === 0x0A\n  SWITCHES.RDWRBSR1.isSet = addr === 0x0B\n  // Set soft switches for reading the bank-switched RAM status\n  SWITCHES.BSRBANK2.isSet = (addr <= 3)\n  SWITCHES.BSRREADRAM.isSet = [0, 3, 8, 0x0B].includes(addr)\n}\n\nexport const SWITCHES = {\n  STORE80: NewSwitch(0xC000, 0xC018, true),\n  RAMRD: NewSwitch(0xC002, 0xC013, true),\n  RAMWRT: NewSwitch(0xC004, 0xC014, true),\n  INTCXROM: NewSwitch(0xC006, 0xC015, true),\n  ALTZP: NewSwitch(0xC008, 0xC016, true),\n  SLOTC3ROM: NewSwitch(0xC00A, 0xC017, true),\n  COLUMN80: NewSwitch(0xC00C, 0xC01F, true),\n  ALTCHARSET: NewSwitch(0xC00E, 0xC01E, true),\n  KBRDSTROBE: NewSwitch(0, 0xC010, false, () => {\n    const keyvalue = memGetC000(0xC000) & 0b01111111\n    memSetC000(0xC000, keyvalue, 32)\n    popKey()\n  }),\n  BSRBANK2: NewSwitch(0, 0xC011),    // status location, not a switch\n  BSRREADRAM: NewSwitch(0, 0xC012),  // status location, not a switch\n  CASSOUT: NewSwitch(0xC020, 0, false, () => {\n    memSetC000(0xC020, rand(), 16)\n  }),\n  SPEAKER: NewSwitch(0xC030, 0, false, (addr, cycleCount) => {\n    memSetC000(0xC030, rand(), 16)\n    passClickSpeaker(cycleCount)\n  }),\n  EMUBYTE: NewSwitch(0, 0xC04F, false, () => {memSetC000(0xC04F, 0xCD)}),\n  TEXT: NewSwitch(0xC050, 0xC01A),\n  MIXED: NewSwitch(0xC052, 0xC01B),\n  PAGE2: NewSwitch(0xC054, 0xC01C),\n  HIRES: NewSwitch(0xC056, 0xC01D),\n  AN0: NewSwitch(0xC058, 0),\n  AN1: NewSwitch(0xC05A, 0),\n  AN2: NewSwitch(0xC05C, 0),\n  AN3: NewSwitch(0xC05E, 0),\n  CASSIN1: NewSwitch(0, 0xC060, false, () => {memSetC000(0xC060, rand())}),\n  PB0: NewSwitch(0, 0xC061),  // status location, not a switch\n  PB1: NewSwitch(0, 0xC062),  // status location, not a switch\n  PB2: NewSwitch(0, 0xC063),  // status location, not a switch\n  JOYSTICK12: NewSwitch(0xC064, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  JOYSTICK34: NewSwitch(0xC066, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  CASSIN2: NewSwitch(0, 0xC068, false, () => {memSetC000(0xC068, rand())}),\n  FASTCHIP_LOCK: NewSwitch(0xC06A, 0),   // used by Total Replay\n  FASTCHIP_ENABLE: NewSwitch(0xC06B, 0), // used by Total Replay\n  FASTCHIP_SPEED: NewSwitch(0xC06D, 0),  // used by Total Replay\n  JOYSTICKRESET: NewSwitch(0xC070, 0, false, (addr, cycleCount) => {\n    resetJoystick(cycleCount)\n    memSetC000(0xC070, rand())\n  }),\n  LASER128EX: NewSwitch(0xC074, 0),  // used by Total Replay\n  READBSR2: NewSwitch(0xC080, 0, false),\n  WRITEBSR2: NewSwitch(0xC081, 0, false),\n  OFFBSR2: NewSwitch(0xC082, 0, false),\n  RDWRBSR2: NewSwitch(0xC083, 0, false),\n  READBSR1: NewSwitch(0xC088, 0, false),\n  WRITEBSR1: NewSwitch(0xC089, 0, false),\n  OFFBSR1: NewSwitch(0xC08A, 0, false),\n  RDWRBSR1: NewSwitch(0xC08B, 0, false),\n  DRVSM0: NewSwitch(0xC080 + SLOT6, 0),\n  DRVSM1: NewSwitch(0xC082 + SLOT6, 0),\n  DRVSM2: NewSwitch(0xC084 + SLOT6, 0),\n  DRVSM3: NewSwitch(0xC086 + SLOT6, 0),\n  DRIVE: NewSwitch(0xC088 + SLOT6, 0),\n  DRVSEL: NewSwitch(0xC08A + SLOT6, 0),\n  DRVDATA: NewSwitch(0xC08C + SLOT6, 0),\n  DRVWRITE: NewSwitch(0xC08E + SLOT6, 0),\n}\n\nSWITCHES.TEXT.isSet = true\n\n// const skipDebugFlags = [0xC000, 0xC001, 0xC00D, 0xC00F, 0xC030, 0xC054, 0xC055, 0xC01F]\n\nexport const checkSoftSwitches = (addr: number,\n  calledFromMemSet: boolean, cycleCount: number) => {\n  // if (!skipDebugFlags.includes(addr)) {\n  //   const s = memC000[addr - 0xC000] > 0x80 ? 1 : 0\n  //   console.log(`${cycleCount} $${toHex(s6502.PC)}: $${toHex(addr)} [${s}] ${calledFromMemSet ? \"set\" : \"\"}`)\n  // }\n  // Handle banked-RAM soft switches, since these have duplicate addresses\n  // and need to call our special function.\n  if (addr >= 0xC080 && addr <= 0xC08F) {\n    // $C084...87 --> $C080...83, $C08C...8F --> $C088...8B\n    addr -= addr & 4\n    handleBankedRAM(addr)\n    return\n  }\n  const sswitch1 = sswitch[addr - 0xC000]\n  if (!sswitch1) {\n    console.error(\"Unknown softswitch \" + toHex(addr))\n    return\n  }\n  if (sswitch1.setFunc) {\n    sswitch1.setFunc(addr, cycleCount)\n    return\n  }\n  if (addr === sswitch1.offAddr || addr === sswitch1.onAddr) {\n    if (!sswitch1.writeOnly || calledFromMemSet) {\n      sswitch1.isSet = (addr === sswitch1.onAddr)\n    }\n    if (sswitch1.isSetAddr) {\n      memSetC000(sswitch1.isSetAddr, sswitch1.isSet ? 0x8D : 0x0D)\n    }\n  } else if (addr === sswitch1.isSetAddr) {\n    memSetC000(addr, sswitch1.isSet ? 0x8D : 0x0D)\n  }\n}\n","// Code converted from the C code library available at:\n// https://github.com/mr-stivo/dsk2woz2\n//\nimport { toASCII, uint16toBytes, uint32toBytes } from \"./utility\"\n\n/**\n  Appends a byte to a woz at a supplied position: number, returning the\n  position immediately after the byte.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to write.\n  @returns The position immediately after the byte.\n*/\nconst write_byte = (woz: Uint8Array, position: number, value: number) => {\n  const shift = position & 7\n  const byte_position = position >>> 3\n  woz[byte_position] |= value >>> shift\n  if (shift) woz[byte_position+1] |= value << (8 - shift)\n  return position + 8;\n}\n\n/**\n  Encodes a byte into Apple 4-and-4 format and appends it to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to encode and write.\n  @returns The position immediately after the encoded byte.\n*/\nconst write_4_and_4 = (woz: Uint8Array, position: number, value: number) => {\n  position = write_byte(woz, position, (value >>> 1) | 0xAA);\n  position = write_byte(woz, position, value | 0xAA);\n  return position;\n}\n\n/**\n  Appends a 6-and-2-style 10-bit sync word to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @returns The position immediately after the sync word.\n*/\nconst write_sync = (woz: Uint8Array, position: number) => {\n  position = write_byte(woz, position, 0xFF);\n  // Skip two bits, i.e. leave them as 0s\n  return position + 2\n}\n\n/*!\n  Converts a 256-byte source woz into the 343 byte values that\n  contain the Apple 6-and-2 encoding of that woz.\n  @param dest The at-least-343 byte woz to which the encoded sector is written.\n  @param src The 256-byte source data.\n*/\nconst encode_6_and_2 = (src: Uint8Array) => {\n  const six_and_two_mapping = [\n    0x96, 0x97, 0x9A, 0x9B, 0x9D, 0x9E, 0x9F, 0xA6,\n    0xA7, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB2, 0xB3,\n    0xB4, 0xB5, 0xB6, 0xB7, 0xB9, 0xBA, 0xBB, 0xBC,\n    0xBD, 0xBE, 0xBF, 0xCB, 0xCD, 0xCE, 0xCF, 0xD3,\n    0xD6, 0xD7, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,\n    0xDF, 0xE5, 0xE6, 0xE7, 0xE9, 0xEA, 0xEB, 0xEC,\n    0xED, 0xEE, 0xEF, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,\n    0xF7, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n  ];\n\n  const dest = new Uint8Array(343)\n\n  // Fill in byte values: the first 86 bytes contain shuffled\n  // and combined copies of the bottom two bits of the sector\n  // contents; the 256 bytes afterwards are the remaining\n  // six bits.\n  const bit_reverse = [0, 2, 1, 3];\n  for (let c = 0; c < 84; c++) {\n    dest[c] =\n      bit_reverse[src[c] & 3] |\n      (bit_reverse[src[c + 86] & 3] << 2) |\n      (bit_reverse[src[c + 172] & 3] << 4);\n  }\n  dest[84] =\n    (bit_reverse[src[84] & 3] << 0) |\n    (bit_reverse[src[170] & 3] << 2);\n  dest[85] =\n      (bit_reverse[src[85] & 3] << 0) |\n      (bit_reverse[src[171] & 3] << 2);\n\n  for (let c = 0; c < 256; c++) {\n    dest[86 + c] = src[c] >>> 2;\n  }\n\n  // Exclusive OR each byte with the one before it.\n  dest[342] = dest[341];\n  let location = 342;\n  while(location > 1) {\n    location--;\n    dest[location] ^= dest[location - 1];\n  }\n\n  // Map six-bit values up to full bytes.\n  for (let c = 0; c < 343; c++) {\n    dest[c] = six_and_two_mapping[dest[c]];\n  }\n  return dest\n}\n\n/*!\n  Converts a DSK-style track to a WOZ-style track.\n  @param dest The 6646-byte woz that will contain the WOZ track. Both track contents and the\n      proper suffix will be written.\n  @param src The 4096-byte woz that contains the DSK track — 16 instances of 256 bytes, each\n      a fully-decoded sector.\n  @param track_number The track number to encode into this track.\n  @param is_prodos @c true if the DSK image is in Pro-DOS order; @c false if it is in DOS 3.3 order.\n*/\nconst serialise_track = (src: Uint8Array, track_number: number, is_prodos: boolean) => {\n  let track_position = 0;    // This is the track position **in bits**.\n  const dest = new Uint8Array(6646).fill(0)\n\n  // Write gap 1.\n  for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n  }\n\n  // Step through the sectors in physical order.\n  for (let sector = 0; sector < 16; sector++) {\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0x96);\n    // Volume, track, setor and checksum, all in 4-and-4 format.\n    track_position = write_4_and_4(dest, track_position, 254);\n    track_position = write_4_and_4(dest, track_position, track_number);\n    track_position = write_4_and_4(dest, track_position, sector);\n    track_position = write_4_and_4(dest, track_position, 254 ^ track_number ^ sector);\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 2.\n    for (let c = 0; c < 7; c++) {\n        track_position = write_sync(dest, track_position);\n    }\n\n    // Write the sector body.\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xAD);\n\n    // Map from this physical sector to a logical sector.\n    const ls = (sector === 15) ? 15 : ((sector * (is_prodos ? 8 : 7)) % 15);\n\n    // Sector contents.\n    const contents = encode_6_and_2(src.slice(ls * 256, ls * 256 + 256));\n    for (let c = 0; c < contents.length; c++) {\n      track_position = write_byte(dest, track_position, contents[c]);            \n    }\n\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 3.\n    for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n    }\n  }\n  return dest\n}\n\nexport const convertdsk2woz = (dskData: Uint8Array, isPO: boolean) => {\n  if (dskData.length !== 35 * 16 * 256) {\n    return new Uint8Array()\n  }\n  const woz = new Uint8Array(512*3 + 512*35*13).fill(0)\n  woz.set(toASCII(\"WOZ2\\xFF\\n\\r\\n\"), 0)\n  woz.set(toASCII(\"INFO\"), 12)\n  woz[16] = 60    // Chunk size\n  woz[20] = 2     // INFO version: 2\n  woz[21] = 1     // Disk type: 5.25\"\n  woz[22] = 0     // Write protection: disabled\n  woz[23] = 0     // Cross-track synchronised image: no\n  woz[24] = 1     // MC3470 fake bits have been removed: yes\n  woz.fill(32, 25, 57)\n  woz.set(toASCII(\"Apple2TS (CT6502)\"), 25)\n  woz[57] = 1     // Disk sides: 1\n  woz[58] = 0     // Boot sector format: 0 (unknown)\n  woz[59] = 32    // Optimal bit timing: 32 (4us)\n  woz[60] = 0     // Compatible hardware: 0 (unknown)\n  woz[62] = 0     // Required RAM: 0 (unknown)\n  woz[64] = 13    // Largest track blocks (512 bytes): 13 (default track size)\n  woz.set(toASCII(\"TMAP\"), 80)\n  woz[84] = 160    // Chunk size\n  woz.fill(0xFF, 88, 88 + 160)  // Fill the TMAP with empty tracks\n  // Now fill in the quarter tracks around each whole track\n  let offset = 0;\n  for (let c = 0; c < 35; c++) {\n    offset = 88 + (c << 2)\n    if (c > 0) woz[offset - 1] = c\n    woz[offset] = woz[offset + 1] = c\n  }\n  woz.set(toASCII(\"TRKS\"), 248)\n  woz.set(uint32toBytes(1280 + 35*13*512), 252)\n  for (let c = 0; c < 35; c++) {\n    offset = 256 + (c << 3);\n    woz.set(uint16toBytes(3 + c*13), offset)  // start block\n    woz[offset + 2] = 13   // block count\n    woz.set(uint32toBytes(50304), offset + 4)  // start block\n    const trackInput = dskData.slice(c * 16 * 256, (c + 1) * 16 * 256)\n    const trackData = serialise_track(trackInput, c, isPO)\n    offset = 512 * (3 + 13 * c)\n    woz.set(trackData, offset)\n  }\n  return woz\n}\n","import { convertdsk2woz } from \"./convertdsk2woz\"\nimport { replaceSuffix } from \"./utility\";\n\nlet crcTable = new Uint32Array(256).fill(0)\n\nconst makeCRCTable = () => {\n  let c;\n  for (let n =0; n < 256; n++) {\n    c = n;\n    for (let k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    crcTable[n] = c;\n  }\n}\n\nexport const crc32 = (data: Uint8Array, offset = 0) => {\n  if (crcTable[255] === 0) {\n    makeCRCTable()\n  }\n  let crc = 0 ^ (-1);\n  for (let i = offset; i < data.length; i++) {\n    crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)) >>> 0;\n};\n\nconst decodeWoz2 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz2 = [0x57, 0x4F, 0x5A, 0x32, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz2 = woz2.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz2) return false\n  driveState.isWriteProtected = diskData[22] === 1\n  const crc = diskData.slice(8, 12)\n  const storedCRC = crc[0] + (crc[1] << 8) + (crc[2] << 16) + crc[3] * (2 ** 24)\n  const actualCRC = crc32(diskData, 12)\n  if (storedCRC !== 0 && storedCRC !== actualCRC) {\n    alert(\"CRC checksum error: \" + driveState.filename)\n    return false\n  }\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      const tmap_offset = 256 + 8 * tmap_index\n      const trk = diskData.slice(tmap_offset, tmap_offset + 8)\n      driveState.trackStart[htrack] = 512*(trk[0] + (trk[1] << 8))\n      // const nBlocks = trk[2] + (trk[3] << 8)\n      driveState.trackNbits[htrack] = trk[4] + (trk[5] << 8) + (trk[6] << 16) + trk[7] * (2 ** 24)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz2 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst decodeWoz1 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz1 = [0x57, 0x4F, 0x5A, 0x31, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz1 = woz1.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz1) {\n    return false\n  }\n  driveState.isWriteProtected = diskData[22] === 1\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      driveState.trackStart[htrack] = 256 + tmap_index * 6656\n      const trk = diskData.slice(driveState.trackStart[htrack] + 6646,\n        driveState.trackStart[htrack] + 6656)\n      driveState.trackNbits[htrack] = trk[2] + (trk[3] << 8)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz1 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst isDSK = (filename: String) => {\n  const f = filename.toLowerCase()\n  const isDSK = f.endsWith(\".dsk\") || f.endsWith(\".do\")\n  const isPO = f.endsWith(\".po\")\n  return isDSK || isPO\n}\n\nconst decodeDSK = (driveState: DriveState, diskData: Uint8Array) => {\n  let f = driveState.filename.toLowerCase()\n  const isPO = f.endsWith(\".po\")\n  const newData = convertdsk2woz(diskData, isPO)\n  if (newData.length === 0) {\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'woz')\n  driveState.diskHasChanges = true\n  return newData\n}\n\nconst int32 = (data: Uint8Array) => {\n  return data[0] + 256 * (data[1] + 256 * (data[2] + 256 * data[3]))\n}\n\nconst decode2MG = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n//    const nblocks = int32(diskData.slice(0x14, 0x18))\n  const offset = int32(diskData.slice(0x18, 0x1c))\n  const nbytes = int32(diskData.slice(0x1c, 0x20))\n  let magic = ''\n  for (let i = 0; i < 4; i++) magic += String.fromCharCode(diskData[i]) \n  if (magic !== '2IMG') {\n    console.error(\"Corrupt 2MG file.\")\n    return new Uint8Array()\n  }\n  if (diskData[12] !== 1) {\n    console.error(\"Only ProDOS 2MG files are supported.\")\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'hdv')\n  driveState.diskHasChanges = true\n  return diskData.slice(offset, offset + nbytes)\n}\n\nexport const isHardDriveImage = (filename: string) => {\n  const f = filename.toLowerCase()\n  return f.endsWith('.hdv') || f.endsWith('.po') || f.endsWith('.2mg')\n}\n\nexport const decodeDiskData = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n  driveState.diskHasChanges = false\n  const fname = driveState.filename.toLowerCase()\n  if (isHardDriveImage(fname)) {\n    driveState.hardDrive = true\n    driveState.status = ''\n    if (fname.endsWith('.hdv') || fname.endsWith('.po')) {\n      return diskData\n    }\n    if (fname.endsWith('.2mg')) {\n      return decode2MG(driveState, diskData)\n    }\n  }\n  if (isDSK(driveState.filename)) {\n    diskData = decodeDSK(driveState, diskData)\n  }\n  if (decodeWoz2(driveState, diskData)) {\n    return diskData\n  }\n  if (decodeWoz1(driveState, diskData)) {\n    return diskData\n  }\n  if (fname !== '') {\n    console.error(\"Unknown disk format.\")\n  }\n  return new Uint8Array()\n}\n","import { pcodes } from \"./instructions\";\nimport { toHex, isRelativeInstr, MODE } from \"./utility\";\n\nconst doOutput = false\n\ntype CodeLine = {\n  label: string,\n  instr: string,\n  operand: string,\n}\n\ntype LabelOperand = {\n  label: string,\n  operation: string,\n  value: number\n}\n\nconst parseNumberOptionalAddressMode = (operand: string): [MODE, number] => {\n  let mode: MODE = MODE.IMPLIED;\n  let value = -1\n\n  if (operand.length > 0) {\n    if (operand.startsWith('#')) {\n      mode = MODE.IMM\n      operand = operand.substring(1)\n    } else if (operand.startsWith('(')) {\n      if (operand.endsWith(\",Y\")) {\n        mode = MODE.IND_Y\n      } else if (operand.endsWith(\",X)\")) {\n        mode = MODE.IND_X\n      } else {\n        mode = MODE.IND\n      }\n      operand = operand.substring(1)\n    } else if (operand.endsWith(\",X\")) {\n      mode = (operand.length > 5) ? MODE.ABS_X : MODE.ZP_X\n    } else if (operand.endsWith(\",Y\")) {\n      mode = (operand.length > 5) ? MODE.ABS_Y : MODE.ZP_Y\n    } else {\n      mode = (operand.length > 3) ? MODE.ABS : MODE.ZP_REL\n    }\n\n    if (operand.startsWith('$')) {\n      operand = \"0x\" + operand.substring(1)\n    }\n    value = parseInt(operand)\n  }\n\n  return [mode, value]\n}\n\n\nlet labels: { [key: string]: number } = {};\n\nconst splitOperand = (operand: string) => {\n  const s = operand.split(/([+-])/)\n  const codeLine: LabelOperand = {\n    label: s[0] ? s[0] : '',\n    operation: s[1] ? s[1] : '',\n    value: s[2] ? parseInt(s[2].replace('#','').replace('$','0x')) : 0\n  }\n  return codeLine\n}\n\nconst getOperandModeValue =\n  (pc: number, instr: string, operand: string, pass: 1 | 2): [MODE, number] => {\n    let mode = MODE.IMPLIED\n    let value = -1\n    if (operand.match(/^[#]?[$0-9()]+/)) {\n      return parseNumberOptionalAddressMode(operand)\n    }\n    const labelOperand = splitOperand(operand)\n    if (labelOperand.label) {\n      // See if we have an immediate value, like #CONST\n      const isImmediate = labelOperand.label.startsWith('#')\n      if (isImmediate) {\n        labelOperand.label = labelOperand.label.substring(1)\n      }\n      if (labelOperand.label in labels) {\n        value = labels[labelOperand.label]\n      } else if (pass === 2) {\n          throw new Error(\"Missing label: \" + labelOperand.label);\n      }\n      if (labelOperand.operation && labelOperand.value) {\n        switch (labelOperand.operation) {\n          case '+': value += labelOperand.value\n            break;\n          case '-': value -= labelOperand.value\n            break;\n          default:\n            throw new Error(\"Unknown operation in operand: \" + operand);\n        }\n        value = (value % 65536 + 65536) % 65536\n      }\n      if (isRelativeInstr(instr)) {\n        mode = MODE.ZP_REL\n        value = (value - pc + 254)\n        if (value > 255) value -= 256\n      } else {\n        if (isImmediate) {\n          mode = MODE.IMM\n        } else {\n          mode = (value >= 0 && value <= 255) ? MODE.ZP_REL : MODE.ABS\n        }\n      }\n    }\n    return [mode, value]\n}\n\nconst splitLine = (line: string, prevLabel: string) => {\n  line = line.replace(/\\s+/g, ' ')\n  const s = line.split(' ')\n  const codeLine: CodeLine = {\n    label: s[0] ? s[0] : prevLabel,\n    instr: s[1] ? s[1] : '',\n    operand: s[2] ? s[2] : ''\n  }\n  return codeLine\n}\n\nconst handleLabel = (parts: CodeLine, pc: number) => {\n  if (parts.label in labels) {\n    throw new Error(\"Redefined label: \" + parts.label)\n  }\n  if (parts.instr === 'EQU') {\n    const [mode, value] = parseNumberOptionalAddressMode(parts.operand)\n    if (mode !== MODE.ABS && mode !== MODE.ZP_REL) {\n      throw new Error(\"Illegal EQU value: \" + parts.operand)\n    }\n    labels[parts.label] = value\n  } else {\n    labels[parts.label] = pc\n  }\n}\n\nconst getHexCodesForInstruction = (match: number, value: number) => {\n  let newInstructions: Array<number> = [];\n  const pcode = pcodes[match]\n  newInstructions.push(match);\n  if (value >= 0) {\n    newInstructions.push(value % 256)\n    if (pcode.PC === 3) {\n      newInstructions.push(Math.trunc(value / 256))\n    }\n  }\n  return newInstructions\n}\n\nconst parseOnce = (start: number, code: Array<string>, pass: 1 | 2): Array<number> => {\n  let pc = start\n  let instructions: Array<number> = [];\n  let prevLabel = ''\n  code.forEach(line => {\n    line = (line.split(';'))[0].trimEnd().toUpperCase()\n    if (!line) return\n    let output = (line + '                   ').slice(0, 30) + toHex(pc, 4) + \"- \"\n\n    const codeLine = splitLine(line, prevLabel)\n    prevLabel = ''\n\n    // Just a label by itself, just tack onto the beginning of next line.\n    if (!codeLine.instr) {\n      prevLabel = codeLine.label\n      return\n    }\n\n    if (codeLine.instr === 'ORG') {\n      if (doOutput && pass === 2) console.log(output)\n      return\n    }\n\n    if (pass === 1 && codeLine.label) {\n      handleLabel(codeLine, pc)\n    }\n\n    if (codeLine.instr === 'EQU') {\n      return\n    }\n\n    const [mode, value] = getOperandModeValue(pc, codeLine.instr, codeLine.operand, pass)\n\n    if (isRelativeInstr(codeLine.instr) && (value < 0 || value > 255)) {\n      throw new Error(`Branch instruction out of range: ${line} value: ${value}`);\n    }\n\n    const match = pcodes.findIndex(pc => pc && pc.name === codeLine.instr && pc.mode === mode)\n    if (match < 0) {\n      throw new Error(`Unknown instruction: ${codeLine.instr} mode=${mode} pass=${pass}`);\n    }\n    const newInstructions = getHexCodesForInstruction(match, value)\n    pc += pcodes[match].PC\n\n    if (doOutput && pass === 2) {\n      newInstructions.forEach(i => {output += ` ${toHex(i)}`});\n      console.log(output)\n    }\n    instructions.push(...newInstructions)\n  });\n\n  return instructions\n}\n\nexport const parseAssembly = (start: number, code: Array<string>): Array<number> => {\n  labels = {}\n  try {\n    parseOnce(start, code, 1)\n    const instructions = parseOnce(start, code, 2)\n    return instructions\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\n","import { parseAssembly } from \"./assembler\"\nimport { setX, setY, setCarry, s6502 } from \"./instructions\"\nimport { setSlotDriver, memGet, getDataBlock, setDataBlock, memSet } from \"./memory\"\nimport { getHardDriveData, getHardDriveState, passData } from \"./drivestate\"\nimport { toHex } from \"./utility\"\n\nlet timerID: any | number = 0\n\n// $Cx00 + driverAddr = address for our hard drive driver\n// SmartPort driver is this address + 3\nconst driverAddr = 0xC0\n\nconst code1 = `\n         LDX   #$20    ; Apple IIe looks for magic bytes $20, $00, $03.\n         LDA   #$00    ; These indicate a disk drive or SmartPort device.\n         LDX   #$03\n         LDA   #$00    ; $3C=disk drive, $00=SmartPort\n         BIT   $CFFF   ; Trigger all peripheral cards to turn off expansion ROMs\n         LDA   #$01    ; ProDOS command code = READ\n         STA   $42     ; Store ProDOS command code\n         LDA   #$4C    ; JMP\n         STA   $07FD\n         LDA   #$${toHex(driverAddr)}   ; jump address\n         STA   $07FE\n         LDA   #$60    ; Fake RTS to determine our slot\n         STA   $07FF\n         JSR   $07FF\n         TSX\n         LDA   $100,X  ; High byte of slot adddress\n         STA   $07FF   ; Store this for the high byte of our JMP command\n         ASL           ; Shift $Cs up to $s0 (e.g. $C7 -> $70)\n         ASL           ; We need this for the ProDOS unit number (below).\n         ASL           ; Format = bits DSSS0000\n         ASL           ; D = drive number (0), SSS = slot number (1-7)\n         STA   $43     ; Store ProDOS unit number here\n         LDA   #$08    ; Store block (512 bytes) at address $0800\n         STA   $45     ; Address high byte\n         LDA   #$00\n         STA   $44     ; Address low byte\n         STA   $46     ; Block 0 low byte\n         STA   $47     ; Block 0 high byte\n         JSR   $07FD   ; Read the block (will JMP to our driver and trigger it)\n         BCS   ERROR\n         LDA   #$0A    ; Store block (512 bytes) at address $0A00\n         STA   $45     ; Address high byte\n         LDA   #$01\n         STA   $46     ; Block 1 low byte\n         JSR   $07FD   ; Read\n         BCS   ERROR\n         LDA   $0801   ; Should be nonzero\n         BEQ   ERROR\n         LDA   #$01    ; Should always be 1\n         CMP   $0800\n         BNE   ERROR\n         LDX   $43     ; ProDOS block 0 code wants ProDOS unit number in X\n         JMP   $801    ; Continue reading the disk\nERROR    JMP   $E000   ; Out to BASIC on error\n`\nconst code2 = `\n         NOP           ; Hard drive driver address\n         BRA   DONE\n         TSX           ; SmartPort driver address\n         INX\n         INC   $100,X\n         INC   $100,X\n         INC   $100,X\nDONE     BCS   ERR\n         LDA   #$00\n         RTS\nERR      LDA   #$27\n         RTS\n`\n\n// $CnFE status byte\n//  bit 7 - Medium is removable.\n//  bit 6 - Device is interruptable.\n//  bit 5-4 - Number of volumes on the device (0-3).\n//  bit 3 - The device supports formatting.\n//  bit 2 - The device can be written to.\n//  bit 1 - The device can be read from (must be on).\n//  bit 0 - The device's status can be read (must be on).\n\nconst prodos8driver = () => {\n  const driver = new Uint8Array(256).fill(0)\n  const pcode1 = parseAssembly(0x0, code1.split(\"\\n\"))\n  driver.set(pcode1, 0)\n  const pcode2 = parseAssembly(0x0, code2.split(\"\\n\"))\n  driver.set(pcode2, driverAddr)\n  driver[0xFE] = 0b00010111  // see above\n  driver[0xFF] = driverAddr\n  return driver\n}\n\nlet code = new Uint8Array()\n\nexport const enableHardDrive = (enable = true) => {\n  const slot = 7\n  if (code.length === 0) {\n    code = prodos8driver()\n  }\n  code[1] = enable ? 0x20 : 0x00\n  const addr = 0xC000 + driverAddr + slot * 0x100\n  setSlotDriver(slot, code, addr, processHardDriveBlockAccess)\n  setSlotDriver(slot, code, addr + 3, processSmartPortAccess)\n}\n\nconst processSmartPortAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const S = 0x100 + s6502.StackPtr\n  const callAddr = memGet(S + 1) + 256 * memGet(S + 2)\n  const spCommand = memGet(callAddr + 1)\n  const spParamList = memGet(callAddr + 2) + 256 * memGet(callAddr + 3)\n  // These parameters are needed for status (0), read (1), and write (2)\n  const unitNumber = memGet(spParamList + 1)\n  const bufferAddr = memGet(spParamList + 2) + 256 * memGet(spParamList + 3)\n\n  switch (spCommand) {\n    case 0:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const statusCode = memGet(spParamList + 4)\n      switch (statusCode) {\n        case 0:\n          if (unitNumber === 0) {\n            // Store number of SmartPort devices in the status buffer.\n            memSet(bufferAddr, 1)\n            setCarry(false)\n          } else {\n            console.error(`SmartPort status for unitNumber ${unitNumber} not implemented`)\n            setCarry()\n          }\n          break\n        default:\n          console.error(`SmartPort statusCode ${statusCode} not implemented`)\n          setCarry()\n          break\n      }\n      return\n    case 1:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const block = memGet(spParamList + 4) + 256 * memGet(spParamList + 5) +\n        65536 * memGet(spParamList + 6)\n      const blockStart = 512 * block\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setDataBlock(bufferAddr, dataRead)\n      break\n    case 2:\n      break\n    default:\n      console.error(`SmartPort command ${spCommand} not implemented`)\n      setCarry()\n      return\n  }\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}\n\nexport const processHardDriveBlockAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const block = memGet(0x46) + 256 * memGet(0x47)\n  const blockStart = 512 * block\n  let bufferAddr = memGet(0x44) + 256 * memGet(0x45)\n  const dataLen = dd.length\n  ds.status = ` ${toHex(block, 4)} ${toHex(bufferAddr, 4)}`\n//  console.log(`cmd=${memGet(0x42)} ${ds.status}`)\n\n  switch (memGet(0x42)) {\n    case 0:\n      // Status test: 300: A2 AB A0 CD 8D 06 C0 A9 00 85 42 A9 70 85 43 20 EA C7 00\n      if (ds.filename.length === 0 || dataLen === 0) {\n        setX(0)\n        setY(0)\n        setCarry()\n        return\n      }\n      const nblocks = dataLen / 512\n      setX(nblocks & 0xFF)\n      setY(nblocks >>> 8)\n      break\n    case 1:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setDataBlock(bufferAddr, dataRead)\n      break;\n    case 2:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataWrite = getDataBlock(bufferAddr)\n      dd.set(dataWrite, blockStart)\n      ds.diskHasChanges = true\n      break\n    case 3:\n      console.error(\"Hard drive format not implemented yet\")\n      setCarry()\n      return\n    default:\n      console.error(\"unknown hard drive command\")\n      setCarry()\n      return\n  }\n\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}","import { Buffer } from \"buffer\"\nimport { passDriveProps } from \"./worker2main\"\nimport { decodeDiskData, isHardDriveImage } from \"./decodedisk\"\nimport { doPauseDiskDrive, doResetDiskDrive } from \"./diskdata\"\nimport { enableHardDrive } from \"./harddrivedata\"\n\nconst initDriveState = (drive: number): DriveState => {\n  return {\n    hardDrive: drive === 0,\n    status: \"\",\n    filename: \"\",\n    diskHasChanges: false,\n    motorRunning: false,\n    isWriteProtected: false,\n    halftrack: 0,\n    prevHalfTrack: 0,\n    writeMode: false,\n    currentPhase: 0,\n    trackStart: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackNbits: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackLocation: 0,\n  }\n}\n\nconst driveState: DriveState[] = [initDriveState(0), initDriveState(1), initDriveState(2)]\nconst driveData: Array<Uint8Array> = [new Uint8Array(), new Uint8Array(), new Uint8Array()]\n\nlet currentDrive = 1\n\nexport const setCurrentDrive = (drive: number) => {currentDrive = drive}\n\nexport const getCurrentDriveState = () => driveState[currentDrive]\n\nexport const getCurrentDriveData = () => driveData[currentDrive]\n\nexport const getHardDriveState = () => driveState[0]\nexport const getHardDriveData = () => driveData[0]\n\nexport const getFilename = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    if (driveState[i].filename !== \"\") return driveState[i].filename\n  }\n  return \"\"\n}\n\nexport const passData = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    const dprops: DriveProps = {\n      hardDrive: driveState[i].hardDrive,\n      drive: i,\n      filename: driveState[i].filename,\n      status: driveState[i].status,\n      motorRunning: driveState[i].motorRunning,\n      diskHasChanges: driveState[i].diskHasChanges,\n      diskData: driveState[i].diskHasChanges ? driveData[i] : new Uint8Array()\n    }\n    passDriveProps(dprops)\n  }\n}\n\nexport const getDriveSaveState = (full: boolean) => {\n  let data = ['', '', '']\n  for (let i=(full ? 0 : 1); i < 3; i++) {\n    data[i] = Buffer.from(driveData[i]).toString(\"base64\")\n  }\n  return { currentDrive: currentDrive,\n    driveState: driveState, driveData: data }\n}\n\nexport const restoreDriveSaveState = (newState: any) => {\n  currentDrive = newState.currentDrive\n  for (let i=0; i < 3; i++) {\n    driveState[i] = newState.driveState[i]\n    if (newState.driveData[i] !== '') {\n      driveData[i] = new Uint8Array(Buffer.from(newState.driveData[i], 'base64'))\n    }\n  }\n  if (driveState[0].hardDrive) {\n    enableHardDrive(driveState[0].filename !== '')\n  }\n  passData()\n}\n\nexport const doResetDrive = () => {\n  doResetDiskDrive(driveState[1])\n  doResetDiskDrive(driveState[2])\n  passData()\n}\n\nexport const doPauseDrive = (resume = false) => {\n  doPauseDiskDrive(resume)\n  passData()\n}\n\nexport const doSetDriveProps = (props: DriveProps) => {\n  let drive = props.drive\n  // See if the \"wrong\" disk image was put into a drive. If so, swap the drive.\n  if (props.filename !== '') {\n    if (isHardDriveImage(props.filename)) {\n      drive = 0\n      driveState[0].hardDrive = true\n    } else {\n      if (drive === 0) drive = 1\n    }\n  }\n  driveState[drive] = initDriveState(drive)\n  driveState[drive].filename = props.filename\n  driveState[drive].motorRunning = props.motorRunning\n  driveData[drive] = decodeDiskData(driveState[drive], props.diskData)\n  if (driveData[drive].length === 0) {\n    driveState[drive].filename = ''\n  }\n  if (driveState[drive].hardDrive) {\n    enableHardDrive(driveState[drive].filename !== '')\n  }\n  passData()\n}\n","import { passDriveSound } from \"./worker2main\"\nimport { SWITCHES } from \"./softswitches\"\nimport { cycleCount } from './instructions'\nimport { toHex, DRIVE } from \"./utility\"\nimport { getCurrentDriveData, getCurrentDriveState, passData, setCurrentDrive } from \"./drivestate\"\n\nlet motorOffTimeout: any = 0\n\nexport const doResetDiskDrive = (driveState: DriveState) => {\n  SWITCHES.DRIVE.isSet = false\n  doMotorTimeout(driveState)\n  driveState.halftrack = 68\n  driveState.prevHalfTrack = 68\n}\n\nexport const doPauseDiskDrive = (resume = false) => {\n  if (resume) {\n    const ds = getCurrentDriveState()\n    if (ds.motorRunning) {\n      startMotor(ds)\n    }\n  } else {\n    passDriveSound(DRIVE.MOTOR_OFF)\n  }\n}\n\nconst moveHead = (ds: DriveState, offset: number) => {\n  if (ds.trackStart[ds.halftrack] > 0) {\n    ds.prevHalfTrack = ds.halftrack\n  }\n  ds.halftrack += offset\n  if (ds.halftrack < 0 || ds.halftrack > 68) {\n    passDriveSound(DRIVE.TRACK_END)\n    ds.halftrack = (ds.halftrack < 0) ? 0 : (ds.halftrack > 68 ? 68 : ds.halftrack)\n  } else {\n    passDriveSound(DRIVE.TRACK_SEEK)\n  }\n  ds.status = ` Track ${ds.halftrack / 2}`\n  passData()\n  // Adjust new track location based on arm position relative to old track loc.\n  if (ds.trackStart[ds.halftrack] > 0 && ds.prevHalfTrack !== ds.halftrack) {\n    // const oldloc = dState.trackLocation\n    ds.trackLocation = Math.floor(ds.trackLocation * (ds.trackNbits[ds.halftrack] / ds.trackNbits[ds.prevHalfTrack]))\n    if (ds.trackLocation > 3) {\n      ds.trackLocation -= 4\n    }\n  }\n}\n\nconst pickbit = [128, 64, 32, 16, 8, 4, 2, 1]\nconst clearbit = [0b01111111, 0b10111111, 0b11011111, 0b11101111,\n  0b11110111, 0b11111011, 0b11111101, 0b11111110]\n\nconst getNextBit = (ds: DriveState, dd: Uint8Array) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  let bit: number\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    const byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    bit = (byte & pickbit[b]) >> (7 - b)\n  } else {\n    // TODO: Freak out like a MC3470 and return random bits\n    bit = 1\n  }\n  ds.trackLocation++\n  return bit\n}\n\nlet dataRegister = 0\n\nconst getNextByte = (ds: DriveState, dd: Uint8Array) => {\n  if (dd.length === 0) return 0\n  let result = 0\n  if (dataRegister === 0) {\n    while (getNextBit(ds, dd) === 0) {}\n    // This will become the high bit on the next read\n    dataRegister = 0x40\n    // Read the next 6 bits, all except the last one.\n    for (let i = 5; i >= 0; i--) {\n      dataRegister |= getNextBit(ds, dd) << i\n    }\n  } else {\n    // Read the last bit.\n    const bit = getNextBit(ds, dd)\n    dataRegister = (dataRegister << 1) | bit\n  }\n  result = dataRegister\n  if (dataRegister > 127) {\n    dataRegister = 0\n  }\n  return result\n}\n\nlet prevCycleCount = 0\n\nconst doWriteBit = (ds: DriveState, dd: Uint8Array, bit: 0 | 1) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  // TODO: What about writing to empty tracks?\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    let byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    if (bit) {\n      byte |= pickbit[b]\n    } else {\n      byte &= clearbit[b]\n    }\n    dd[fileOffset] = byte\n  }\n  ds.trackLocation++\n}\n\nconst doWriteByte = (ds: DriveState, dd: Uint8Array, delta: number) => {\n  // Sanity check to make sure we aren't on an empty track. Is this correct?\n  if (dd.length === 0 || ds.trackStart[ds.halftrack] === 0) {\n    return\n  }\n  if (dataRegister > 0) {\n    if (delta >= 16) {\n      for (let i = 7; i >= 0; i--) {\n        doWriteBit(ds, dd, dataRegister & 2**i ? 1 : 0)      \n      }\n    }\n    if (delta >= 36) {\n      doWriteBit(ds, dd, 0)\n    }\n    if (delta >= 40) {\n      doWriteBit(ds, dd, 0)\n    }\n    debugCache.push(delta >= 40 ? 2 : delta >= 36 ? 1 : dataRegister)\n    ds.diskHasChanges = true\n    dataRegister = 0\n  }\n}\n\nconst doMotorTimeout = (ds: DriveState) => {\n  motorOffTimeout = 0\n  if (!SWITCHES.DRIVE.isSet) {\n    ds.motorRunning = false\n  }\n  passData()\n  passDriveSound(DRIVE.MOTOR_OFF)\n}\n\nconst startMotor = (ds: DriveState) => {\n  if (motorOffTimeout) {\n    clearTimeout(motorOffTimeout)\n    motorOffTimeout = 0\n  }\n  ds.motorRunning = true\n  passData()\n  passDriveSound(DRIVE.MOTOR_ON)\n}\n\nconst stopMotor = (ds: DriveState) => {\n  if (motorOffTimeout === 0) {\n    motorOffTimeout = setTimeout(() => doMotorTimeout(ds), 1000);\n  }\n}\n\nlet debugCache:number[] = []\nconst doDebugDrive = false\n\nconst dumpData = (ds: DriveState, addr: number) => {\n  // if (dataRegister !== 0) {\n  //   console.error(`addr=${toHex(addr)} writeByte= ${dataRegister}`)\n  // }\n  if (debugCache.length > 0 && ds.halftrack === 2 * 0x00) {\n    if (doDebugDrive) {\n      let output = `TRACK ${toHex(ds.halftrack/2)}: `\n      let out = ''\n      debugCache.forEach(element => {\n        switch (element) {\n          case 1: out = 'Ff'; break;\n          case 2: out = 'FF'; break;\n          default: out = element.toString(16); break;\n        }\n        output += out + ' '\n      });\n      console.log(output)\n    }\n    debugCache = []\n  }\n}\n\nexport const handleDriveSoftSwitches =\n  (addr: number, value: number): number => {\n  let ds = getCurrentDriveState()\n  let dd = getCurrentDriveData()\n  let result = 0\n  if (ds.hardDrive) return result\n  const delta = cycleCount - prevCycleCount\n  // if (doDebugDrive && value !== 0x96) {\n  //   const dc = (delta < 100) ? `  deltaCycles=${delta}` : ''\n  //   const wb = (dataRegister > 0) ? `  writeByte=$${toHex(dataRegister)}` : ''\n  //   const v = (value > 0) ? `  value=$${toHex(value)}` : ''\n  //   console.log(`write ${ds.writeMode}  addr=$${toHex(addr)}${dc}${wb}${v}`)\n  // }\n  if (addr === SWITCHES.DRVDATA.offAddr) {  // $C08C SHIFT/READ\n    if (ds.motorRunning && !ds.writeMode) {\n      return getNextByte(ds, dd)\n    }\n  }\n  if (addr === SWITCHES.DRIVE.onAddr) {  // $C089\n    startMotor(ds)\n    dumpData(ds, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRIVE.offAddr) {  // $C088\n    stopMotor(ds)\n    dumpData(ds, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRVSEL.offAddr || addr === SWITCHES.DRVSEL.onAddr) {\n    const currentDrive = (addr === SWITCHES.DRVSEL.offAddr) ? 1 : 2\n    const dsOld = getCurrentDriveState()\n    setCurrentDrive(currentDrive)\n    ds = getCurrentDriveState()\n    if (ds !== dsOld && dsOld.motorRunning) {\n      dsOld.motorRunning = false\n      ds.motorRunning = true\n      passData()\n    }\n    return result\n  }\n  const ps = [SWITCHES.DRVSM0, SWITCHES.DRVSM1,\n    SWITCHES.DRVSM2, SWITCHES.DRVSM3]\n  const a = addr - SWITCHES.DRVSM0.offAddr\n  // One of the stepper motors has been turned on or off\n  if (a >= 0 && a <= 7) {\n    const ascend = ps[(ds.currentPhase + 1) % 4]\n    const descend = ps[(ds.currentPhase + 3) % 4]\n    // Make sure our current phase motor has been turned off.\n    if (!ps[ds.currentPhase].isSet) {\n      if (ds.motorRunning && ascend.isSet) {\n        moveHead(ds, 1)\n        ds.currentPhase = (ds.currentPhase + 1) % 4\n\n      } else if (ds.motorRunning && descend.isSet) {\n        moveHead(ds, -1)\n        ds.currentPhase = (ds.currentPhase + 3) % 4\n      }\n    }\n    // if (doDebugDrive) {\n    //   const phases = `${ps[0].isSet ? 1 : 0}${ps[1].isSet ? 1 : 0}` +\n    //     `${ps[2].isSet ? 1 : 0}${ps[3].isSet ? 1 : 0}`\n    //   console.log(`***** PC=${toHex(s6502.PC,4)}  addr=${toHex(addr,4)} ` +\n    //     `phase ${a >> 1} ${a % 2 === 0 ? \"off\" : \"on \"}  ${phases}  ` +\n    //     `track=${dState.halftrack / 2}`)\n    // }\n    dumpData(ds, addr)\n  } else if (addr === SWITCHES.DRVWRITE.offAddr) {  // $C08E READ\n    if (ds.motorRunning && ds.writeMode) {\n      doWriteByte(ds, dd, delta)\n      // Reset the Disk II Logic State Sequencer clock\n      prevCycleCount = cycleCount\n    }\n    ds.writeMode = false\n    if (SWITCHES.DRVDATA.isSet) {\n      result = ds.isWriteProtected ? 0xFF : 0\n    }\n    dumpData(ds, addr)\n  } else if (addr === SWITCHES.DRVWRITE.onAddr) {  // $C08F WRITE\n    ds.writeMode = true\n    // Reset the Disk II Logic State Sequencer clock\n    prevCycleCount = cycleCount\n    if (value >= 0) {\n      dataRegister = value\n    }\n  } else if (addr === SWITCHES.DRVDATA.onAddr) {  // $C08D LOAD/READ\n    if (ds.motorRunning) {\n      if (ds.writeMode) {\n        doWriteByte(ds, dd, delta)\n        // Reset the Disk II Logic State Sequencer clock\n        prevCycleCount = cycleCount\n      }\n      if (value >= 0) {\n        dataRegister = value\n      }\n    }\n  }\n\n  return result\n}\n","import { SWITCHES, checkSoftSwitches } from \"./softswitches\";\nimport { cycleCount } from \"./instructions\"\nimport { handleDriveSoftSwitches } from \"./diskdata\"\nimport { romBase64 } from \"./roms/rom_2e\"\nimport { Buffer } from \"buffer\";\nimport { handleHelptext } from \"./game_mappings\";\n\n// 00000: main memory\n// 10000: aux memory \n// 20000...23FFF: ROM\n// 24000...246FF: Slots 1-7\n// Bank1 of $D000-$DFFF is stored at 0x*D000-0x*DFFF (* 0 for main, 1 for aux)\n// Bank2 of $D000-$DFFF is stored at 0x*C000-0x*CFFF (* 0 for main, 1 for aux)\nexport let memory = (new Uint8Array(600 * 256)).fill(0)\n\n// Mappings from real Apple II address to memory array above.\n// 256 pages of memory, from $00xx to $FFxx\nconst addressGetTable = (new Array<number>(256)).fill(-1)\nconst addressSetTable = (new Array<number>(256)).fill(-1)\n\nconst ROMindexMinusC0 = 0x200 - 0xC0\nconst SLOTindexMinusC1 = 0x240 - 0xC1\nconst AUXindex = 0x100\nconst ROMstartMinusC000 = 256 * ROMindexMinusC0\nconst SLOTstartMinusC100 = 256 * SLOTindexMinusC1\nconst AUXstart = 256 * AUXindex\n\nconst updateMainAuxMemoryTable = () => {\n  const offsetAuxRead = SWITCHES.RAMRD.isSet ? AUXindex : 0\n  const offsetAuxWrite = SWITCHES.RAMWRT.isSet ? AUXindex : 0\n  const offsetPage2 = SWITCHES.PAGE2.isSet ? AUXindex : 0\n  const offsetTextPageRead = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxRead\n  const offsetTextPageWrite = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxWrite\n  const offsetHgrPageRead = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxRead\n  const offsetHgrPageWrite = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxWrite\n  for (let i = 2; i < 256; i++) {\n    addressGetTable[i] = i + offsetAuxRead;\n    addressSetTable[i] = i + offsetAuxWrite;\n  }\n  for (let i = 4; i <= 7; i++) {\n    addressGetTable[i] = i + offsetTextPageRead;\n    addressSetTable[i] = i + offsetTextPageWrite;\n  }\n  for (let i = 0x20; i <= 0x3F; i++) {\n    addressGetTable[i] = i + offsetHgrPageRead;\n    addressSetTable[i] = i + offsetHgrPageWrite;\n  }\n}\n\nconst updateReadBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  addressGetTable[0] = offsetZP;\n  addressGetTable[1] = 1 + offsetZP;\n  addressSetTable[0] = offsetZP;\n  addressSetTable[1] = 1 + offsetZP;\n  if (SWITCHES.BSRREADRAM.isSet) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressGetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressGetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM ($C000...$FFFF) is in 0x200...0x23F\n    for (let i = 0xC0; i <= 0xFF; i++) {\n      addressGetTable[i] = ROMindexMinusC0 + i;\n    }\n  }\n}\n\nconst updateWriteBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  const writeRAM = SWITCHES.WRITEBSR1.isSet || SWITCHES.WRITEBSR2.isSet ||\n    SWITCHES.RDWRBSR1.isSet || SWITCHES.RDWRBSR2.isSet\n  if (writeRAM) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressSetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressSetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM is not writeable\n    for (let i = 0xC0; i <= 0xFF; i++) {\n      addressSetTable[i] = -1;\n    }\n  }\n}\n\nconst updateSlotRomTable = () => {\n  // Read peripheral slot ROM\n  if (!SWITCHES.INTCXROM.isSet) {\n    // TODO: Currently, $C800-$CFFF is not being filled in for cards.\n    for (let i = 0xC1; i <= 0xC7; i++) {\n      addressGetTable[i] = SLOTindexMinusC1 + i;\n    }\n  }\n  if (!SWITCHES.SLOTC3ROM.isSet) {\n    addressGetTable[0xC3] = ROMindexMinusC0 + 0xC3\n  }\n}\n\nexport const updateAddressTables = () => {\n  updateMainAuxMemoryTable()\n  updateReadBankSwitchedRamTable()\n  updateWriteBankSwitchedRamTable()\n  updateSlotRomTable()\n  // Scale all of our mappings up by 256 to get to offsets in memory array.\n  for (let i = 0; i < 256; i++) {\n    addressGetTable[i] = 256 * addressGetTable[i];\n    addressSetTable[i] = 256 * addressSetTable[i];\n  }\n}\n\nexport const specialJumpTable = new Map<number, () => void>();\n\nexport const setSlotDriver = (slot: number, driver: Uint8Array, jump = 0, fn = () => {}) => {\n  memory.set(driver, SLOTstartMinusC100 + 0xC000 + slot * 0x100)\n  if (jump) {\n    specialJumpTable.set(jump, fn)\n  }\n}\n\nexport const memoryReset = () => {\n  memory.fill(0xFF, 0, 0x1FFFF)\n  const rom64 = romBase64.replace(/\\n/g, \"\")\n  const rom = new Uint8Array(\n    Buffer.from(rom64, \"base64\")\n  )\n  memory.set(rom, ROMstartMinusC000 + 0xC000)\n  updateAddressTables()\n}\n\n// Fill all pages of either main or aux memory with 0, 1, 2,...\nexport const memorySetForTests = (aux = false) => {\n  memoryReset()\n  const offset = aux ? AUXstart : 0\n  for (let i=0; i <= 0xFF; i++) {\n    memory.fill(i, i * 256 + offset, (i + 1) * 256 + offset)\n  }\n}\n\n// Set $C007: FF to see this code\n// Hack to change the cursor\n// rom[0xC26F - 0xC000] = 161\n// rom[0xC273 - 0xC000] = 161\n// Hack to speed up the cursor\n// rom[0xC288 - 0xC000] = 0x20\n\nexport const readWriteAuxMem = (addr: number, write = false) => {\n  let useAux = write ? SWITCHES.RAMWRT.isSet : SWITCHES.RAMRD.isSet\n  if (addr <= 0x1FF || addr >= 0xC000) {\n    useAux = SWITCHES.ALTZP.isSet\n  } else if (addr >= 0x400 && addr <= 0x7FF) {\n    if (SWITCHES.STORE80.isSet) {\n      useAux = SWITCHES.PAGE2.isSet\n    }\n  } else if (addr >= 0x2000 && addr <= 0x3FFF) {\n    if (SWITCHES.STORE80.isSet) {\n      if (SWITCHES.HIRES.isSet) {\n        useAux = SWITCHES.PAGE2.isSet\n      }\n    }\n  }\n  return useAux\n}\n\nconst memGetSoftSwitch = (addr: number, code=0): number => {\n  // $C019 Vertical blanking status (0 = vertical blanking, 1 = beam on)\n  if (addr === 0xC019) {\n    // Return \"low\" for 70 scan lines out of 262 (70 * 65 cycles = 4550)\n    return ((cycleCount % 17030) > 12480) ? 0x0D : 0x8D\n  }\n  checkSoftSwitches(addr, false, cycleCount)\n  if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n    return handleDriveSoftSwitches(addr, -1)\n  }\n  updateAddressTables()\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const memGet = (addr: number, code=0): number => {\n  const page = addr >>> 8\n  if (page === 0xC0) {\n    return memGetSoftSwitch(addr, code)\n  }\n  const shifted = addressGetTable[page]\n  return memory[shifted + (addr & 255)]\n}\n\nexport const memSet = (addr: number, value: number) => {\n  const page = addr >>> 8\n  if (page === 0xC0) {\n    if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n      handleDriveSoftSwitches(addr, value)\n    } else {\n      checkSoftSwitches(addr, true, cycleCount)\n      updateAddressTables()\n    }\n    return\n  }\n  const shifted = addressSetTable[page]\n  if (shifted < 0) return\n  memory[shifted + (addr & 255)] = value\n}\n\nexport const memGetC000 = (addr: number) => {\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const memSetC000 = (addr: number, value: number, repeat = 1) => {\n  const start = ROMstartMinusC000 + addr\n  memory.fill(value, start, start + repeat)\n}\n\nconst TEXT_PAGE1 = 0x400\nconst TEXT_PAGE2 = 0x800\nconst offset = [\n  0, 0x80, 0x100, 0x180, 0x200, 0x280, 0x300, 0x380, 0x28, 0xA8, 0x128, 0x1A8,\n  0x228, 0x2A8, 0x328, 0x3A8, 0x50, 0xD0, 0x150, 0x1D0, 0x250, 0x2D0, 0x350,\n  0x3D0,\n]\n\nexport const getTextPage = (getLores = false) => {\n  let jstart = 0\n  let jend = 24\n  let is80column = false\n  if (getLores) {\n    if (SWITCHES.TEXT.isSet || SWITCHES.HIRES.isSet) {\n      return new Uint8Array()\n    }\n    jend = SWITCHES.MIXED.isSet ? 20 : 24\n    is80column = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  } else {\n    if (!SWITCHES.TEXT.isSet && !SWITCHES.MIXED.isSet) {\n      return new Uint8Array()\n    }\n    if (!SWITCHES.TEXT.isSet && SWITCHES.MIXED.isSet) jstart = 20\n    is80column = SWITCHES.COLUMN80.isSet\n  }\n  if (is80column) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(80 * (jend - jstart)).fill(0xA0)\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 80 * (j - jstart)\n      for (let i = 0; i < 40; i++) {\n        textPage[joffset + 2 * i + 1] = memory[pageOffset + offset[j] + i]\n        textPage[joffset + 2 * i] = memory[AUXstart + pageOffset + offset[j] + i]\n      }\n    }\n    return textPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(40 * (jend - jstart))\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 40 * (j - jstart)\n      let start = pageOffset + offset[j]\n      textPage.set(memory.slice(start, start + 40), joffset)\n    }\n    return textPage\n  }\n}\n\nexport const getTextPageAsString = () => {\n  return Buffer.from(getTextPage().map((n) => (n &= 127))).toString()\n}\n\nexport const getHires = () => {\n  if (SWITCHES.TEXT.isSet || !SWITCHES.HIRES.isSet) {\n    return new Uint8Array()\n  }\n  const doubleRes = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  const nlines = SWITCHES.MIXED.isSet ? 160 : 192\n  if (doubleRes) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(80 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      for (let i = 0; i < 40; i++) {\n        hgrPage[j * 80 + 2 * i + 1] = memory[addr + i]\n        hgrPage[j * 80 + 2 * i] = memory[AUXstart + addr + i]\n      }\n    }\n    return hgrPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(40 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      hgrPage.set(memory.slice(addr, addr + 40), j * 40)\n    }\n    return hgrPage\n  }\n}\n\nexport const getDataBlock = (addr: number) => {\n  const offset = addressGetTable[addr >>> 8]\n  return memory.slice(offset, offset + 512)\n}\n\nexport const setDataBlock = (addr: number, data: Uint8Array) => {\n  const offset = addressSetTable[addr >>> 8] + (addr & 255)\n  memory.set(data, offset)\n  handleHelptext()\n}\n\nexport const matchMemory = (addr: number, data: number[]) => {\n  for (let i = 0; i < data.length; i++) {\n   if (memGet(addr + i) !== data[i]) return false\n  }\n  return true\n}","export const romBase64=`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\ncM5oYLEoLB/AEBmNAcCEKphFIGqwBK1VwMiYSqixKCxUwKQqLB7AEAbJILACCUBg\nSCn/MBat+wRqaEiQDiwewBAJSUAsrM7wAklALB/AEB2NAcBIhCqYRSBKsAStVcDI\nmEqoaJEorVTApCpoYJEoaGBImEisewUgRM6NewYpgEmrTM3OSJhIrHsFrXsGIHDO\naKhoYCBxzan/hTKt+wQpBPACRjKteweFKK37B4UprfsFhSVgLBLAED2pBs2z+/A2\nogMsEcAwAqILjbP7LIDArbP7yQbwAegsgcAsgcCgAKn4hTeENrE2kTbI0PnmN9D1\nvYDAvYDAYAAAAOmBStAUpD+mPtABiMqKGOU6hT4QAciY5TvQQKQvuT0AkTqIEPgg\nSPkgGvwgGvxM4/ylPSCO+Kq9APrFQtATvcD5xUPQDKVEpC7AnfCzxS7wysY90Nzm\nRMY18NakNJiqTNL8IMf/rQACyaDwEsmN0AFgIKf/yZPQ5Yrw4iB4/qkDhT0gE/8K\n6b7JwpDRCgqiBAomQiZDyhD4xj3w9BDkogUgyMSlRAoKBTXJILAGpjXwAgmAhUSE\nNLkAAsm78ATJjdC0TGvP32/YZdf43JTZsdsw89jf4duP85jz5PHd8dTxJPIx8kDy\n1/Ph8+j2/fZo92735vdX/CD3Jvd092zybvJy8nbyf/JO8mrZVfKF8qXyyvIX87vz\nnvNh8kXaPdkR2cjZSNj0AyDZatnb2W3Y69mD58jYr9gS43rn1NqV2KTWadaf20jW\nkOsj7K/rCgDe4hLUzd//4o3uru9B6Qnv6u/x7zrwnvBk59bmxeMH5+XmRuZa5obm\nkeZ5wOd5qed7gel7aOp9lu5QVN9GTt9/z+5/l95kZN9FTsRGT9JORVjUREFUwUlO\nUFXUREXMREnNUkVBxEfSVEVY1FBSo0lOo0NBTMxQTE/USExJzlZMSc5IR1KySEfS\nSENPTE9SvUhQTE/URFJB11hEUkHXSFRBwkhPTcVST1S9U0NBTEW9U0hMT0HEVFJB\nQ8VOT1RSQUPFTk9STUHMSU5WRVJTxUZMQVPIQ09MT1K9UE/QVlRBwkhJTUVNukxP\nTUVNuk9ORVLSUkVTVU3FUkVDQUzMU1RPUsVTUEVFRL1MRdRHT1TPUlXOScZSRVNU\nT1LFpkdPU1XCUkVUVVLOUkXNU1RP0E/OV0FJ1ExPQcRTQVbFREXGUE9LxVBSSU7U\nQ09O1ExJU9RDTEVB0kdF1E5F11RBQqhUz0bOU1BDqFRIRc5B1E5P1FNURdCrraqv\n3kFOxE/Svr28U0fOSU7UQULTVVPSRlLFU0NSTqhQRMxQT9NTUdJSTsRMT8dFWNBD\nT9NTSc5UQc5BVM5QRUXLTEXOU1RSpFZBzEFTw0NIUqRMRUZUpFJJR0hUpE1JRKQA\nTkVYVCBXSVRIT1VUIEZP0lNZTlRB2FJFVFVSTiBXSVRIT1VUIEdPU1XCT1VUIE9G\nIERBVMFJTExFR0FMIFFVQU5USVTZT1ZFUkZMT9dPVVQgT0YgTUVNT1LZVU5ERUYn\nRCBTVEFURU1FTtRCQUQgU1VCU0NSSVDUUkVESU0nRCBBUlJB2URJVklTSU9OIEJZ\nIFpFUs9JTExFR0FMIERJUkVD1FRZUEUgTUlTTUFUQ8hTVFJJTkcgVE9PIExPTsdG\nT1JNVUxBIFRPTyBDT01QTEXYQ0FOJ1QgQ09OVElOVcVVTkRFRidEIEZVTkNUSU/O\nIEVSUk9SBwAgSU4gAA1CUkVBSwcAuujo6Oi9AQHJgdAhpYbQCr0CAYWFvQMBhYbd\nAwHQB6WF3QIB8AeKGGkSqtDYYCDj04VthG44pZblm4VeqKWX5Zyq6JjwI6WWOOVe\nhZawA8aXOKWU5V6FlLAIxpWQBLGWkZSI0PmxlpGUxpfGlcrQ8mAKaTawNYVeuuRe\nkC5gxHCQKNAExW+QIkiiCZhItZPKEPoghOSi92iVnegw+mioaMRwkAbQBcVvsAFg\nok0k2BADTOnyIPvaIFrbvWDSSCBc2+hoEPUgg9apUKDTIDrbpHbI8AMgGe0g+9qi\n3SAu1Ya4hLlG2CCxAKrw7KL/hnaQBiBZ1UwF2KavhmmmsIZqIAzaIFnVhA8gGtaQ\nRKABsZuFX6VphV6lnIVhpZuI8ZsYZWmFaYVgpWpp/4Vq5ZyqOKWb5WmosAPoxmEY\nZV6QA8ZfGLFekWDI0PnmX+ZhytDyrQAC8Dilc6R0hW+EcKVphZZlD4WUpGqEl5AB\nyISVIJPTpVCkUY3+AYz/AaVtpG6FaYRqpA+5+wGIkZvQ+CBl1qVnpGiFXoRfGKAB\nsV7QC6Vpha+laoWwTDzUoATIsV7Q+8iYZV6qoACRXqVfaQDIkV6GXoVfkNKigIYz\nIGr94O+QAqLvqQCdAAKK8Au9/wEpf53/AcrQ9akAov+gAWAgDP0pf2CmuMqgBIQT\n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\n5opMi/4g+OaKTJX+IPjm4DCwE4bwqSwgwN4g+ObgMLAFhiyGLWBMmeEg7PHk8LAI\npfCFLIUthvCpxSDA3iD45uAwsOJgIOzxiqTwwCiw10wA+CAJ8oqkLMAosMqk8EwZ\n+CAJ8oqowCiwvKXwTCj4IPjmikxk+CD45sqKyRiwp0xb+yD45opJ/6rohvFgOJAY\nZvJgqf/QAqk/ogCFMobzYKl/okDQ9SBn3SBS56VQxW2lUeVusANMENSlUIVzhW+l\nUYV0hXBgIGfdIFLnpVDFc6VR5XSw4KVQxWmlUeVqkNalUIVppVGFakxs1qmrIMDe\npbiF9KW5hfU4ZtildYX2pXaF9yCm2UyY2YbepviG36V1hdqldoXbpXmF3KV6hd2l\n9IW4pfWFuaX2hXWl94V2ILcAID7ZTNLXpdqFdaXbhXal3IW4pd2FuabfmkzS10zJ\n3rD7pq+GaaawhmogDNogGtalm4VgpZyFYaksIMDeIAza5lDQAuZRIBrWpZvFYKWc\n5WGwAWCgALGbkWDmm9AC5pzmYNAC5mGlacWbpWrlnLDmpmGkYNAByoiGaoRpTPLU\nrVbArVPATED7rVTATDn7INn3oAOxm6qIsZvpAbAByoVQhlEgzf4gd/dMzf4g2fcg\n/f6gArGbxVDIsZvlUbADTBDUIHf3TP3+LFXALFLAqUDQCKkgLFTALFPAheatV8Ct\nUMCpAIUcpeaFG6AAhBqlHJEaIH70yND25hulGykf0O5gheKG4IThSCnAhSZKSgUm\nhSZohScKCgomJwomJwpmJqUnKR8F5oUnisAA8AWgI2kEyOkHsPuE5aq9ufSFMJhK\npeSFHLAoYCAR9KUcUSYlMFEmkSZgECOlMEqwBUnAhTBgiBACoCepwIUwhOWlHArJ\nwBAGpRxJf4UcYKUwCkmAMN2pgcjAKJDgoACw3Bil0SkE8CWpfyUwMSbQGebqqX8l\nMBARGKXRKQTwDrEmRRwlMNAC5upRJpEmpdFl0ykDyQJqsJIwMBilJyy59dAiBiaw\nGizN9PAFaR84sBJpI0ilJmmwsAJp8IUmaLACaR9mJmn8hSdgGKUnaQQsufXQ8wYm\nkBhp4BgsCPXwEqUmaVBJ8PACSfCFJqXmkAJp4GYmkNFIqQCF4IXhheJoSDjl4EiK\n5eGF07AKaEn/aQFIqQDl04XRhdVohdCF1GiF4IbhmBjl4pAESf9p/oXShOJm0zjl\n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\ng39dzLX8Fxf1A/sDYvr6ww==`\n","import { toHex, MODE } from \"./utility\"\nimport { memGet, memSet } from \"./memory\"\n// var startTime = performance.now()\n\nexport let s6502: STATE6502 = {\n  PStatus: 0,\n  PC: 0,\n  Accum: 0,\n  XReg: 0,\n  YReg: 0,\n  StackPtr: 0\n}\n\nexport const setX = (value: number) => {\n  s6502.XReg = value\n}\n\nexport const setY = (value: number) => {\n  s6502.YReg = value\n}\n\nexport let cycleCount = 0\n\nexport const setCycleCount = (cycles: number) => { cycleCount = cycles }\n\nexport const set6502State = (new6502: any) => {\n  s6502 = new6502\n}\n\nexport const reset6502 = () => {\n  s6502.Accum = 0\n  s6502.XReg = 0\n  s6502.YReg = 0\n  s6502.PStatus = 0b00100100\n  s6502.StackPtr = 0xFF\n  setPC(memGet(0xFFFD) * 256 + memGet(0xFFFC))\n}\n\nexport const incrementPC = (value: number) => {\n  setPC((s6502.PC + value + 65536) % 65536)\n}\n\nexport const setPC = (value: number) => {\n  console.assert(!isNaN(value), \"illegal PC\")\n  s6502.PC = value\n}\n\nconst setPStatus = (value: number) => {\n  s6502.PStatus = value | 0b00110000\n}\n\nexport const stack = new Array<string>(256).fill('')\n\nconst pushStack = (call: string, value: number) => {\n  stack[s6502.StackPtr] = call\n  memSet(0x100 + s6502.StackPtr, value)\n  s6502.StackPtr = (s6502.StackPtr + 255) % 256\n}\n\nconst popStack = () => {\n  s6502.StackPtr = (s6502.StackPtr + 1) % 256;\n  const value = memGet(0x100 + s6502.StackPtr);\n  if (isNaN(value)) {\n    throw new Error(\"illegal stack value\");\n  }\n  return value\n}\n\nexport const isCarry = () => { return ((s6502.PStatus & 0x01) !== 0); }\nexport const setCarry = (set = true) => s6502.PStatus = set ? s6502.PStatus | 1 :\n  s6502.PStatus & 0b11111110\n\nconst isZero = () => { return ((s6502.PStatus & 0x02) !== 0); }\nconst setZero = (set = true) => s6502.PStatus = set ? s6502.PStatus | 2 :\n  s6502.PStatus & 0b11111101\n\n// const isInterrupt = () => { return ((PStatus & 0x04) !== 0); }\nexport const setInterrupt = (set = true) => s6502.PStatus = set ? s6502.PStatus | 4 :\n  s6502.PStatus & 0b11111011\n\nconst isDecimal = () => { return ((s6502.PStatus & 0x08) !== 0); }\nconst BCD = () => (isDecimal() ? 1 : 0)\nconst setDecimal = (set = true) => s6502.PStatus = set ? s6502.PStatus | 8 :\n  s6502.PStatus & 0b11110111\n\nexport const isBreak = () => { return ((s6502.PStatus & 0x10) !== 0); }\nconst setBreak = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x10 :\n  s6502.PStatus & 0b11101111\n\nconst isOverflow = () => { return ((s6502.PStatus & 0x40) !== 0); }\nconst setOverflow = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x40 :\n  s6502.PStatus & 0b10111111\n\nconst isNegative = () => { return ((s6502.PStatus & 0x80) !== 0); }\nconst setNegative = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x80 :\n  s6502.PStatus & 0b01111111\n\nconst checkStatus = (value: number) => {\n  setZero(value === 0);\n  setNegative(value >= 128);\n}\n\n// Return number of clock cycles taken\nexport const doBranch = (takeBranch: boolean, offset: number) => {\n  if (takeBranch) {\n    const oldPC = s6502.PC\n    incrementPC((offset > 127) ? (offset - 256) : offset)\n    return 3 + pageBoundary(oldPC, s6502.PC)\n  }\n  return 2\n}\n\nconst oneByteAdd = (value: number, offset: number) => (value + offset + 256) % 256\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\nconst twoByteAdd = (vLo: number, vHi: number, offset: number) => (vHi*256 + vLo + offset + 65536) % 65536\nconst pageBoundary = (addr1: number, addr2: number) => (((addr1 >> 8) !== (addr2 >> 8)) ? 1 : 0)\n\nexport const pcodes = new Array<PCodeInstr>(256)\n\nconst PCODE = (name: string, mode: MODE, pcode: number, PC: number, code: PCodeFunc) => {\n  console.assert(!pcodes[pcode], \"Duplicate instruction: \" + name + \" mode=\" + mode)\n  pcodes[pcode] = {name: name, pcode: pcode, mode: mode, PC: PC, execute: code}\n}\n\nconst doIndirectYinstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = twoByteAdd(vLo, vHi, s6502.YReg)\n  doInstruction(addr)\n  let cycles = 5 + pageBoundary(addr, address(vLo, vHi))\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\nconst doIndirectInstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = address(vLo, vHi)\n  doInstruction(addr)\n  let cycles = 5\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\n// 300: F8 18 B8 A9 BD 69 00 D8 00\nconst doADC_BCD = (value: number) => {\n  let ones = (s6502.Accum & 0x0F) + (value & 0x0F) + (isCarry() ? 1 : 0)\n  // Handle illegal BCD hex values by wrapping to \"tens\" digit\n  if (ones >= 0xA) {\n    ones += 6\n  }\n  let tmp = (s6502.Accum & 0xF0) + (value & 0xF0) + ones\n  // Pretend we're doing normal addition to set overflow flag\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow((tmp & 0xFF) >= 128 ? bothPositive : bothNegative)\n  // Handle illegal BCD hex values by wrapping to \"hundreds\" digit\n  setCarry(tmp >= 0xA0)\n  if (isCarry()) {\n    tmp += 0x60\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n}\n\nconst doADC_HEX = (value: number) => {\n  let tmp = s6502.Accum + value + (isCarry() ? 1 : 0)\n  setCarry(tmp >= 256)\n  tmp = tmp % 256\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow(tmp >= 128 ? bothPositive : bothNegative)\n  s6502.Accum = tmp\n  checkStatus(s6502.Accum)\n}\n\nconst doADC = (addr: number) => {\n  if (isDecimal()) {\n    doADC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(memGet(addr))\n  }\n}\n\nPCODE('ADC', MODE.IMM, 0x69, 2, (value) => {\n  if (BCD()) {doADC_BCD(value)} else {doADC_HEX(value)}; return 2 + BCD()})\nPCODE('ADC', MODE.ZP_REL, 0x65, 2, (vZP) => {doADC(vZP); return 3 + BCD()})\nPCODE('ADC', MODE.ZP_X, 0x75, 2, (vZP) =>\n  {doADC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS, 0x6D, 3, (vLo, vHi) =>\n  {doADC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS_X, 0x7D, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.ABS_Y, 0x79, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.IND_X, 0x61, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doADC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('ADC', MODE.IND_Y, 0x71, 2, (vZP) => doIndirectYinstruction(vZP, doADC, true))\nPCODE('ADC', MODE.IND, 0x72, 2, (vZP) => doIndirectInstruction(vZP, doADC, true))\n\nconst doAND = (addr: number) => {\n  s6502.Accum &= memGet(addr)\n  checkStatus(s6502.Accum)}\nPCODE('AND', MODE.IMM, 0x29, 2, (value) => {s6502.Accum &= value; checkStatus(s6502.Accum); return 2})\nPCODE('AND', MODE.ZP_REL, 0x25, 2, (vZP) => {doAND(vZP); return 3})\nPCODE('AND', MODE.ZP_X, 0x35, 2, (vZP) => {doAND(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('AND', MODE.ABS, 0x2D, 3, (vLo, vHi) => {doAND(address(vLo, vHi)); return 4})\nPCODE('AND', MODE.ABS_X, 0x3D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.ABS_Y, 0x39, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.IND_X, 0x21, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doAND(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('AND', MODE.IND_Y, 0x31, 2, (vZP) => doIndirectYinstruction(vZP, doAND, false))\nPCODE('AND', MODE.IND, 0x32, 2, (vZP) => doIndirectInstruction(vZP, doAND, false))\n\nconst doASL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 128) === 128)\n  v = (v << 1) % 256\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ASL', MODE.IMPLIED, 0x0A, 1, () => {setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = (s6502.Accum << 1) % 256; checkStatus(s6502.Accum); return 2})\nPCODE('ASL', MODE.ZP_REL, 0x06, 2, (vZP) => {doASL(vZP); return 5})\nPCODE('ASL', MODE.ZP_X, 0x16, 2, (vZP) => {doASL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ASL', MODE.ABS, 0x0E, 3, (vLo, vHi) => {doASL(address(vLo, vHi)); return 6})\nPCODE('ASL', MODE.ABS_X, 0x1E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doASL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BCC', MODE.ZP_REL, 0x90, 2, (value) => doBranch(!isCarry(), value))\nPCODE('BCS', MODE.ZP_REL, 0xB0, 2, (value) => doBranch(isCarry(), value))\nPCODE('BEQ', MODE.ZP_REL, 0xF0, 2, (value) => doBranch(isZero(), value))\nPCODE('BMI', MODE.ZP_REL, 0x30, 2, (value) => doBranch(isNegative(), value))\nPCODE('BNE', MODE.ZP_REL, 0xD0, 2, (value) => doBranch(!isZero(), value))\nPCODE('BPL', MODE.ZP_REL, 0x10, 2, (value) => doBranch(!isNegative(), value))\nPCODE('BVC', MODE.ZP_REL, 0x50, 2, (value) => doBranch(!isOverflow(), value))\nPCODE('BVS', MODE.ZP_REL, 0x70, 2, (value) => doBranch(isOverflow(), value))\nPCODE('BRA', MODE.ZP_REL, 0x80, 2, (value) => doBranch(true, value))\n\nconst doBit = (value: number) => {\n  setZero((s6502.Accum & value) === 0);\n  setNegative((value & 0b10000000) !== 0);\n  setOverflow((value & 0b01000000) !== 0);\n}\nPCODE('BIT', MODE.ZP_REL, 0x24, 2, (vZP) => {doBit(memGet(vZP)); return 3})\nPCODE('BIT', MODE.ABS, 0x2C, 3, (vLo, vHi) => {doBit(memGet(address(vLo, vHi))); return 4})\nPCODE('BIT', MODE.IMM, 0x89, 2, (value) => {doBit(value); return 2})\nPCODE('BIT', MODE.ZP_X, 0x34, 2, (vZP) => {doBit(memGet(oneByteAdd(vZP, s6502.XReg))); return 4})\nPCODE('BIT', MODE.ABS_X, 0x3C, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doBit(memGet(addr)); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BRK', MODE.IMPLIED, 0x00, 1, () => {\n  setBreak();\n  memSet(0xC00A, 0)\n  memSet(0xC006, 0)\n  const PC2 = (s6502.PC + 2) % 65536\n  const vLo = memGet(0xFFFE)\n  const vHi = memGet(0xFFFF)\n  pushStack(\"BRK $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256))\n  pushStack(\"BRK\", PC2 % 256)\n  pushStack(\"S\", s6502.PStatus)\n  setDecimal(false)  // 65c02 only\n  setInterrupt()\n  setPC(twoByteAdd(vLo, vHi, -1));\n  return 7})\n\nPCODE('CLC', MODE.IMPLIED, 0x18, 1, () => {setCarry(false); return 2})\nPCODE('CLD', MODE.IMPLIED, 0xD8, 1, () => {setDecimal(false); return 2})\nPCODE('CLI', MODE.IMPLIED, 0x58, 1, () => {setInterrupt(false); return 2})\nPCODE('CLV', MODE.IMPLIED, 0xB8, 1, () => {setOverflow(false); return 2})\n\nconst doCMP = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nconst doCMP1 = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nPCODE('CMP', MODE.IMM, 0xC9, 2, (value) => {setCarry(s6502.Accum >= value);\n  checkStatus((s6502.Accum - value + 256) % 256); return 2})\nPCODE('CMP', MODE.ZP_REL, 0xC5, 2, (vZP) => {doCMP(vZP); return 3})\nPCODE('CMP', MODE.ZP_X, 0xD5, 2, (vZP) => {doCMP(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('CMP', MODE.ABS, 0xCD, 3, (vLo, vHi) => {doCMP(address(vLo, vHi)); return 4})\nPCODE('CMP', MODE.ABS_X, 0xDD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doCMP1(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.ABS_Y, 0xD9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doCMP(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.IND_X, 0xC1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doCMP(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('CMP', MODE.IND_Y, 0xD1, 2, (vZP) => doIndirectYinstruction(vZP, doCMP, false))\nPCODE('CMP', MODE.IND, 0xD2, 2, (vZP) => doIndirectInstruction(vZP, doCMP, false))\n\nconst doCPX = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.XReg >= value)\n  checkStatus((s6502.XReg - value + 256) % 256)\n}\nPCODE('CPX', MODE.IMM, 0xE0, 2, (value) => {setCarry(s6502.XReg >= value);\n  checkStatus((s6502.XReg - value + 256) % 256); return 2})\nPCODE('CPX', MODE.ZP_REL, 0xE4, 2, (vZP) => {doCPX(vZP); return 3})\nPCODE('CPX', MODE.ABS, 0xEC, 3, (vLo, vHi) => {doCPX(address(vLo, vHi)); return 4})\n\nconst doCPY = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.YReg >= value)\n  checkStatus((s6502.YReg - value + 256) % 256)\n}\nPCODE('CPY', MODE.IMM, 0xC0, 2, (value) => {setCarry(s6502.YReg >= value);\n  checkStatus((s6502.YReg - value + 256) % 256); return 2})\nPCODE('CPY', MODE.ZP_REL, 0xC4, 2, (vZP) => {doCPY(vZP); return 3})\nPCODE('CPY', MODE.ABS, 0xCC, 3, (vLo, vHi) => {doCPY(address(vLo, vHi)); return 4})\n\nconst doDEC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), -1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('DEC', MODE.IMPLIED, 0x3A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, -1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('DEC', MODE.ZP_REL, 0xC6, 2, (vZP) => {doDEC(vZP); return 5})\nPCODE('DEC', MODE.ZP_X, 0xD6, 2, (vZP) => {doDEC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('DEC', MODE.ABS, 0xCE, 3, (vLo, vHi) => {doDEC(address(vLo, vHi)); return 6})\nPCODE('DEC', MODE.ABS_X, 0xDE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doDEC(addr)\n  return 7})\n\nPCODE('DEX', MODE.IMPLIED, 0xCA, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, -1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('DEY', MODE.IMPLIED, 0x88, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, -1);\n  checkStatus(s6502.YReg); return 2})\n\nconst doEOR = (addr: number) => {\n  s6502.Accum ^= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('EOR', MODE.IMM, 0x49, 2, (value) => {s6502.Accum ^= value; checkStatus(s6502.Accum); return 2})\nPCODE('EOR', MODE.ZP_REL, 0x45, 2, (vZP) => {doEOR(vZP); return 3})\nPCODE('EOR', MODE.ZP_X, 0x55, 2, (vZP) => {doEOR(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('EOR', MODE.ABS, 0x4D, 3, (vLo, vHi) => {doEOR(address(vLo, vHi)); return 4})\nPCODE('EOR', MODE.ABS_X, 0x5D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.ABS_Y, 0x59, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.IND_X, 0x41, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doEOR(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('EOR', MODE.IND_Y, 0x51, 2, (vZP) => doIndirectYinstruction(vZP, doEOR, false))\nPCODE('EOR', MODE.IND, 0x52, 2, (vZP) => doIndirectInstruction(vZP, doEOR, false))\n\nconst doINC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), 1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('INC', MODE.IMPLIED, 0x1A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, 1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('INC', MODE.ZP_REL, 0xE6, 2, (vZP) => {doINC(vZP); return 5})\nPCODE('INC', MODE.ZP_X, 0xF6, 2, (vZP) => {doINC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('INC', MODE.ABS, 0xEE, 3, (vLo, vHi) => {doINC(address(vLo, vHi)); return 6})\nPCODE('INC', MODE.ABS_X, 0xFE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doINC(addr)\n  return 7})\n\nPCODE('INX', MODE.IMPLIED, 0xE8, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, 1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('INY', MODE.IMPLIED, 0xC8, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, 1);\n  checkStatus(s6502.YReg); return 2})\n\nPCODE('JMP', MODE.ABS, 0x4C, 3, (vLo, vHi) => {setPC(twoByteAdd(vLo, vHi, -3)); return 3})\n// 65c02 - this fixes the 6502 indirect JMP bug across page boundaries\nPCODE('JMP', MODE.IND, 0x6C, 3, (vLo, vHi) => {const a = address(vLo, vHi);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\nPCODE('JMP', MODE.IND_X, 0x7C, 3, (vLo, vHi) => {const a = twoByteAdd(vLo, vHi, s6502.XReg);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nPCODE('JSR', MODE.ABS, 0x20, 3, (vLo, vHi) => {\n  // Push the (address - 1) of the next instruction\n  const PC2 = (s6502.PC + 2) % 65536\n  pushStack(\"JSR $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256));\n  pushStack(\"JSR\", PC2 % 256);\n  setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nconst doLDA = (addr: number) => {\n  s6502.Accum = memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('LDA', MODE.IMM, 0xA9, 2, (value) => {s6502.Accum = value; checkStatus(s6502.Accum); return 2})\nPCODE('LDA', MODE.ZP_REL, 0xA5, 2, (vZP) => {doLDA(vZP); return 3})\nPCODE('LDA', MODE.ZP_X, 0xB5, 2, (vZP) => {doLDA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDA', MODE.ABS, 0xAD, 3, (vLo, vHi) => {doLDA(address(vLo, vHi)); return 4})\nPCODE('LDA', MODE.ABS_X, 0xBD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.ABS_Y, 0xB9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.IND_X, 0xA1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doLDA(address(memGet(vZP), memGet((vZP + 1) % 256))); return 6})\nPCODE('LDA', MODE.IND_Y, 0xB1, 2, (vZP) => doIndirectYinstruction(vZP, doLDA, false))\nPCODE('LDA', MODE.IND, 0xB2, 2, (vZP) => doIndirectInstruction(vZP, doLDA, false))\n\nconst doLDX = (addr: number) => {\n  s6502.XReg = memGet(addr)\n  checkStatus(s6502.XReg)\n}\nPCODE('LDX', MODE.IMM, 0xA2, 2, (value) => {s6502.XReg = value; checkStatus(s6502.XReg); return 2})\nPCODE('LDX', MODE.ZP_REL, 0xA6, 2, (vZP) => {doLDX(vZP); return 3})\nPCODE('LDX', MODE.ZP_Y, 0xB6, 2, (vZP) => {doLDX(oneByteAdd(vZP, s6502.YReg)); return 4})\nPCODE('LDX', MODE.ABS, 0xAE, 3, (vLo, vHi) => {doLDX(address(vLo, vHi)); return 4})\nPCODE('LDX', MODE.ABS_Y, 0xBE, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDX(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLDY = (addr: number) => {\n  s6502.YReg = memGet(addr)\n  checkStatus(s6502.YReg)\n}\nPCODE('LDY', MODE.IMM, 0xA0, 2, (value) => {s6502.YReg = value; checkStatus(s6502.YReg); return 2})\nPCODE('LDY', MODE.ZP_REL, 0xA4, 2, (vZP) => {doLDY(vZP); return 3})\nPCODE('LDY', MODE.ZP_X, 0xB4, 2, (vZP) => {doLDY(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDY', MODE.ABS, 0xAC, 3, (vLo, vHi) => {doLDY(address(vLo, vHi)); return 4})\nPCODE('LDY', MODE.ABS_X, 0xBC, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDY(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLSR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 1) === 1)\n  v >>= 1\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('LSR', MODE.IMPLIED, 0x4A, 1, () => {setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum >>= 1; checkStatus(s6502.Accum); return 2})\nPCODE('LSR', MODE.ZP_REL, 0x46, 2, (vZP) => {doLSR(vZP); return 5})\nPCODE('LSR', MODE.ZP_X, 0x56, 2, (vZP) => {doLSR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('LSR', MODE.ABS, 0x4E, 3, (vLo, vHi) => {doLSR(address(vLo, vHi)); return 6})\nPCODE('LSR', MODE.ABS_X, 0x5E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLSR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('NOP', MODE.IMPLIED, 0xEA, 1, () => {return 2})\n\nconst doORA = (addr: number) => {\n  s6502.Accum |= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('ORA', MODE.IMM, 0x09, 2, (value) => {s6502.Accum |= value; checkStatus(s6502.Accum); return 2})\nPCODE('ORA', MODE.ZP_REL, 0x05, 2, (vZP) => {doORA(vZP); return 3})\nPCODE('ORA', MODE.ZP_X, 0x15, 2, (vZP) => {doORA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('ORA', MODE.ABS, 0x0D, 3, (vLo, vHi) => {doORA(address(vLo, vHi)); return 4})\nPCODE('ORA', MODE.ABS_X, 0x1D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.ABS_Y, 0x19, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.IND_X, 0x01, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doORA(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('ORA', MODE.IND_Y, 0x11, 2, (vZP) => doIndirectYinstruction(vZP, doORA, false))\nPCODE('ORA', MODE.IND, 0x12, 2, (vZP) => doIndirectInstruction(vZP, doORA, false))\n\nPCODE('PHA', MODE.IMPLIED, 0x48, 1, () => {pushStack(\"A\", s6502.Accum); return 3})\nPCODE('PHP', MODE.IMPLIED, 0x08, 1, () => {setBreak(); pushStack(\"S\", s6502.PStatus); return 3})\nPCODE('PHX', MODE.IMPLIED, 0xDA, 1, () => {pushStack(\"X\", s6502.XReg); return 3})\nPCODE('PHY', MODE.IMPLIED, 0x5A, 1, () => {pushStack(\"Y\", s6502.YReg); return 3})\nPCODE('PLA', MODE.IMPLIED, 0x68, 1, () => {s6502.Accum = popStack(); checkStatus(s6502.Accum); return 4})\nPCODE('PLP', MODE.IMPLIED, 0x28, 1, () => {setPStatus(popStack()); return 4})\nPCODE('PLX', MODE.IMPLIED, 0xFA, 1, () => {s6502.XReg = popStack(); checkStatus(s6502.XReg); return 4})\nPCODE('PLY', MODE.IMPLIED, 0x7A, 1, () => {s6502.YReg = popStack(); checkStatus(s6502.YReg); return 4})\n\nconst doROL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit0 = isCarry() ? 1 : 0;\n  setCarry((v & 128) === 128)\n  v = ((v << 1) % 256) | bit0\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROL', MODE.IMPLIED, 0x2A, 1, () => {const bit0 = isCarry() ? 1 : 0;\n  setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = ((s6502.Accum << 1) % 256) | bit0; checkStatus(s6502.Accum); return 2})\nPCODE('ROL', MODE.ZP_REL, 0x26, 2, (vZP) => {doROL(vZP); return 5})\nPCODE('ROL', MODE.ZP_X, 0x36, 2, (vZP) => {doROL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROL', MODE.ABS, 0x2E, 3, (vLo, vHi) => {doROL(address(vLo, vHi)); return 6})\nPCODE('ROL', MODE.ABS_X, 0x3E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doROR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit7 = isCarry() ? 128 : 0;\n  setCarry((v & 1) === 1)\n  v = (v >> 1) | bit7\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROR', MODE.IMPLIED, 0x6A, 1, () => {const bit7 = isCarry() ? 128 : 0;\n  setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum = (s6502.Accum >> 1) | bit7; checkStatus(s6502.Accum); return 2})\nPCODE('ROR', MODE.ZP_REL, 0x66, 2, (vZP) => {doROR(vZP); return 5})\nPCODE('ROR', MODE.ZP_X, 0x76, 2, (vZP) => {doROR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROR', MODE.ABS, 0x6E, 3, (vLo, vHi) => {doROR(address(vLo, vHi)); return 6})\nPCODE('ROR', MODE.ABS_X, 0x7E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('RTI', MODE.IMPLIED, 0x40, 1, () => {\n  setPStatus(popStack());\n  setPC(address(popStack(), popStack()) - 1); return 6})\n\nPCODE('RTS', MODE.IMPLIED, 0x60, 1, () => {setPC(address(popStack(), popStack())); return 6})\n\n// 300: F8 38 B8 A9 00 E9 00 D8 00\nconst doSBC_BCD = (value: number) => {\n  // On 65c02, do normal hex subtraction to set the carry & overflow flags.\n  const vtmp = 255 - value\n  let tmp = s6502.Accum + vtmp + (isCarry() ? 1 : 0)\n  const newCarry = (tmp >= 256)\n  const bothPositive = (s6502.Accum <= 127 && vtmp <= 127)\n  const bothNegative = (s6502.Accum >= 128 && vtmp >= 128)\n  setOverflow((tmp % 256) >= 128 ? bothPositive : bothNegative)\n\n  let ones = (s6502.Accum & 0x0F) - (value & 0x0F) + (isCarry() ? 0 : -1)\n  tmp = s6502.Accum - value + (isCarry() ? 0 : -1)\n  if (tmp < 0) {\n    tmp -= 0x60\n  }\n  if (ones < 0) {\n    tmp -= 0x06\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n  setCarry(newCarry)\n}\n\nconst doSBC = (addr: number) => {\n  if (BCD()) {\n    doSBC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(255 - memGet(addr))\n  }\n}\n\nPCODE('SBC', MODE.IMM, 0xE9, 2, (value) => {\n  if (BCD()) {doSBC_BCD(value)} else {doADC_HEX(255 - value)}\n  return 2 + BCD()})\nPCODE('SBC', MODE.ZP_REL, 0xE5, 2, (vZP) =>\n  {doSBC(vZP); return 3 + BCD()})\nPCODE('SBC', MODE.ZP_X, 0xF5, 2, (vZP) =>\n  {doSBC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS, 0xED, 3, (vLo, vHi) =>\n  {doSBC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS_X, 0xFD, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.ABS_Y, 0xF9, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.IND_X, 0xE1, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doSBC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('SBC', MODE.IND_Y, 0xF1, 2, (vZP) =>\n  doIndirectYinstruction(vZP, doSBC, true))\nPCODE('SBC', MODE.IND, 0xF2, 2, (vZP) =>\n  doIndirectInstruction(vZP, doSBC, true))\n\nPCODE('SEC', MODE.IMPLIED, 0x38, 1, () => {setCarry(); return 2})\nPCODE('SED', MODE.IMPLIED, 0xF8, 1, () => {setDecimal(); return 2})\nPCODE('SEI', MODE.IMPLIED, 0x78, 1, () => {setInterrupt(); return 2})\n\n// Zero Page     STA $44       $85  2   3\n// Zero Page,X   STA $44,X     $95  2   4\n// Absolute      STA $4400     $8D  3   4\n// Absolute,X    STA $4400,X   $9D  3   5\n// Absolute,Y    STA $4400,Y   $99  3   5\n// Indirect,X    STA ($44,X)   $81  2   6\n// Indirect,Y    STA ($44),Y   $91  2   6\nPCODE('STA', MODE.ZP_REL, 0x85, 2, (vZP) => {memSet(vZP, s6502.Accum); return 3})\nPCODE('STA', MODE.ZP_X, 0x95, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS, 0x8D, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS_X, 0x9D, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, s6502.Accum)\n  return 5})\nPCODE('STA', MODE.ABS_Y, 0x99, 3, (vLo, vHi) => {memSet(twoByteAdd(vLo, vHi, s6502.YReg), s6502.Accum); return 5})\nPCODE('STA', MODE.IND_X, 0x81, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  memSet(address(memGet(vZP), memGet(vZP + 1)), s6502.Accum); return 6})\nconst doSTA = (addr: number) => {\n  memSet(addr, s6502.Accum)\n}\n// STA ($FF),Y take 6 cycles, doesn't depend upon page boundary\nPCODE('STA', MODE.IND_Y, 0x91, 2, (vZP) => {doIndirectYinstruction(vZP, doSTA, false); return 6})\nPCODE('STA', MODE.IND, 0x92, 2, (vZP) => doIndirectInstruction(vZP, doSTA, false))\n\nPCODE('STX', MODE.ZP_REL, 0x86, 2, (vZP) => {memSet(vZP, s6502.XReg); return 3})\nPCODE('STX', MODE.ZP_Y, 0x96, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.YReg), s6502.XReg); return 4})\nPCODE('STX', MODE.ABS, 0x8E, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.XReg); return 4})\n\nPCODE('STY', MODE.ZP_REL, 0x84, 2, (vZP) => {memSet(vZP, s6502.YReg); return 3})\nPCODE('STY', MODE.ZP_X, 0x94, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.YReg); return 4})\nPCODE('STY', MODE.ABS, 0x8C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.YReg); return 4})\n\nPCODE('STZ', MODE.ZP_REL, 0x64, 2, (vZP) => {memSet(vZP, 0); return 3})\nPCODE('STZ', MODE.ZP_X, 0x74, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), 0); return 4})\nPCODE('STZ', MODE.ABS, 0x9C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), 0); return 4})\nPCODE('STZ', MODE.ABS_X, 0x9E, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, 0)\n  return 5})\n\nPCODE('TAX', MODE.IMPLIED, 0xAA, 1, () => {s6502.XReg = s6502.Accum; checkStatus(s6502.XReg); return 2})\nPCODE('TAY', MODE.IMPLIED, 0xA8, 1, () => {s6502.YReg = s6502.Accum; checkStatus(s6502.YReg); return 2})\nPCODE('TSX', MODE.IMPLIED, 0xBA, 1, () => {s6502.XReg = s6502.StackPtr; checkStatus(s6502.XReg); return 2})\nPCODE('TXA', MODE.IMPLIED, 0x8A, 1, () => {s6502.Accum = s6502.XReg; checkStatus(s6502.Accum); return 2})\nPCODE('TXS', MODE.IMPLIED, 0x9A, 1, () => {s6502.StackPtr = s6502.XReg; return 2})\nPCODE('TYA', MODE.IMPLIED, 0x98, 1, () => {s6502.Accum = s6502.YReg; checkStatus(s6502.Accum); return 2})\n\n// Undocumented 65c02 NOP's\n// http://www.6502.org/tutorials/65c02opcodes.html\n//       x2:     x3:     x4:     x7:     xB:     xC:     xF:\n//      -----   -----   -----   -----   -----   -----   -----\n// 0x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 1x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 2x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 3x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 4x:  2 2 .   1 1 .   2 3 g   1 1 a   1 1 .   . . .   1 1 c\n// 5x:  . . .   1 1 .   2 4 h   1 1 a   1 1 .   3 8 j   1 1 c\n// 6x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 7x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 8x:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// 9x:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Ax:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Bx:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Cx:  2 2 .   1 1 .   . . .   1 1 b   1 1 e   . . .   1 1 d\n// Dx:  . . .   1 1 .   2 4 h   1 1 b   1 1 f   3 4 i   1 1 d\n// Ex:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Fx:  . . .   1 1 .   2 4 h   1 1 b   1 1 .   3 4 i   1 1 d\nconst twoByteNops = [0x02, 0x22, 0x42, 0x62, 0x82, 0xC2, 0xE2]\ntwoByteNops.forEach(instr => {\n  PCODE('NOPX', MODE.IMPLIED, instr, 2, () => {return 2})\n});\nfor (let i = 0; i <= 15; i++) {\n  PCODE('NOPX', MODE.IMPLIED, 3 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 7 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 0xB + 16 * i, 1, () => {return 1})  \n  PCODE('NOPX', MODE.IMPLIED, 0xF + 16 * i, 1, () => {return 1})  \n}\nPCODE('NOPX', MODE.IMPLIED, 0x44, 2, () => {return 3})\nPCODE('NOPX', MODE.IMPLIED, 0x54, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xD4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xF4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0x5C, 3, () => {return 8})\nPCODE('NOPX', MODE.IMPLIED, 0xDC, 3, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xFC, 3, () => {return 4})\n","\n// export const code = ''\nexport const code2 = `\n        ORG   $300\n; set up Mockingboard\n        LDA #$C0    ; enable Mockingboard\n        STA $C030\n        LDA #$80    ; select channel 0\n        STA $C010\n        LDA #$00    ; set frequency LSB to 0\n        STA $C012\n        LDA #$05    ; set frequency MSB to 5 (261 Hz)\n        STA $C013\n        LDA #$0F    ; set volume to maximum\n        STA $C015\n\n; play notes\n        LDA #$80    ; start sound\n        STA $C010\n        LDX #20     ; loop for 20 cycles (approx. 1 second)\nLOOP    DEX\n        BNE LOOP\n        LDA #$00    ; stop sound\n        STA $C010\n\n; end of program\n        RTS\n`\nexport const code = `\n         ORG   $300\nFREQ     EQU   $350\nPLSWIDTH EQU   $352\n\n         LDA   #$FF\n         STA   FREQ\n         LDA   #$80\n         STA   PLSWIDTH\nPLAY     LDA   $C030\n         LDY   PLSWIDTH\nPULSE    DEY\n         BNE   PULSE\n         LDA   $C030\n         LDX   FREQ\nCOUNTDN  DEX\n         BNE   COUNTDN\n         JSR   READKB\n         JMP   PLAY\n\nINCR     INC   FREQ\n         RTS\n\nDECR     DEC   FREQ\n         RTS\n\nPULSEINC DEC   PLSWIDTH\n         INC   FREQ\n         RTS\n\nPULSEDEC INC   PLSWIDTH\n         DEC   FREQ\n         RTS\n\nREADKB   LDA   $C000\n         STA   $C010   \n         CMP   #$88\n         BEQ   INCR\n         CMP   #$95\n         BEQ   DECR\n         CMP   #$C1\n         BEQ   PULSEINC\n         CMP   #$DA\n         BEQ   PULSEDEC\n         RTS\n`\n","export const disk2driver = [0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C,0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10,0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD,0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0,0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,0x20,0xA8,0xFC,0x88,0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C,0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3,0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0,0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD,0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40,0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00,0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5,0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00]\n// export const slot_disk2=`oiCgAKIDhjyKCiQ88BAFPEn/KX6wCErQ+5idVgPI6BDlIFj/ur0AAQoKCgqFK6q9\n// jsC9jMC9isC9icCgUL2AwJgpAwoFK6q9gcCpViCo/IgQ64UmhT2FQakIhScYCL2M\n// wBD7SdXQ972MwBD7yarQ8+q9jMAQ+8mW8AkokN9JrfAl0NmgA4VAvYzAEPsqhTy9\n// jMAQ+yU8iNDsKMU90L6lQMVB0Liwt6BWhDy8jMAQ+1nWAqQ8iJkAA9DuhDy8jMAQ\n// +1nWAqQ8kSbI0O+8jMAQ+1nWAtCHoACiVsow+7EmXgADKl4AAyqRJsjQ7uYn5j2l\n// Pc0ACKYrkNtMAQgAAAAAAA==`\n","// Chris Torrence, 2022\nimport { Buffer } from \"buffer\"\nimport { passMachineState } from \"./worker2main\"\nimport { s6502, set6502State, reset6502, pcodes,\n  incrementPC, cycleCount, setCycleCount, stack } from \"./instructions\"\nimport { STATE, getProcessorStatus, getInstrString, toHex } from \"./utility\"\nimport { getDriveSaveState, restoreDriveSaveState, doResetDrive, doPauseDrive } from \"./drivestate\"\n// import { slot_omni } from \"./roms/slot_omni_cx00\"\nimport { SWITCHES } from \"./softswitches\";\nimport { memory, memGet, getTextPage, getHires, specialJumpTable, setSlotDriver, memoryReset, updateAddressTables } from \"./memory\"\nimport { setButtonState, handleGamepads } from \"./joystick\"\nimport { parseAssembly } from \"./assembler\";\nimport { code } from \"./assemblycode\"\nimport { disk2driver } from \"./roms/slot_disk2_cx00\"\nimport { handleHelptext } from \"./game_mappings\"\n\n// let timerID: any | number = 0\nlet startTime = 0\nlet prevTime = 0\nlet normalSpeed = true\nlet speed = 0\nlet refreshTime = 16.6881 // 17030 / 1020.488\nlet timeDelta = 0\nlet cpuState = STATE.IDLE\nlet iRefresh = 0\nlet saveTimeSlice = false\nlet iSaveState = 0\nlet iTempState = 0\nlet maxState = 60\nlet saveStates = Array<string>(maxState).fill('')\n// let prevMemory = Buffer.from(mainMem)\n// let DEBUG_ADDRESS = -1 // 0x9631\nlet doDebug = false\n// let doDebugZeroPage = false\nconst instrTrail = new Array<string>(1000)\nlet posTrail = 0\nlet breakpoint = -1\nlet runToRTS = false\n\nconst getApple2State = (): SAVEAPPLE2STATE => {\n  const softSwitches: { [name: string]: boolean } = {}\n  for (const key in SWITCHES) {\n    softSwitches[key] = SWITCHES[key as keyof typeof SWITCHES].isSet\n  }\n  const membuffer = Buffer.from(memory)\n  // let memdiff: { [addr: number]: number } = {};\n  // for (let i = 0; i < memory.length; i++) {\n  //   if (prevMemory[i] !== memory[i]) {\n  //     memdiff[i] = memory[i]\n  //   }\n  // }\n  // prevMemory = memory\n  return {\n    s6502: s6502,\n    softSwitches: softSwitches,\n    memory: membuffer.toString(\"base64\"),\n    memAux: '',\n    memc000: '',\n  }\n}\n\nconst setApple2State = (newState: SAVEAPPLE2STATE) => {\n  set6502State(newState.s6502)\n  const softSwitches: { [name: string]: boolean } = newState.softSwitches\n  for (const key in softSwitches) {\n    const keyTyped = key as keyof typeof SWITCHES\n    try {\n      SWITCHES[keyTyped].isSet = softSwitches[key]    \n    } catch (error) {\n    }\n  }\n  memory.set(Buffer.from(newState.memory, \"base64\"))\n  updateAddressTables()\n  handleHelptext(true)\n  // mainMem.set(Buffer.from(newState.memory, \"base64\"))\n  // memC000.set(Buffer.from(newState.memc000, \"base64\"))\n  // if (newState.memAux !== undefined) {\n  //   auxMem.set(Buffer.from(newState.memAux, \"base64\"))\n  // }\n}\n\n// export const doRequestSaveState = () => {\n//   passSaveState(doGetSaveState())\n// }\n\nexport const doGetSaveState = (full = false) => {\n  const state = { state6502: getApple2State(), driveState: getDriveSaveState(full) }\n  return JSON.stringify(state)\n//  return Buffer.from(compress(JSON.stringify(state)), 'ucs2').toString('base64')\n}\n\nexport const doRestoreSaveState = (sState: string) => {\n  const state = JSON.parse(sState);\n  setApple2State(state.state6502 as SAVEAPPLE2STATE)\n  restoreDriveSaveState(state.driveState)\n  updateExternalMachineState()\n}\n\n// const testTiming = () => {\n//   let t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memGet(i)    \n//     }\n//   }\n//   let tdiff = performance.now() - t0\n//   console.log(`memGet time = ${tdiff}`)\n//   t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memSet(i, 255)    \n//     }\n//   }\n//   tdiff = performance.now() - t0\n//   console.log(`memSet time = ${tdiff}`)\n// }\n\nconst doBoot = () => {\n  setCycleCount(0)\n  memoryReset()\n  setSlotDriver(6, Uint8Array.from(disk2driver))\n  if (code.length > 0) {\n    let pcode = parseAssembly(0x300, code.split(\"\\n\"));\n    memory.set(pcode, 0x300);\n  }\n//  testTiming()\n  doReset()\n}\n\nconst doReset = () => {\n//  memoryReset()\n  for (const key in SWITCHES) {\n    const keyTyped = key as keyof typeof SWITCHES\n    SWITCHES[keyTyped].isSet = false\n  }\n  SWITCHES.TEXT.isSet = true\n  // Reset banked RAM\n  memGet(0xC082)\n  reset6502()\n  doResetDrive()\n  setButtonState()\n}\n\nexport const doSetNormalSpeed = (normal: boolean) => {\n  normalSpeed = normal\n  refreshTime = normalSpeed ? 16.6881 : 0\n  resetRefreshCounter()\n}\n\nexport const doGoBackInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  // if this is the first time we're called, make sure our current\n  // state is up to date\n  if (iTempState === iSaveState) {\n    saveStates[iSaveState] = doGetSaveState()\n  }\n  const newTmp = (iTempState + maxState - 1) % maxState\n  if (newTmp === iSaveState || saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doGoForwardInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  if (iTempState === iSaveState) {\n    return\n  }\n  const newTmp = (iTempState + 1) % maxState\n  if (saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doSaveTimeSlice = () => {\n  // Set a flag and save our slice at the end of the next 6502 display cycle.\n  // Otherwise we risk saving in the middle of a keystroke.\n  saveTimeSlice = true\n}\n\nexport const doStepInto = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  processInstruction(true)\n  cpuState = STATE.PAUSED\n  updateExternalMachineState()\n}\n\nexport const doStepOver = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  if (memGet(s6502.PC) === 0x20) {\n    // If we're at a JSR then briefly step in, then step out.\n    processInstruction(true)\n    doStepOut()\n  } else {\n    // Otherwise just do a single step.\n    doStepInto()\n  }\n}\n\nexport const doStepOut = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  runToRTS = true\n  doSetCPUState(STATE.RUNNING)\n}\n\nconst resetRefreshCounter = () => {\n  iRefresh = 0\n  prevTime = performance.now()\n  startTime = prevTime\n}\n\nexport const doSetCPUState = (cpuStateIn: STATE) => {\n  cpuState = cpuStateIn\n  if (cpuState === STATE.PAUSED || cpuState === STATE.RUNNING) {\n    doPauseDrive(cpuState === STATE.RUNNING)\n  }\n  updateExternalMachineState()\n  resetRefreshCounter()\n  if (speed === 0) {\n    doAdvance6502Timer()\n  }\n}\n\nexport const doSetDebug = (debug: boolean) => {\n  doDebug = debug\n}\n\nexport const doSetBreakpoint = (breakpt: number) => {\n  breakpoint = breakpt\n//  if (breakpoint !== 0) doDebug = true\n}\n\nlet ndebug = 0\n\n// let memZP = new Uint8Array(256).fill(0)\n// const checkZeroPageDiff = () => {\n//   const mem = getDataBlock(0)\n//   const diff = new Uint8Array(256)\n//   let ndiff = 0\n//   for (let i=0; i < 256; i++) {\n//     diff[i] = mem[i] - memZP[i]\n//     memZP[i] = mem[i]\n//     if (diff[i]) ndiff++\n//   }\n//   const skip = [0x4E, 0xEB, 0xEC, 0xED, 0xF9, 0xFA, 0xFB, 0xFC]\n//   for (let i = 0; i < skip.length; i++) {\n//     if (diff[skip[i]]) {\n//       diff[skip[i]] = 0\n//       ndiff--\n//     }\n//   }\n//   let s = ''\n//   if (ndiff > 0 && ndiff < 127) {\n//     for (let i=0; i < 256; i++) {\n//       if (diff[i]) s += ` ${toHex(i)}:${toHex(diff[i])}`\n//     }\n//     console.log(s)\n//   }\n// }\n\nexport const processInstruction = (step = false) => {\n  let cycles = 0\n  let PC1 = s6502.PC\n  const instr = memGet(s6502.PC)\n  const vLo = s6502.PC < 0xFFFF ? memGet(s6502.PC + 1) : 0\n  const vHi = s6502.PC < 0xFFFE ? memGet(s6502.PC + 2) : 0\n  let code = pcodes[instr]\n  if (!code) {\n    code = pcodes[0xEA]\n  }\n  if (code) {\n    if (PC1 === breakpoint && !step) {\n      cpuState = STATE.PAUSED\n      return -1\n    }\n    // HACK\n    const fn = specialJumpTable.get(PC1)\n    if (fn && !SWITCHES.INTCXROM.isSet) {\n      fn()\n    }\n    // END HACK\n//    if (PC1 === 0xC7C3) doDebug = true\n    cycles = code.execute(vLo, vHi)\n    let out = '----'\n    // Do not output during the Apple II's WAIT subroutine\n    if ((PC1 < 0xFCA8 || PC1 > 0xFCB3) && PC1 < 0xFF47) {\n      const cc = (cycleCount.toString() + '      ').slice(0, 10)\n      const ins = getInstrString(code, vLo, vHi, PC1) + '            '\n      out = `${cc}  ${ins.slice(0, 22)}  ${getProcessorStatus(s6502)}`\n    }\n    instrTrail[posTrail] = out\n    posTrail = (posTrail + 1) % instrTrail.length\n    if (doDebug) {\n      if (instr === 0) doDebug = false\n      console.log(out)\n      ndebug++\n      if (ndebug > 10000) {\n        doDebug = false\n        cpuState = STATE.PAUSED\n        return -1\n      }\n//      console.log(getStackString())\n//      if (doDebugZeroPage) {\n//        debugZeroPage(mainMem.slice(0, 256))\n//      }\n    }\n    // if (doDebug) {\n    //   instrTrail.slice(posTrail).forEach(s => console.log(s));\n    //   instrTrail.slice(0, posTrail).forEach(s => console.log(s));\n    //   console.log(\"stop!!!\")\n    // }\n    setCycleCount(cycleCount + cycles)\n    incrementPC(code.PC)\n    if (code.pcode === 0x60 && runToRTS) {\n      runToRTS = false\n      cpuState = STATE.PAUSED\n      return -1\n    }\n  }\n  return cycles\n}\n\nexport const getStackString = () => {\n  const stackvalues = memory.slice(256, 512)\n  const result = new Array<string>()\n  for (let i = 0xFF; i > s6502.StackPtr; i--) {\n    let value = \"$\" + toHex(stackvalues[i])\n    let cmd = stack[i]\n    if ((stack[i].length > 3) && (i - 1) > s6502.StackPtr) {\n      if (stack[i-1] === \"JSR\" || stack[i-1] === \"BRK\") {\n        i--\n        value += toHex(stackvalues[i])\n      } else {\n        cmd = ''\n      }\n    }\n    value = (value + \"   \").substring(0, 6)\n    result.push(toHex(0x100 + i, 4) + \": \" + value + cmd)\n  }\n  return result\n}\n\nconst getDebugString = () => {\n  return ''\n  // const status = Array<String>(16).fill(\"\")\n  // // const stackString = getStackString()\n  // // for (let i = 0; i < Math.min(20, stackString.length); i++) {\n  // //   status[i] = stackString[i]\n  // // }\n  // for (let j = 0; j < 16; j++) {\n  //   let s = toHex(16 * j) + \":\"\n  //   for (let i = 0; i < 16; i++) {\n  //     s += \" \" + toHex(mainMem[j * 16 + i])\n  //   }\n  //   status[j] = s\n  // }\n  // return status.join('\\n')\n}\n\nconst updateExternalMachineState = () => {\n  const state: MachineState = {\n    state: cpuState,\n    speed: speed.toFixed(2),\n    altChar: SWITCHES.ALTCHARSET.isSet,\n    textPage: getTextPage(),\n    lores: getTextPage(true),\n    hires: getHires(),\n    zeroPageStack: getDebugString(),\n    button0: SWITCHES.PB0.isSet,\n    button1: SWITCHES.PB1.isSet,\n  }\n  passMachineState(state)\n}\n\nconst doAdvance6502 = () => {\n  const newTime = performance.now()\n  timeDelta = newTime - prevTime\n  if (timeDelta < refreshTime) return\n  prevTime = newTime\n  if (cpuState === STATE.IDLE || cpuState === STATE.PAUSED) {\n    return;\n  }\n  if (cpuState === STATE.NEED_BOOT) {\n    doBoot();\n    doSetCPUState(STATE.RUNNING)\n  } else if (cpuState === STATE.NEED_RESET) {\n    doReset();\n    doSetCPUState(STATE.RUNNING)\n  }\n  let cycleTotal = 0\n  while (true) {\n    const cycles = processInstruction();\n    if (cycles < 0) break\n    cycleTotal += cycles;\n    if (cycleTotal >= 17030) {\n      break;\n    }\n  }\n  iRefresh++\n  speed = (iRefresh * 17.030) / (performance.now() - startTime)\n  updateExternalMachineState()\n  if (saveTimeSlice) {\n    saveTimeSlice = false\n    iSaveState = (iSaveState + 1) % maxState\n    iTempState = iSaveState\n//    console.log(\"iSaveState \" + iSaveState)\n    saveStates[iSaveState] = doGetSaveState()\n  }\n}\n\nconst doAdvance6502Timer = () => {\n  doAdvance6502()\n  const iRefreshFinish = (iRefresh + 5)\n  while (cpuState === STATE.RUNNING && iRefresh !== iRefreshFinish) {\n    doAdvance6502()\n  }\n  if (cpuState === STATE.RUNNING) {\n    handleGamepads()\n    setTimeout(doAdvance6502Timer, 0)\n  } else {\n    setTimeout(doAdvance6502Timer, 10)\n  }\n}\n","import { doSetCPUState, doSetBreakpoint,\n  doGetSaveState, doRestoreSaveState, doSetNormalSpeed,\n  doGoBackInTime, doGoForwardInTime, doSetDebug,\n  doStepInto, doStepOver, doStepOut } from \"./motherboard\";\nimport { doSetDriveProps } from \"./drivestate\"\nimport { sendTextToEmulator } from \"./keyboard\"\nimport { pressAppleCommandKey, setGamepads } from \"./joystick\"\nimport { DRIVE } from \"./utility\";\n\n// This file must have worker types, but not DOM types.\n// The global should be that of a dedicated worker.\n\n// This fixes `self`'s type.\ndeclare var self: DedicatedWorkerGlobalScope;\nexport {};\n\nconst doPostMessage = (msg: string, payload: any) => {\n  self.postMessage({msg, payload});\n}\n\nexport const passMachineState = (state: MachineState) => {\n  doPostMessage(\"MACHINE_STATE\", state)\n}\n\nexport const passClickSpeaker = (cycleCount: number) => {\n  doPostMessage(\"CLICK\", cycleCount)\n}\n\nexport const passDriveProps = (props: DriveProps) => {\n  doPostMessage(\"DRIVE_PROPS\", props)\n}\n\nexport const passDriveSound = (sound: DRIVE) => {\n  doPostMessage(\"DRIVE_SOUND\", sound)\n}\n\nconst passSaveState = (saveState: string) => {\n  doPostMessage(\"SAVE_STATE\", saveState)\n}\n\nexport const passRumble = (params: GamePadActuatorEffect) => {\n  doPostMessage(\"RUMBLE\", params)\n}\n\nexport const passHelptext = (helptext: string) => {\n  doPostMessage(\"HELP_TEXT\", helptext)\n}\n\nself.onmessage = (e: MessageEvent) => {\n  switch (e.data.msg) {\n    case \"STATE\":\n      doSetCPUState(e.data.payload)\n      break;\n    case \"DEBUG\":\n      doSetDebug(e.data.payload)\n      break;\n    case \"BREAKPOINT\":\n      doSetBreakpoint(e.data.payload)\n      break;\n    case \"STEP_INTO\":\n      doStepInto()\n      break;\n    case \"STEP_OVER\":\n      doStepOver()\n      break;\n    case \"STEP_OUT\":\n      doStepOut()\n      break;\n    case \"SPEED\":\n      doSetNormalSpeed(e.data.payload)\n      break;\n    case \"TIME_TRAVEL\":\n      if (e.data.payload === \"FORWARD\") {\n          doGoForwardInTime()\n      } else {\n          doGoBackInTime()\n      }\n      break;\n    case \"RESTORE_STATE\":\n      doRestoreSaveState(e.data.payload)\n      break;\n    case \"KEYBUFFER\":\n      sendTextToEmulator(e.data.payload)\n      break;\n    case \"APPLE_PRESS\":\n      pressAppleCommandKey(true, e.data.payload)\n      break;\n    case \"APPLE_RELEASE\":\n      pressAppleCommandKey(false, e.data.payload)\n      break;\n    case \"GET_SAVE_STATE\":\n      passSaveState(doGetSaveState(true))\n      break;\n    case \"DRIVE_PROPS\":\n      const props = e.data.payload as DriveProps\n      doSetDriveProps(props)\n      break;\n    case \"GAMEPAD\":\n      setGamepads(e.data.payload)\n      break\n    default:\n      break;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [669], function() { return __webpack_require__(2406); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"14135427\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t406: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkapple2ts\"] = self[\"webpackChunkapple2ts\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(669).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["STATE","COLOR_MODE","ARROW","DRIVE","MODE","gamePads","mapping","isRelativeInstr","instr","startsWith","toHex","value","ndigits","arguments","length","undefined","toString","toUpperCase","slice","getProcessorStatus","s6502","concat","Accum","XReg","YReg","PStatus","P","StackPtr","getInstrString","code","vLo","vHi","PC","result","_modeString","mode","prefix","suffix","IMM","ZP_X","ABS_X","ZP_Y","ABS_Y","IND","IND_X","IND_Y","modeString","_modeString2","_slicedToArray","name","addr","address","toASCII","Uint8Array","s","split","map","char","charCodeAt","uint32toBytes","n","replaceSuffix","fname","i","lastIndexOf","substring","maxTimeoutCycles","Math","trunc","paddle0timeout","paddle1timeout","paddle2timeout","paddle3timeout","countStart","leftAppleDown","rightAppleDown","leftButtonDown","rightButtonDown","isPB2down","isLeftDown","isRightDown","valueToTimeout","min","max","setGamepad0","setGamepad1","setGamepad2","setGamepad3","setButtonState","SWITCHES","pressAppleCommandKey","isDown","left","checkJoystickValues","cycleCount","diff","memSetC000","nearZero","handleGamepad","gp","stick","axes","xstick","ystick","dist","sqrt","clip","abs","convertGamepadAxes","buttonPressed","buttons","forEach","button","handleRumbleMapping","timeout","leftdown","rightdown","buttonreleased","aztec","data","keymap","gamepad","addToBuffer","addToBufferDebounce","str","getTextPageAsString","includes","rumble","helptext","memB6","memB7","karateka","newValue","memGet","passRumble","startDelay","duration","weakMagnitude","strongMagnitude","gameLibrary","Array","push","defaultButtons","dualJoysticks","isJoystick2","gamepadMapping","_i2","_gameLibrary2","game","matchMemory","_i3","_gameLibrary3","handleHelptext","reset","_i4","_gameLibrary4","passHelptext","keyBuffer","popKey","memGetC000","key","keyPress","doSaveTimeSlice","prevKey","text","tPrev","t","performance","now","sendTextToEmulator","_i","_gameLibrary","keyMapping","sswitch","NewSwitch","offAddr","isSetAddr","onAddr","writeOnly","isSet","setFunc","rand","floor","random","STORE80","RAMRD","RAMWRT","INTCXROM","ALTZP","SLOTC3ROM","COLUMN80","ALTCHARSET","KBRDSTROBE","keyvalue","BSRBANK2","BSRREADRAM","CASSOUT","SPEAKER","passClickSpeaker","EMUBYTE","TEXT","MIXED","PAGE2","HIRES","AN0","AN1","AN2","AN3","CASSIN1","PB0","PB1","PB2","JOYSTICK12","JOYSTICK34","CASSIN2","FASTCHIP_LOCK","FASTCHIP_ENABLE","FASTCHIP_SPEED","JOYSTICKRESET","resetJoystick","LASER128EX","READBSR2","WRITEBSR2","OFFBSR2","RDWRBSR2","READBSR1","WRITEBSR1","OFFBSR1","RDWRBSR1","DRVSM0","DRVSM1","DRVSM2","DRVSM3","DRVSEL","DRVDATA","DRVWRITE","checkSoftSwitches","calledFromMemSet","handleBankedRAM","sswitch1","console","error","write_byte","woz","position","shift","byte_position","write_4_and_4","write_sync","encode_6_and_2","src","six_and_two_mapping","dest","bit_reverse","c","location","serialise_track","track_number","is_prodos","track_position","fill","sector","ls","contents","crcTable","Uint32Array","makeCRCTable","k","decodeWoz2","driveState","diskData","isWoz2","find","isWriteProtected","crc","storedCRC","pow","actualCRC","offset","crc32","alert","filename","htrack","tmap_index","tmap_offset","trk","trackStart","trackNbits","decodeDSK","newData","dskData","isPO","set","trackInput","trackData","convertdsk2woz","toLowerCase","endsWith","diskHasChanges","int32","isHardDriveImage","f","decodeDiskData","hardDrive","status","nbytes","magic","String","fromCharCode","decode2MG","isDSK","isWoz1","decodeWoz1","parseNumberOptionalAddressMode","operand","IMPLIED","ABS","ZP_REL","parseInt","labels","getOperandModeValue","pc","pass","match","labelOperand","label","operation","replace","splitOperand","isImmediate","Error","parseOnce","start","instructions","prevLabel","line","trimEnd","codeLine","splitLine","parts","_parseNumberOptionalA","_parseNumberOptionalA2","handleLabel","_getOperandModeValue","_getOperandModeValue2","pcodes","findIndex","newInstructions","pcode","getHexCodesForInstruction","apply","_toConsumableArray","parseAssembly","timerID","driverAddr","code1","prodos8driver","driver","pcode1","pcode2","enableHardDrive","enable","slot","setSlotDriver","processHardDriveBlockAccess","processSmartPortAccess","ds","getHardDriveState","dd","getHardDriveData","S","callAddr","spCommand","spParamList","unitNumber","bufferAddr","setCarry","statusCode","memSet","blockStart","dataRead","setDataBlock","motorRunning","setTimeout","passData","block","dataLen","setX","setY","nblocks","dataWrite","getDataBlock","initDriveState","drive","halftrack","prevHalfTrack","writeMode","currentPhase","trackLocation","driveData","currentDrive","setCurrentDrive","getCurrentDriveState","getCurrentDriveData","dprops","passDriveProps","getDriveSaveState","full","Buffer","motorOffTimeout","doResetDiskDrive","doMotorTimeout","doPauseDiskDrive","startMotor","passDriveSound","MOTOR_OFF","moveHead","TRACK_END","TRACK_SEEK","pickbit","clearbit","getNextBit","bit","byte","b","dataRegister","prevCycleCount","doWriteBit","fileOffset","doWriteByte","delta","debugCache","clearTimeout","MOTOR_ON","dumpData","handleDriveSoftSwitches","getNextByte","stopMotor","dsOld","ps","a","ascend","descend","memory","addressGetTable","addressSetTable","AUXindex","ROMstartMinusC000","SLOTstartMinusC100","AUXstart","updateAddressTables","offsetAuxRead","offsetAuxWrite","offsetPage2","offsetTextPageRead","offsetTextPageWrite","offsetHgrPageRead","offsetHgrPageWrite","updateMainAuxMemoryTable","offsetZP","updateReadBankSwitchedRamTable","updateWriteBankSwitchedRamTable","ROMindexMinusC0","updateSlotRomTable","specialJumpTable","Map","jump","fn","memoryReset","rom64","rom","memGetSoftSwitch","page","shifted","repeat","TEXT_PAGE1","TEXT_PAGE2","getTextPage","jstart","jend","is80column","pageOffset","textPage","j","joffset","getHires","doubleRes","nlines","hgrPage","setCycleCount","cycles","incrementPC","setPC","assert","isNaN","setPStatus","stack","pushStack","call","popStack","isCarry","isZero","setZero","setInterrupt","isDecimal","BCD","setDecimal","setBreak","isOverflow","setOverflow","isNegative","setNegative","checkStatus","doBranch","takeBranch","oldPC","pageBoundary","oneByteAdd","twoByteAdd","addr1","addr2","PCODE","execute","doIndirectYinstruction","vZP","doInstruction","addBCD","doIndirectInstruction","doADC_BCD","ones","tmp","bothPositive","bothNegative","doADC_HEX","doADC","vOffset","doAND","doASL","v","doBit","PC2","doCMP","doCMP1","doCPX","doCPY","doDEC","doEOR","doINC","doLDA","doLDX","doLDY","doLSR","doORA","doROL","bit0","doROR","bit7","doSBC_BCD","vtmp","newCarry","doSBC","doSTA","disk2driver","startTime","prevTime","speed","refreshTime","cpuState","IDLE","iRefresh","saveTimeSlice","iSaveState","iTempState","saveStates","doDebug","instrTrail","posTrail","breakpoint","runToRTS","getApple2State","softSwitches","membuffer","memAux","memc000","setApple2State","newState","new6502","keyTyped","doGetSaveState","state","state6502","JSON","stringify","doRestoreSaveState","sState","parse","restoreDriveSaveState","updateExternalMachineState","doBoot","from","doReset","doStepInto","PAUSED","processInstruction","doStepOut","doSetCPUState","RUNNING","resetRefreshCounter","cpuStateIn","doPauseDrive","doAdvance6502Timer","ndebug","step","PC1","get","out","cc","ins","log","toFixed","altChar","lores","hires","zeroPageStack","button0","button1","passMachineState","doAdvance6502","newTime","NEED_BOOT","NEED_RESET","cycleTotal","iRefreshFinish","doPostMessage","msg","payload","self","postMessage","props","sound","params","onmessage","e","debug","breakpt","normal","newTmp","doGoForwardInTime","doGoBackInTime","saveState","doSetDriveProps","gamePadsIn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}