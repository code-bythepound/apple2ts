{"version":3,"file":"static/js/645.ded1250e.chunk.js","mappings":"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","sources":["emulator/utility.ts","emulator/keyboard.ts","emulator/convertdsk2woz.ts","emulator/decodedisk.ts","emulator/diskdata.ts","emulator/assembler.ts","emulator/harddrivedata.ts","emulator/drivestate.ts","emulator/joystick.ts","emulator/softswitches.ts","emulator/memory.ts","emulator/roms/rom_2e.ts","emulator/instructions.ts","emulator/assemblycode.ts","emulator/roms/slot_disk2_cx00.ts","emulator/motherboard.ts","emulator/worker2main.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { KeyboardEvent } from \"react\"\n\nexport enum STATE {\n  IDLE,\n  NEED_BOOT,\n  NEED_RESET,\n  RUNNING,\n  PAUSED,\n}\n\nexport enum COLOR_MODE {\n  COLOR,\n  NOFRINGE,\n  GREEN,\n  AMBER\n}\n\nexport const colorToName = (mode: COLOR_MODE) => {\n  return [\"Color\", \"Color (no fringe)\", \"Green\", \"Amber\"][mode]\n}\n\nexport const nameToColorMode = (name: string) => {\n  switch (name) {\n    case \"Color (no fringe)\": return COLOR_MODE.NOFRINGE\n    case \"Green\": return COLOR_MODE.GREEN\n    case \"Amber\": return COLOR_MODE.AMBER\n    default: return COLOR_MODE.COLOR\n  }\n}\n\nexport enum DRIVE {\n  MOTOR_OFF,\n  MOTOR_ON,\n  TRACK_END,\n  TRACK_SEEK,\n}\n\nexport enum MODE {\n  IMPLIED,  // BRK\n  IMM,      // LDA #$01\n  ZP_REL,   // LDA $C0 or BCC $FF\n  ZP_X,     // LDA $C0,X\n  ZP_Y,     // LDX $C0,Y\n  ABS,      // LDA $1234\n  ABS_X,    // LDA $1234,X\n  ABS_Y,    // LDA $1234,Y\n  IND_X,    // LDA ($FF,X) or JMP ($1234,X)\n  IND_Y,    // LDA ($FF),Y\n  IND       // JMP ($1234) or LDA ($C0)\n}\n\n// A hack to determine if this is a relative instruction.\nexport const isRelativeInstr = (instr: string) => instr.startsWith('B') && instr !== \"BIT\" && instr !== \"BRK\"\n\n// export const toBinary = (value: number, ndigits = 8) => {\n//   return (\"0000000000000000\" + value.toString(2)).slice(-ndigits)\n// }\n\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\n\nexport const toHex = (value: number, ndigits = 2) => {\n  if (value > 0xFF) {\n    ndigits = 4\n  }\n  return (\"0000\" + value.toString(16).toUpperCase()).slice(-ndigits)\n}\n\nconst getPStatusString = (P: number) => {\n  const result = ((P & 0x80) ? 'N' : 'n') +\n    ((P & 0x40) ? 'V' : 'v') +\n    '-' +\n    ((P & 0x10) ? 'B' : 'b') +\n    ((P & 0x8) ? 'D' : 'd') +\n    ((P & 0x4) ? 'I' : 'i') +\n    ((P & 0x2) ? 'Z' : 'z') +\n    ((P & 0x1) ? 'C' : 'c')\n  return result\n}\n\nexport const getProcessorStatus = (s6502: STATE6502) => {\n  return (\n    `A=${toHex(s6502.Accum)} X=${toHex(s6502.XReg)} ` +\n    `Y=${toHex(s6502.YReg)} P=${toHex(s6502.PStatus)} ${getPStatusString(s6502.PStatus)} S=${toHex(s6502.StackPtr)}`\n  )\n}\n\nconst modeString = (mode: MODE) => {\n  let prefix = \"\"\n  let suffix = \"\"\n  switch (mode) {\n    case MODE.IMM:\n      prefix = \"#\"\n      break\n    case MODE.ZP_X:\n    case MODE.ABS_X:\n      suffix = \",X\"\n      break\n    case MODE.ZP_Y:\n    case MODE.ABS_Y:\n      suffix = \",Y\"\n      break\n    case MODE.IND:\n      prefix = \"(\"\n      suffix = \")\"\n      break\n    case MODE.IND_X:\n      prefix = \"(\"\n      suffix = \",X)\"\n      break\n    case MODE.IND_Y:\n      prefix = \"(\"\n      suffix = \"),Y\"\n      break\n  }\n  return [prefix, suffix]\n}\n\nexport const getInstrString = (code: PCodeInstr, vLo: number, vHi: number, PC: number) => {\n  let result = `${toHex(PC,4)}`\n  if (code) {\n    let [prefix, suffix] = modeString(code.mode)\n    if (code.PC >= 2) {\n      prefix = `   ${code.name}   ${prefix}$`\n    }\n    if (isRelativeInstr(code.name)) {\n      // The extra +2 is for the branch instruction itself\n      const addr = PC + 2 + (vLo > 127 ? vLo - 256 : vLo)\n      result += `${prefix}${toHex(addr, 4)}${suffix}`\n    } else {\n      switch (code.PC) {\n        case 1:\n          result += `   ${code.name}`\n          break\n        case 2:\n          result += `${prefix}${toHex(vLo)}${suffix}`\n          break\n        case 3:\n          result += `${prefix}${toHex(address(vLo, vHi),4)}${suffix}`\n          break\n      }\n    }\n  } else {\n    result += \"         ???\"\n  }\n  return result\n}\n\nexport const convertAppleKey = (e: KeyboardEvent, uppercase=false) => {\n  let key = 0\n  if (e.key.length === 1) {\n    if (e.metaKey || e.altKey) {\n      return 0\n    }\n    key = e.key.charCodeAt(0)\n    if (e.ctrlKey) {\n      if (key >= 0x40 && key <= 0x7E) {\n        key &= 0b00011111\n      } else {\n        return 0\n      }\n    } else if (uppercase) {\n      key = e.key.toUpperCase().charCodeAt(0)\n    }\n  } else {\n    const keymap: { [key: string]: number } = {\n      Enter: 13,\n      ArrowRight: 21,\n      ArrowLeft: 8,\n      Backspace: 8,\n      ArrowUp: 11,\n      ArrowDown: 10,\n      Escape: 27,\n      Tab: 9,\n      Shift: -1,\n      Control: -1\n    };\n    if (e.key === \"Backspace\" && e.shiftKey) {\n      key = 0x7F\n    } else if (e.key in keymap) {\n      key = keymap[e.key]\n    }\n  }\n  return key\n};\n\nexport const getPrintableChar = (value: number, isAltCharSet: boolean) => {\n  let v1 = value\n  if (isAltCharSet) {\n    if ((v1 >= 0 && v1 <= 31) || (v1 >= 64 && v1 <= 95)) {\n      v1 += 64\n    } else if (v1 >= 128 && v1 <= 159) {\n      v1 -= 64\n    } else if (v1 >= 160) {\n      v1 -= 128\n    }\n  } else {\n    // Shift Ctrl chars and second ASCII's into correct ASCII range\n    if ((v1 >= 0 && v1 <= 0x1f) || (v1 >= 0x60 && v1 <= 0x9f)) {\n      v1 += 64\n    }\n    v1 &= 0b01111111\n  }\n  return v1\n}\n\nlet zpPrev = new Uint8Array(1)\nexport const debugZeroPage = (zp: Uint8Array) => {\n  if (zpPrev.length === 1) zpPrev = zp\n  let diff = \"\"\n  for (let i = 0; i < 256; i++) {\n    if (zp[i] !== zpPrev[i]) {\n      diff += \" \" + toHex(i) + \":\" + toHex(zpPrev[i]) + \">\" + toHex(zp[i])\n    }\n  }\n  if (diff !== \"\") console.log(diff)\n  zpPrev = zp\n}\n\nexport const toASCII = (s: String) => s.split('').map(char => char.charCodeAt(0))\nexport const uint16toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF]\nexport const uint32toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF,\n  (n >>> 16) & 0xFF, (n >>> 24) & 0xFF]\n\nexport const replaceSuffix = (fname: String, suffix: String) => {\n  const i = fname.lastIndexOf('.') + 1\n  return fname.substring(0, i) + suffix\n}\n\n","import { matchMemory, memGetC000, memSetC000 } from \"./memory\"\nimport { doSaveTimeSlice } from \"./motherboard\"\n\nconst keyPress = (key: number) => {\n  memSetC000(0xC000, key | 0b10000000, 32)\n}\n\nlet keyBuffer = ''\nexport const popKey = () => {\n  if (memGetC000(0xC000) < 128 && keyBuffer !== '') {\n    let key = keyBuffer.charCodeAt(0)\n    keyPress(key)\n    keyBuffer = keyBuffer.slice(1)\n    if (keyBuffer.length === 0) {\n      doSaveTimeSlice()\n    }\n  }\n}\n\nlet prevKey = ''\n\nexport const addToBuffer = (text: string) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  if (text === prevKey && keyBuffer.length > 0) {\n    return\n  }\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\nlet tPrev = 0\n\nexport const addToBufferDebounce = (text: string, timeout: number) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  const t = performance.now()\n  if ((t - tPrev) < timeout) {\n    return\n  }\n  tPrev = t\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\ntype KeyMap = {\n  [key: string]: string;\n};\n\nexport const sendTextToEmulator = (text: string) => {\n  if (text.length === 1) {\n    let mapping: KeyMap = {}\n    const isKarateka = matchMemory(0x6E6C, [0xAD, 0x00, 0xC0])\n    if (isKarateka) {\n      mapping['N'] = '\\x08'\n      mapping['M'] = '\\x15'\n      mapping[','] = '\\x08'\n      mapping['.'] = '\\x15'\n    }\n    const key = (text in mapping) ? mapping[text] : text\n    addToBuffer(key)\n  } else {\n    addToBuffer(text)\n  }\n}\n","// Code converted from the C code library available at:\n// https://github.com/mr-stivo/dsk2woz2\n//\nimport { toASCII, uint16toBytes, uint32toBytes } from \"./utility\"\n\n/**\n  Appends a byte to a woz at a supplied position: number, returning the\n  position immediately after the byte.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to write.\n  @returns The position immediately after the byte.\n*/\nconst write_byte = (woz: Uint8Array, position: number, value: number) => {\n  const shift = position & 7\n  const byte_position = position >>> 3\n  woz[byte_position] |= value >>> shift\n  if (shift) woz[byte_position+1] |= value << (8 - shift)\n  return position + 8;\n}\n\n/**\n  Encodes a byte into Apple 4-and-4 format and appends it to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to encode and write.\n  @returns The position immediately after the encoded byte.\n*/\nconst write_4_and_4 = (woz: Uint8Array, position: number, value: number) => {\n  position = write_byte(woz, position, (value >>> 1) | 0xAA);\n  position = write_byte(woz, position, value | 0xAA);\n  return position;\n}\n\n/**\n  Appends a 6-and-2-style 10-bit sync word to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @returns The position immediately after the sync word.\n*/\nconst write_sync = (woz: Uint8Array, position: number) => {\n  position = write_byte(woz, position, 0xFF);\n  // Skip two bits, i.e. leave them as 0s\n  return position + 2\n}\n\n/*!\n  Converts a 256-byte source woz into the 343 byte values that\n  contain the Apple 6-and-2 encoding of that woz.\n  @param dest The at-least-343 byte woz to which the encoded sector is written.\n  @param src The 256-byte source data.\n*/\nconst encode_6_and_2 = (src: Uint8Array) => {\n  const six_and_two_mapping = [\n    0x96, 0x97, 0x9A, 0x9B, 0x9D, 0x9E, 0x9F, 0xA6,\n    0xA7, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB2, 0xB3,\n    0xB4, 0xB5, 0xB6, 0xB7, 0xB9, 0xBA, 0xBB, 0xBC,\n    0xBD, 0xBE, 0xBF, 0xCB, 0xCD, 0xCE, 0xCF, 0xD3,\n    0xD6, 0xD7, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,\n    0xDF, 0xE5, 0xE6, 0xE7, 0xE9, 0xEA, 0xEB, 0xEC,\n    0xED, 0xEE, 0xEF, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,\n    0xF7, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n  ];\n\n  const dest = new Uint8Array(343)\n\n  // Fill in byte values: the first 86 bytes contain shuffled\n  // and combined copies of the bottom two bits of the sector\n  // contents; the 256 bytes afterwards are the remaining\n  // six bits.\n  const bit_reverse = [0, 2, 1, 3];\n  for (let c = 0; c < 84; c++) {\n    dest[c] =\n      bit_reverse[src[c] & 3] |\n      (bit_reverse[src[c + 86] & 3] << 2) |\n      (bit_reverse[src[c + 172] & 3] << 4);\n  }\n  dest[84] =\n    (bit_reverse[src[84] & 3] << 0) |\n    (bit_reverse[src[170] & 3] << 2);\n  dest[85] =\n      (bit_reverse[src[85] & 3] << 0) |\n      (bit_reverse[src[171] & 3] << 2);\n\n  for (let c = 0; c < 256; c++) {\n    dest[86 + c] = src[c] >>> 2;\n  }\n\n  // Exclusive OR each byte with the one before it.\n  dest[342] = dest[341];\n  let location = 342;\n  while(location > 1) {\n    location--;\n    dest[location] ^= dest[location - 1];\n  }\n\n  // Map six-bit values up to full bytes.\n  for (let c = 0; c < 343; c++) {\n    dest[c] = six_and_two_mapping[dest[c]];\n  }\n  return dest\n}\n\n/*!\n  Converts a DSK-style track to a WOZ-style track.\n  @param dest The 6646-byte woz that will contain the WOZ track. Both track contents and the\n      proper suffix will be written.\n  @param src The 4096-byte woz that contains the DSK track — 16 instances of 256 bytes, each\n      a fully-decoded sector.\n  @param track_number The track number to encode into this track.\n  @param is_prodos @c true if the DSK image is in Pro-DOS order; @c false if it is in DOS 3.3 order.\n*/\nconst serialise_track = (src: Uint8Array, track_number: number, is_prodos: boolean) => {\n  let track_position = 0;    // This is the track position **in bits**.\n  const dest = new Uint8Array(6646).fill(0)\n\n  // Write gap 1.\n  for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n  }\n\n  // Step through the sectors in physical order.\n  for (let sector = 0; sector < 16; sector++) {\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0x96);\n    // Volume, track, setor and checksum, all in 4-and-4 format.\n    track_position = write_4_and_4(dest, track_position, 254);\n    track_position = write_4_and_4(dest, track_position, track_number);\n    track_position = write_4_and_4(dest, track_position, sector);\n    track_position = write_4_and_4(dest, track_position, 254 ^ track_number ^ sector);\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 2.\n    for (let c = 0; c < 7; c++) {\n        track_position = write_sync(dest, track_position);\n    }\n\n    // Write the sector body.\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xAD);\n\n    // Map from this physical sector to a logical sector.\n    const ls = (sector === 15) ? 15 : ((sector * (is_prodos ? 8 : 7)) % 15);\n\n    // Sector contents.\n    const contents = encode_6_and_2(src.slice(ls * 256, ls * 256 + 256));\n    for (let c = 0; c < contents.length; c++) {\n      track_position = write_byte(dest, track_position, contents[c]);            \n    }\n\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 3.\n    for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n    }\n  }\n  return dest\n}\n\nexport const convertdsk2woz = (dskData: Uint8Array, isPO: boolean) => {\n  if (dskData.length !== 35 * 16 * 256) {\n    return new Uint8Array()\n  }\n  const woz = new Uint8Array(512*3 + 512*35*13).fill(0)\n  woz.set(toASCII(\"WOZ2\\xFF\\n\\r\\n\"), 0)\n  woz.set(toASCII(\"INFO\"), 12)\n  woz[16] = 60    // Chunk size\n  woz[20] = 2     // INFO version: 2\n  woz[21] = 1     // Disk type: 5.25\"\n  woz[22] = 0     // Write protection: disabled\n  woz[23] = 0     // Cross-track synchronised image: no\n  woz[24] = 1     // MC3470 fake bits have been removed: yes\n  woz.fill(32, 25, 57)\n  woz.set(toASCII(\"Apple2TS (CT6502)\"), 25)\n  woz[57] = 1     // Disk sides: 1\n  woz[58] = 0     // Boot sector format: 0 (unknown)\n  woz[59] = 32    // Optimal bit timing: 32 (4us)\n  woz[60] = 0     // Compatible hardware: 0 (unknown)\n  woz[62] = 0     // Required RAM: 0 (unknown)\n  woz[64] = 13    // Largest track blocks (512 bytes): 13 (default track size)\n  woz.set(toASCII(\"TMAP\"), 80)\n  woz[84] = 160    // Chunk size\n  woz.fill(0xFF, 88, 88 + 160)  // Fill the TMAP with empty tracks\n  // Now fill in the quarter tracks around each whole track\n  let offset = 0;\n  for (let c = 0; c < 35; c++) {\n    offset = 88 + (c << 2)\n    if (c > 0) woz[offset - 1] = c\n    woz[offset] = woz[offset + 1] = c\n  }\n  woz.set(toASCII(\"TRKS\"), 248)\n  woz.set(uint32toBytes(1280 + 35*13*512), 252)\n  for (let c = 0; c < 35; c++) {\n    offset = 256 + (c << 3);\n    woz.set(uint16toBytes(3 + c*13), offset)  // start block\n    woz[offset + 2] = 13   // block count\n    woz.set(uint32toBytes(50304), offset + 4)  // start block\n    const trackInput = dskData.slice(c * 16 * 256, (c + 1) * 16 * 256)\n    const trackData = serialise_track(trackInput, c, isPO)\n    offset = 512 * (3 + 13 * c)\n    woz.set(trackData, offset)\n  }\n  return woz\n}\n","import { convertdsk2woz } from \"./convertdsk2woz\"\nimport { replaceSuffix } from \"./utility\";\n\nlet crcTable = new Uint32Array(256).fill(0)\n\nconst makeCRCTable = () => {\n  let c;\n  for (let n =0; n < 256; n++) {\n    c = n;\n    for (let k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    crcTable[n] = c;\n  }\n}\n\nexport const crc32 = (data: Uint8Array, offset = 0) => {\n  if (crcTable[255] === 0) {\n    makeCRCTable()\n  }\n  let crc = 0 ^ (-1);\n  for (let i = offset; i < data.length; i++) {\n    crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)) >>> 0;\n};\n\nconst decodeWoz2 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz2 = [0x57, 0x4F, 0x5A, 0x32, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz2 = woz2.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz2) return false\n  driveState.isWriteProtected = diskData[22] === 1\n  const crc = diskData.slice(8, 12)\n  const storedCRC = crc[0] + (crc[1] << 8) + (crc[2] << 16) + crc[3] * (2 ** 24)\n  const actualCRC = crc32(diskData, 12)\n  if (storedCRC !== 0 && storedCRC !== actualCRC) {\n    alert(\"CRC checksum error: \" + driveState.filename)\n    return false\n  }\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      const tmap_offset = 256 + 8 * tmap_index\n      const trk = diskData.slice(tmap_offset, tmap_offset + 8)\n      driveState.trackStart[htrack] = 512*(trk[0] + (trk[1] << 8))\n      // const nBlocks = trk[2] + (trk[3] << 8)\n      driveState.trackNbits[htrack] = trk[4] + (trk[5] << 8) + (trk[6] << 16) + trk[7] * (2 ** 24)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz2 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst decodeWoz1 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz1 = [0x57, 0x4F, 0x5A, 0x31, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz1 = woz1.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz1) {\n    return false\n  }\n  driveState.isWriteProtected = diskData[22] === 1\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      driveState.trackStart[htrack] = 256 + tmap_index * 6656\n      const trk = diskData.slice(driveState.trackStart[htrack] + 6646,\n        driveState.trackStart[htrack] + 6656)\n      driveState.trackNbits[htrack] = trk[2] + (trk[3] << 8)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz1 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst isDSK = (filename: String) => {\n  const f = filename.toLowerCase()\n  const isDSK = f.endsWith(\".dsk\") || f.endsWith(\".do\")\n  const isPO = f.endsWith(\".po\")\n  return isDSK || isPO\n}\n\nconst decodeDSK = (driveState: DriveState, diskData: Uint8Array) => {\n  let f = driveState.filename.toLowerCase()\n  const isPO = f.endsWith(\".po\")\n  const newData = convertdsk2woz(diskData, isPO)\n  if (newData.length === 0) {\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'woz')\n  driveState.diskHasChanges = true\n  return newData\n}\n\nconst int32 = (data: Uint8Array) => {\n  return data[0] + 256 * (data[1] + 256 * (data[2] + 256 * data[3]))\n}\n\nconst decode2MG = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n//    const nblocks = int32(diskData.slice(0x14, 0x18))\n  const offset = int32(diskData.slice(0x18, 0x1c))\n  const nbytes = int32(diskData.slice(0x1c, 0x20))\n  let magic = ''\n  for (let i = 0; i < 4; i++) magic += String.fromCharCode(diskData[i]) \n  if (magic !== '2IMG') {\n    console.error(\"Corrupt 2MG file.\")\n    return new Uint8Array()\n  }\n  if (diskData[12] !== 1) {\n    console.error(\"Only ProDOS 2MG files are supported.\")\n    return new Uint8Array()\n  }\n  driveState.filename = replaceSuffix(driveState.filename, 'hdv')\n  driveState.diskHasChanges = true\n  return diskData.slice(offset, offset + nbytes)\n}\n\nexport const isHardDriveImage = (filename: string) => {\n  const f = filename.toLowerCase()\n  return f.endsWith('.hdv') || f.endsWith('.po') || f.endsWith('.2mg')\n}\n\nexport const decodeDiskData = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n  driveState.diskHasChanges = false\n  const fname = driveState.filename.toLowerCase()\n  if (isHardDriveImage(fname)) {\n    driveState.hardDrive = true\n    driveState.status = ''\n    if (fname.endsWith('.hdv') || fname.endsWith('.po')) {\n      return diskData\n    }\n    if (fname.endsWith('.2mg')) {\n      return decode2MG(driveState, diskData)\n    }\n  }\n  if (isDSK(driveState.filename)) {\n    diskData = decodeDSK(driveState, diskData)\n  }\n  if (decodeWoz2(driveState, diskData)) {\n    return diskData\n  }\n  if (decodeWoz1(driveState, diskData)) {\n    return diskData\n  }\n  if (fname !== '') {\n    console.error(\"Unknown disk format.\")\n  }\n  return new Uint8Array()\n}\n","import { passDriveSound } from \"./worker2main\"\nimport { SWITCHES } from \"./softswitches\"\nimport { cycleCount } from './instructions'\nimport { toHex, DRIVE } from \"./utility\"\nimport { getCurrentDriveData, getCurrentDriveState, passData, setCurrentDrive } from \"./drivestate\"\n\nlet motorOffTimeout: any = 0\n\nexport const doResetDiskDrive = (driveState: DriveState) => {\n  SWITCHES.DRIVE.isSet = false\n  doMotorTimeout(driveState)\n  driveState.halftrack = 68\n  driveState.prevHalfTrack = 68\n}\n\nexport const doPauseDiskDrive = (resume = false) => {\n  if (resume) {\n    const ds = getCurrentDriveState()\n    if (ds.motorRunning) {\n      startMotor(ds)\n    }\n  } else {\n    passDriveSound(DRIVE.MOTOR_OFF)\n  }\n}\n\nconst moveHead = (ds: DriveState, offset: number) => {\n  if (ds.trackStart[ds.halftrack] > 0) {\n    ds.prevHalfTrack = ds.halftrack\n  }\n  ds.halftrack += offset\n  if (ds.halftrack < 0 || ds.halftrack > 68) {\n    passDriveSound(DRIVE.TRACK_END)\n    ds.halftrack = (ds.halftrack < 0) ? 0 : (ds.halftrack > 68 ? 68 : ds.halftrack)\n  } else {\n    passDriveSound(DRIVE.TRACK_SEEK)\n  }\n  ds.status = ` Track ${ds.halftrack / 2}`\n  passData()\n  // Adjust new track location based on arm position relative to old track loc.\n  if (ds.trackStart[ds.halftrack] > 0 && ds.prevHalfTrack !== ds.halftrack) {\n    // const oldloc = dState.trackLocation\n    ds.trackLocation = Math.floor(ds.trackLocation * (ds.trackNbits[ds.halftrack] / ds.trackNbits[ds.prevHalfTrack]))\n    if (ds.trackLocation > 3) {\n      ds.trackLocation -= 4\n    }\n  }\n}\n\nconst pickbit = [128, 64, 32, 16, 8, 4, 2, 1]\nconst clearbit = [0b01111111, 0b10111111, 0b11011111, 0b11101111,\n  0b11110111, 0b11111011, 0b11111101, 0b11111110]\n\nconst getNextBit = (ds: DriveState, dd: Uint8Array) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  let bit: number\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    const byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    bit = (byte & pickbit[b]) >> (7 - b)\n  } else {\n    // TODO: Freak out like a MC3470 and return random bits\n    bit = 1\n  }\n  ds.trackLocation++\n  return bit\n}\n\nlet dataRegister = 0\n\nconst getNextByte = (ds: DriveState, dd: Uint8Array) => {\n  if (dd.length === 0) return 0\n  let result = 0\n  if (dataRegister === 0) {\n    while (getNextBit(ds, dd) === 0) {}\n    // This will become the high bit on the next read\n    dataRegister = 0x40\n    // Read the next 6 bits, all except the last one.\n    for (let i = 5; i >= 0; i--) {\n      dataRegister |= getNextBit(ds, dd) << i\n    }\n  } else {\n    // Read the last bit.\n    const bit = getNextBit(ds, dd)\n    dataRegister = (dataRegister << 1) | bit\n  }\n  result = dataRegister\n  if (dataRegister > 127) {\n    dataRegister = 0\n  }\n  return result\n}\n\nlet prevCycleCount = 0\n\nconst doWriteBit = (ds: DriveState, dd: Uint8Array, bit: 0 | 1) => {\n  ds.trackLocation = ds.trackLocation % ds.trackNbits[ds.halftrack]\n  // TODO: What about writing to empty tracks?\n  if (ds.trackStart[ds.halftrack] > 0) {\n    const fileOffset = ds.trackStart[ds.halftrack] + (ds.trackLocation >> 3)\n    let byte = dd[fileOffset]\n    const b = ds.trackLocation & 7\n    if (bit) {\n      byte |= pickbit[b]\n    } else {\n      byte &= clearbit[b]\n    }\n    dd[fileOffset] = byte\n  }\n  ds.trackLocation++\n}\n\nconst doWriteByte = (ds: DriveState, dd: Uint8Array, delta: number) => {\n  // Sanity check to make sure we aren't on an empty track. Is this correct?\n  if (dd.length === 0 || ds.trackStart[ds.halftrack] === 0) {\n    return\n  }\n  if (dataRegister > 0) {\n    if (delta >= 16) {\n      for (let i = 7; i >= 0; i--) {\n        doWriteBit(ds, dd, dataRegister & 2**i ? 1 : 0)      \n      }\n    }\n    if (delta >= 36) {\n      doWriteBit(ds, dd, 0)\n    }\n    if (delta >= 40) {\n      doWriteBit(ds, dd, 0)\n    }\n    debugCache.push(delta >= 40 ? 2 : delta >= 36 ? 1 : dataRegister)\n    ds.diskHasChanges = true\n    dataRegister = 0\n  }\n}\n\nconst doMotorTimeout = (ds: DriveState) => {\n  motorOffTimeout = 0\n  if (!SWITCHES.DRIVE.isSet) {\n    ds.motorRunning = false\n  }\n  passData()\n  passDriveSound(DRIVE.MOTOR_OFF)\n}\n\nconst startMotor = (ds: DriveState) => {\n  if (motorOffTimeout) {\n    clearTimeout(motorOffTimeout)\n    motorOffTimeout = 0\n  }\n  ds.motorRunning = true\n  passData()\n  passDriveSound(DRIVE.MOTOR_ON)\n}\n\nconst stopMotor = (ds: DriveState) => {\n  if (motorOffTimeout === 0) {\n    motorOffTimeout = setTimeout(() => doMotorTimeout(ds), 1000);\n  }\n}\n\nlet debugCache:number[] = []\nconst doDebugDrive = false\n\nconst dumpData = (ds: DriveState, addr: number) => {\n  // if (dataRegister !== 0) {\n  //   console.error(`addr=${toHex(addr)} writeByte= ${dataRegister}`)\n  // }\n  if (debugCache.length > 0 && ds.halftrack === 2 * 0x00) {\n    if (doDebugDrive) {\n      let output = `TRACK ${toHex(ds.halftrack/2)}: `\n      let out = ''\n      debugCache.forEach(element => {\n        switch (element) {\n          case 1: out = 'Ff'; break;\n          case 2: out = 'FF'; break;\n          default: out = element.toString(16); break;\n        }\n        output += out + ' '\n      });\n      console.log(output)\n    }\n    debugCache = []\n  }\n}\n\nexport const handleDriveSoftSwitches =\n  (addr: number, value: number): number => {\n  let ds = getCurrentDriveState()\n  let dd = getCurrentDriveData()\n  let result = 0\n  if (ds.hardDrive) return result\n  const delta = cycleCount - prevCycleCount\n  // if (doDebugDrive && value !== 0x96) {\n  //   const dc = (delta < 100) ? `  deltaCycles=${delta}` : ''\n  //   const wb = (dataRegister > 0) ? `  writeByte=$${toHex(dataRegister)}` : ''\n  //   const v = (value > 0) ? `  value=$${toHex(value)}` : ''\n  //   console.log(`write ${ds.writeMode}  addr=$${toHex(addr)}${dc}${wb}${v}`)\n  // }\n  if (addr === SWITCHES.DRVDATA.offAddr) {  // $C08C SHIFT/READ\n    if (ds.motorRunning && !ds.writeMode) {\n      return getNextByte(ds, dd)\n    }\n  }\n  if (addr === SWITCHES.DRIVE.onAddr) {  // $C089\n    startMotor(ds)\n    dumpData(ds, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRIVE.offAddr) {  // $C088\n    stopMotor(ds)\n    dumpData(ds, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRVSEL.offAddr || addr === SWITCHES.DRVSEL.onAddr) {\n    const currentDrive = (addr === SWITCHES.DRVSEL.offAddr) ? 1 : 2\n    const dsOld = getCurrentDriveState()\n    setCurrentDrive(currentDrive)\n    ds = getCurrentDriveState()\n    if (ds !== dsOld && dsOld.motorRunning) {\n      dsOld.motorRunning = false\n      ds.motorRunning = true\n      passData()\n    }\n    return result\n  }\n  const ps = [SWITCHES.DRVSM0, SWITCHES.DRVSM1,\n    SWITCHES.DRVSM2, SWITCHES.DRVSM3]\n  const a = addr - SWITCHES.DRVSM0.offAddr\n  // One of the stepper motors has been turned on or off\n  if (a >= 0 && a <= 7) {\n    const ascend = ps[(ds.currentPhase + 1) % 4]\n    const descend = ps[(ds.currentPhase + 3) % 4]\n    // Make sure our current phase motor has been turned off.\n    if (!ps[ds.currentPhase].isSet) {\n      if (ds.motorRunning && ascend.isSet) {\n        moveHead(ds, 1)\n        ds.currentPhase = (ds.currentPhase + 1) % 4\n\n      } else if (ds.motorRunning && descend.isSet) {\n        moveHead(ds, -1)\n        ds.currentPhase = (ds.currentPhase + 3) % 4\n      }\n    }\n    // if (doDebugDrive) {\n    //   const phases = `${ps[0].isSet ? 1 : 0}${ps[1].isSet ? 1 : 0}` +\n    //     `${ps[2].isSet ? 1 : 0}${ps[3].isSet ? 1 : 0}`\n    //   console.log(`***** PC=${toHex(s6502.PC,4)}  addr=${toHex(addr,4)} ` +\n    //     `phase ${a >> 1} ${a % 2 === 0 ? \"off\" : \"on \"}  ${phases}  ` +\n    //     `track=${dState.halftrack / 2}`)\n    // }\n    dumpData(ds, addr)\n  } else if (addr === SWITCHES.DRVWRITE.offAddr) {  // $C08E READ\n    if (ds.motorRunning && ds.writeMode) {\n      doWriteByte(ds, dd, delta)\n      // Reset the Disk II Logic State Sequencer clock\n      prevCycleCount = cycleCount\n    }\n    ds.writeMode = false\n    if (SWITCHES.DRVDATA.isSet) {\n      result = ds.isWriteProtected ? 0xFF : 0\n    }\n    dumpData(ds, addr)\n  } else if (addr === SWITCHES.DRVWRITE.onAddr) {  // $C08F WRITE\n    ds.writeMode = true\n    // Reset the Disk II Logic State Sequencer clock\n    prevCycleCount = cycleCount\n    if (value >= 0) {\n      dataRegister = value\n    }\n  } else if (addr === SWITCHES.DRVDATA.onAddr) {  // $C08D LOAD/READ\n    if (ds.motorRunning) {\n      if (ds.writeMode) {\n        doWriteByte(ds, dd, delta)\n        // Reset the Disk II Logic State Sequencer clock\n        prevCycleCount = cycleCount\n      }\n      if (value >= 0) {\n        dataRegister = value\n      }\n    }\n  }\n\n  return result\n}\n","import { pcodes } from \"./instructions\";\nimport { toHex, isRelativeInstr, MODE } from \"./utility\";\n\nconst doOutput = false\n\ntype CodeLine = {\n  label: string,\n  instr: string,\n  operand: string,\n}\n\ntype LabelOperand = {\n  label: string,\n  operation: string,\n  value: number\n}\n\nconst parseNumberOptionalAddressMode = (operand: string): [MODE, number] => {\n  let mode: MODE = MODE.IMPLIED;\n  let value = -1\n\n  if (operand.length > 0) {\n    if (operand.startsWith('#')) {\n      mode = MODE.IMM\n      operand = operand.substring(1)\n    } else if (operand.startsWith('(')) {\n      if (operand.endsWith(\",Y\")) {\n        mode = MODE.IND_Y\n      } else if (operand.endsWith(\",X)\")) {\n        mode = MODE.IND_X\n      } else {\n        mode = MODE.IND\n      }\n      operand = operand.substring(1)\n    } else if (operand.endsWith(\",X\")) {\n      mode = (operand.length > 5) ? MODE.ABS_X : MODE.ZP_X\n    } else if (operand.endsWith(\",Y\")) {\n      mode = (operand.length > 5) ? MODE.ABS_Y : MODE.ZP_Y\n    } else {\n      mode = (operand.length > 3) ? MODE.ABS : MODE.ZP_REL\n    }\n\n    if (operand.startsWith('$')) {\n      operand = \"0x\" + operand.substring(1)\n    }\n    value = parseInt(operand)\n  }\n\n  return [mode, value]\n}\n\n\nlet labels: { [key: string]: number } = {};\n\nconst splitOperand = (operand: string) => {\n  const s = operand.split(/([+-])/)\n  const codeLine: LabelOperand = {\n    label: s[0] ? s[0] : '',\n    operation: s[1] ? s[1] : '',\n    value: s[2] ? parseInt(s[2].replace('#','').replace('$','0x')) : 0\n  }\n  return codeLine\n}\n\nconst getOperandModeValue =\n  (pc: number, instr: string, operand: string, pass: 1 | 2): [MODE, number] => {\n    let mode = MODE.IMPLIED\n    let value = -1\n    if (operand.match(/^[#]?[$0-9()]+/)) {\n      return parseNumberOptionalAddressMode(operand)\n    }\n    const labelOperand = splitOperand(operand)\n    if (labelOperand.label) {\n      // See if we have an immediate value, like #CONST\n      const isImmediate = labelOperand.label.startsWith('#')\n      if (isImmediate) {\n        labelOperand.label = labelOperand.label.substring(1)\n      }\n      if (labelOperand.label in labels) {\n        value = labels[labelOperand.label]\n      } else if (pass === 2) {\n          throw new Error(\"Missing label: \" + labelOperand.label);\n      }\n      if (labelOperand.operation && labelOperand.value) {\n        switch (labelOperand.operation) {\n          case '+': value += labelOperand.value\n            break;\n          case '-': value -= labelOperand.value\n            break;\n          default:\n            throw new Error(\"Unknown operation in operand: \" + operand);\n        }\n        value = (value % 65536 + 65536) % 65536\n      }\n      if (isRelativeInstr(instr)) {\n        mode = MODE.ZP_REL\n        value = (value - pc + 254)\n        if (value > 255) value -= 256\n      } else {\n        if (isImmediate) {\n          mode = MODE.IMM\n        } else {\n          mode = (value <= 255) ? MODE.ZP_REL : MODE.ABS\n        }\n      }\n    }\n    return [mode, value]\n}\n\nconst splitLine = (line: string, prevLabel: string) => {\n  line = line.replace(/\\s+/g, ' ')\n  const s = line.split(' ')\n  const codeLine: CodeLine = {\n    label: s[0] ? s[0] : prevLabel,\n    instr: s[1] ? s[1] : '',\n    operand: s[2] ? s[2] : ''\n  }\n  return codeLine\n}\n\nconst handleLabel = (parts: CodeLine, pc: number) => {\n  if (parts.label in labels) {\n    throw new Error(\"Redefined label: \" + parts.label)\n  }\n  if (parts.instr === 'EQU') {\n    const [mode, value] = parseNumberOptionalAddressMode(parts.operand)\n    if (mode !== MODE.ABS && mode !== MODE.ZP_REL) {\n      throw new Error(\"Illegal EQU value: \" + parts.operand)\n    }\n    labels[parts.label] = value\n  } else {\n    labels[parts.label] = pc\n  }\n}\n\nconst getHexCodesForInstruction = (match: number, value: number) => {\n  let newInstructions: Array<number> = [];\n  const pcode = pcodes[match]\n  newInstructions.push(match);\n  if (value >= 0) {\n    newInstructions.push(value % 256)\n    if (pcode.PC === 3) {\n      newInstructions.push(Math.trunc(value / 256))\n    }\n  }\n  return newInstructions\n}\n\nconst parseOnce = (start: number, code: Array<string>, pass: 1 | 2): Array<number> => {\n  let pc = start\n  let instructions: Array<number> = [];\n  let prevLabel = ''\n  code.forEach(line => {\n    line = (line.split(';'))[0].trimEnd().toUpperCase()\n    if (!line) return\n    let output = (line + '                   ').slice(0, 30) + toHex(pc, 4) + \"- \"\n\n    const codeLine = splitLine(line, prevLabel)\n    prevLabel = ''\n\n    // Just a label by itself, just tack onto the beginning of next line.\n    if (!codeLine.instr) {\n      prevLabel = codeLine.label\n      return\n    }\n\n    if (codeLine.instr === 'ORG') {\n      if (doOutput && pass === 2) console.log(output)\n      return\n    }\n\n    if (pass === 1 && codeLine.label) {\n      handleLabel(codeLine, pc)\n    }\n\n    if (codeLine.instr === 'EQU') {\n      return\n    }\n\n    const [mode, value] = getOperandModeValue(pc, codeLine.instr, codeLine.operand, pass)\n\n    if (isRelativeInstr(codeLine.instr) && (value < 0 || value > 255)) {\n      throw new Error(`Branch instruction out of range: ${line} value: ${value}`);\n    }\n\n    const match = pcodes.findIndex(pc => pc && pc.name === codeLine.instr && pc.mode === mode)\n    if (match < 0) {\n      throw new Error(\"Unknown instruction: \" + line);\n    }\n    const newInstructions = getHexCodesForInstruction(match, value)\n    pc += pcodes[match].PC\n\n    if (doOutput && pass === 2) {\n      newInstructions.forEach(i => {output += ` ${toHex(i)}`});\n      console.log(output)\n    }\n    instructions.push(...newInstructions)\n  });\n\n  return instructions\n}\n\nexport const parseAssembly = (start: number, code: Array<string>): Array<number> => {\n  labels = {}\n  try {\n    parseOnce(start, code, 1)\n    const instructions = parseOnce(start, code, 2)\n    return instructions\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\n","import { parseAssembly } from \"./assembler\"\nimport { setX, setY, setCarry, s6502 } from \"./instructions\"\nimport { setSlotDriver, memGet, getDataBlock, setDataBlock, memSet } from \"./memory\"\nimport { getHardDriveData, getHardDriveState, passData } from \"./drivestate\"\nimport { toHex } from \"./utility\"\n\nlet timerID: any | number = 0\n\n// $Cx00 + driverAddr = address for our hard drive driver\n// SmartPort driver is this address + 3\nconst driverAddr = 0xC0\n\nconst code1 = `\n         LDX   #$20    ; Apple IIe looks for magic bytes $20, $00, $03.\n         LDA   #$00    ; These indicate a disk drive or SmartPort device.\n         LDX   #$03\n         LDA   #$00    ; $3C=disk drive, $00=SmartPort\n         BIT   $CFFF   ; Trigger all peripheral cards to turn off expansion ROMs\n         LDA   #$01    ; ProDOS command code = READ\n         STA   $42     ; Store ProDOS command code\n         LDA   #$4C    ; JMP\n         STA   $07FD\n         LDA   #$${toHex(driverAddr)}   ; jump address\n         STA   $07FE\n         LDA   #$60    ; Fake RTS to determine our slot\n         STA   $07FF\n         JSR   $07FF\n         TSX\n         LDA   $100,X  ; High byte of slot adddress\n         STA   $07FF   ; Store this for the high byte of our JMP command\n         ASL           ; Shift $Cs up to $s0 (e.g. $C7 -> $70)\n         ASL           ; We need this for the ProDOS unit number (below).\n         ASL           ; Format = bits DSSS0000\n         ASL           ; D = drive number (0), SSS = slot number (1-7)\n         STA   $43     ; Store ProDOS unit number here\n         LDA   #$08    ; Store block (512 bytes) at address $0800\n         STA   $45     ; Address high byte\n         LDA   #$00\n         STA   $44     ; Address low byte\n         STA   $46     ; Block 0 low byte\n         STA   $47     ; Block 0 high byte\n         JSR   $07FD   ; Read the block (will JMP to our driver and trigger it)\n         BCS   ERROR\n         LDA   #$0A    ; Store block (512 bytes) at address $0A00\n         STA   $45     ; Address high byte\n         LDA   #$01\n         STA   $46     ; Block 1 low byte\n         JSR   $07FD   ; Read\n         BCS   ERROR\n         LDA   $0801   ; Should be nonzero\n         BEQ   ERROR\n         LDA   #$01    ; Should always be 1\n         CMP   $0800\n         BNE   ERROR\n         LDX   $43     ; ProDOS block 0 code wants ProDOS unit number in X\n         JMP   $801    ; Continue reading the disk\nERROR    JMP   $E000   ; Out to BASIC on error\n`\nconst code2 = `\n         NOP           ; Hard drive driver address\n         BRA   DONE\n         TSX           ; SmartPort driver address\n         INX\n         INC   $100,X\n         INC   $100,X\n         INC   $100,X\nDONE     BCS   ERR\n         LDA   #$00\n         RTS\nERR      LDA   #$27\n         RTS\n`\n\nconst prodos8driver = () => {\n  const driver = new Uint8Array(256).fill(0)\n  const pcode1 = parseAssembly(0x0, code1.split(\"\\n\"))\n  driver.set(pcode1, 0)\n  const pcode2 = parseAssembly(0x0, code2.split(\"\\n\"))\n  driver.set(pcode2, driverAddr)\n  driver[0xFE] = 0b00010011  // flags = ???\n  driver[0xFF] = driverAddr\n  return driver\n}\n\nlet code = new Uint8Array()\n\nexport const enableHardDrive = (enable = true) => {\n  const slot = 7\n  if (code.length === 0) {\n    code = prodos8driver()\n  }\n  code[1] = enable ? 0x20 : 0x00\n  const addr = 0xC000 + driverAddr + slot * 0x100\n  setSlotDriver(slot, code, addr, processHardDriveBlockAccess)\n  setSlotDriver(slot, code, addr + 3, processSmartPortAccess)\n}\n\nconst processSmartPortAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const S = 0x100 + s6502.StackPtr\n  const callAddr = memGet(S + 1) + 256 * memGet(S + 2)\n  const spCommand = memGet(callAddr + 1)\n  const spParamList = memGet(callAddr + 2) + 256 * memGet(callAddr + 3)\n  // These parameters are needed for status (0), read (1), and write (2)\n  const unitNumber = memGet(spParamList + 1)\n  const bufferAddr = memGet(spParamList + 2) + 256 * memGet(spParamList + 3)\n\n  switch (spCommand) {\n    case 0:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const statusCode = memGet(spParamList + 4)\n      switch (statusCode) {\n        case 0:\n          if (unitNumber === 0) {\n            // Store number of SmartPort devices in the status buffer.\n            memSet(bufferAddr, 1)\n            setCarry(false)\n          } else {\n            console.error(`SmartPort status for unitNumber ${unitNumber} not implemented`)\n            setCarry()\n          }\n          break\n        default:\n          console.error(`SmartPort statusCode ${statusCode} not implemented`)\n          setCarry()\n          break\n      }\n      return\n    case 1:\n      if (memGet(spParamList) !== 0x03) {\n        console.error(`Incorrect SmartPort parameter count at address ${spParamList}`)\n        setCarry()\n        return\n      }\n      const block = memGet(spParamList + 4) + 256 * memGet(spParamList + 5) +\n        65536 * memGet(spParamList + 6)\n      const blockStart = 512 * block\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setDataBlock(bufferAddr, dataRead)\n      break\n    case 2:\n      break\n    default:\n      console.error(`SmartPort command ${spCommand} not implemented`)\n      setCarry()\n      return\n  }\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}\n\nexport const processHardDriveBlockAccess = () => {\n  const ds = getHardDriveState()\n  if (!ds.hardDrive) return\n  const dd = getHardDriveData()\n  const block = memGet(0x46) + 256 * memGet(0x47)\n  const blockStart = 512 * block\n  let bufferAddr = memGet(0x44) + 256 * memGet(0x45)\n  const dataLen = dd.length\n  ds.status = ` ${toHex(block, 4)} ${toHex(bufferAddr, 4)}`\n//  console.log(`cmd=${memGet(0x42)} ${ds.status}`)\n\n  switch (memGet(0x42)) {\n    case 0:\n      // Status test: 300: A2 AB A0 CD 8D 06 C0 A9 00 85 42 A9 70 85 43 20 EA C7 00\n      if (ds.filename.length === 0 || dataLen === 0) {\n        setX(0)\n        setY(0)\n        setCarry()\n        return\n      }\n      const nblocks = dataLen / 512\n      setX(nblocks & 0xFF)\n      setY(nblocks >>> 8)\n      break\n    case 1:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataRead = dd.slice(blockStart, blockStart + 512)\n      setDataBlock(bufferAddr, dataRead)\n      break;\n    case 2:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataWrite = getDataBlock(bufferAddr)\n      dd.set(dataWrite, blockStart)\n      ds.diskHasChanges = true\n      break\n    case 3:\n      console.error(\"Hard drive format not implemented yet\")\n      setCarry()\n      return\n    default:\n      console.error(\"unknown hard drive command\")\n      setCarry()\n      return\n  }\n\n  setCarry(false)\n  ds.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      if (ds) ds.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}","import { Buffer } from \"buffer\"\nimport { passDriveProps } from \"./worker2main\"\nimport { decodeDiskData, isHardDriveImage } from \"./decodedisk\"\nimport { doPauseDiskDrive, doResetDiskDrive } from \"./diskdata\"\nimport { enableHardDrive } from \"./harddrivedata\"\n\nconst initDriveState = (drive: number): DriveState => {\n  return {\n    hardDrive: drive === 0,\n    status: \"\",\n    filename: \"\",\n    diskHasChanges: false,\n    motorRunning: false,\n    isWriteProtected: false,\n    halftrack: 0,\n    prevHalfTrack: 0,\n    writeMode: false,\n    currentPhase: 0,\n    trackStart: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackNbits: drive > 0 ? Array<number>(80) : Array<number>(),\n    trackLocation: 0,\n  }\n}\n\nconst driveState: DriveState[] = [initDriveState(0), initDriveState(1), initDriveState(2)]\nconst driveData: Array<Uint8Array> = [new Uint8Array(), new Uint8Array(), new Uint8Array()]\n\nlet currentDrive = 1\n\nexport const setCurrentDrive = (drive: number) => {currentDrive = drive}\n\nexport const getCurrentDriveState = () => driveState[currentDrive]\n\nexport const getCurrentDriveData = () => driveData[currentDrive]\n\nexport const getHardDriveState = () => driveState[0]\nexport const getHardDriveData = () => driveData[0]\n\nexport const getFilename = () => {\n  return driveState[currentDrive].filename\n}\n\nexport const passData = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    const dprops: DriveProps = {\n      hardDrive: driveState[i].hardDrive,\n      drive: i,\n      filename: driveState[i].filename,\n      status: driveState[i].status,\n      motorRunning: driveState[i].motorRunning,\n      diskHasChanges: driveState[i].diskHasChanges,\n      diskData: driveState[i].diskHasChanges ? driveData[i] : new Uint8Array()\n    }\n    passDriveProps(dprops)\n  }\n}\n\nexport const getDriveSaveState = () => {\n  const data = [Buffer.from(driveData[1]).toString(\"base64\"),\n    Buffer.from(driveData[2]).toString(\"base64\")]\n  return { currentDrive: currentDrive,\n    driveState: [driveState[1], driveState[2]], driveData: data }\n}\n\nexport const restoreDriveSaveState = (newState: any) => {\n  currentDrive = newState.currentDrive\n  driveState[1] = newState.driveState[0]\n  driveData[1] = new Uint8Array(Buffer.from(newState.driveData[0], 'base64'))\n  driveState[2] = newState.driveState[1]\n  driveData[2] = new Uint8Array(Buffer.from(newState.driveData[1], 'base64'))\n  passData()\n}\n\nexport const doResetDrive = () => {\n  doResetDiskDrive(driveState[1])\n  doResetDiskDrive(driveState[2])\n  passData()\n}\n\nexport const doPauseDrive = (resume = false) => {\n  doPauseDiskDrive(resume)\n  passData()\n}\n\nexport const doSetDriveProps = (props: DriveProps) => {\n  let drive = props.drive\n  // See if the \"wrong\" disk image was put into a drive. If so, swap the drive.\n  if (props.filename !== '') {\n    if (isHardDriveImage(props.filename)) {\n      drive = 0\n      driveState[0].hardDrive = true\n    } else {\n      if (drive === 0) drive = 1\n    }\n  }\n  driveState[drive] = initDriveState(drive)\n  driveState[drive].filename = props.filename\n  driveState[drive].motorRunning = props.motorRunning\n  driveData[drive] = decodeDiskData(driveState[drive], props.diskData)\n  if (driveData[drive].length === 0) {\n    driveState[drive].filename = ''\n  }\n  if (driveState[drive].hardDrive) {\n    enableHardDrive(driveState[drive].filename !== '')\n  }\n  passData()\n}\n","import { getFilename } from \"./drivestate\"\nimport { addToBuffer, addToBufferDebounce } from \"./keyboard\"\nimport { memSetC000 } from \"./memory\"\nimport { SWITCHES } from \"./softswitches\"\n// import { doSaveTimeSlice } from \"./motherboard\"\n// import { addToBufferDebounce } from \"./keyboard\"\n\nlet gamePad: EmuGamepad | null = null\nconst maxTimeoutCycles = Math.trunc(0.0028*1.020484e6)\nlet paddle0timeout = maxTimeoutCycles / 2\nlet paddle1timeout = maxTimeoutCycles / 2\n// let prevPaddle0timeout = paddle0timeout\n// let prevPaddle1timeout = paddle1timeout\nlet countStart = 0\nlet leftAppleDown = false\nlet rightAppleDown = false\nlet leftButtonDown = false\nlet rightButtonDown = false\nlet isLeftDown = false\nlet isRightDown = false\n\nexport const setButtonState = () => {\n  const wasLeftDown = isLeftDown\n  const wasRightDown = isRightDown\n  isLeftDown = leftAppleDown || leftButtonDown\n  isRightDown = rightAppleDown || rightButtonDown\n  SWITCHES.PB0.isSet = (leftAppleDown || leftButtonDown)\n  SWITCHES.PB1.isSet = (isRightDown || rightButtonDown)\n  if ((isLeftDown && !wasLeftDown) || (isRightDown && !wasRightDown)) {\n//    doSaveTimeSlice()\n  }\n}\n\nexport const pressAppleCommandKey = (isDown: boolean, left: boolean) => {\n  if (left) {\n    leftAppleDown = isDown\n  } else {\n    rightAppleDown = isDown\n  }\n  setButtonState()\n}\n\nconst memSet1 = (addr: number, value: number) => {\n  memSetC000(addr, value)\n}\nexport const resetJoystick = (cycleCount: number) => {\n  memSet1(0xC064, 0x80)\n  memSet1(0xC065, 0x80)\n  memSet1(0xC066, 0)\n  memSet1(0xC067, 0)\n  countStart = cycleCount\n}\n\n// const largeDiff = (v1: number, v2: number) => {\n//   return (Math.abs(v1 - v2) > 0.1 * maxTimeoutCycles)\n// }\n\nexport const checkJoystickValues = (cycleCount: number) => {\n//   if (largeDiff(prevPaddle0timeout, paddle0timeout) ||\n//     largeDiff(prevPaddle1timeout, paddle1timeout)) {\n//     prevPaddle0timeout = paddle0timeout\n//     prevPaddle1timeout = paddle1timeout\n//     doSaveTimeSlice()\n//   }\n  const diff = cycleCount - countStart\n  memSet1(0xC064, (diff < paddle0timeout) ? 0x80 : 0)\n  memSet1(0xC065, (diff < paddle1timeout) ? 0x80 : 0)\n}\n\nconst defaultButtons = [\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {paddle1timeout = 0},\n  () => {paddle1timeout = maxTimeoutCycles},\n  () => {paddle0timeout = 0},\n  () => {paddle0timeout = maxTimeoutCycles},\n]\n\n// const wolf = [\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {addToBufferDebounce('U'.charCodeAt(0))},\n//   () => {addToBufferDebounce('T'.charCodeAt(0))},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {addToBufferDebounce(' '.charCodeAt(0))},\n//   () => {addToBufferDebounce('\\r', timeout)},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {paddle1timeout = 0},\n//   () => {paddle1timeout = maxTimeoutCycles},\n//   () => {paddle0timeout = 0},\n//   () => {paddle0timeout = maxTimeoutCycles},\n// ]\n\n// AZTEC Controls\n// A, D: move left or right (while using weapon); face left or right (otherwise)\n// W: go to walk mode\n// R: go to run mode\n// C: go to climb mode (ascends steps or mounds)\n// J: jump\n// S: stop walking, running, or climbing\n// G: crawl once\n// P: set explosive (must be crawling)\n// O: open box or clear trash mound\n// L: look in box\n// T: take object from ground or box\n// Z: inventory\n// F: draw machete if you have one, gun otherwise, does nothin if unarmed\n// S: turn around while using weapon\n// L: lunge while using machete\n// M: stab at ground while using machete\n// G: switch from machete to gun\n// <spacebar>: fire gun\n//let moving = false\nconst timeout = 300\nconst aztec = [\n  () => {addToBufferDebounce('J', timeout)},  // 0 A\n  () => {addToBuffer('O'); addToBufferDebounce('L', timeout)},  // 1 B\n  () => {addToBufferDebounce('G', timeout)},  // 2 X\n  () => {addToBufferDebounce('T', timeout)},  // 3 Y\n  () => {leftButtonDown = true},  // 4 LB\n  () => {addToBuffer('F'); addToBufferDebounce('L', timeout)},  // 5 RB\n  () => {addToBuffer('O'); addToBuffer('L'); addToBufferDebounce('T', timeout)},  // 6 LT\n  () => {addToBufferDebounce(' ', timeout)},  // 7 RT\n  () => {leftButtonDown = true},  // 8 Select?\n  () => {rightButtonDown = true},  // 9 Start?\n  () => {leftButtonDown = true},  // 10 Left thumb\n  () => {rightButtonDown = true},  // 11 Right thumb\n  () => {addToBufferDebounce('C', timeout)},  // 12 D-pad U\n  () => {addToBufferDebounce('S', timeout)},  // 13 D-pad D\n  () => {\n    addToBuffer('A')\n    addToBufferDebounce('W', timeout)},  // 14 D-pad L\n  () => {\n    addToBuffer('D')\n    addToBufferDebounce('W', timeout)},  // 15 D-pad R\n]\n\nlet funcs = defaultButtons\n// funcs = aztec\n\nexport const setGamepad = (gamePadIn: EmuGamepad) => {\n  gamePad = gamePadIn\n  const filename = getFilename()\n  if (filename.toLowerCase().includes(\"aztec\")) {\n    funcs = aztec\n  } else {\n    funcs = defaultButtons\n  }\n}\n\nconst nearZero = (value: number) => {return value > -0.01 && value < 0.01}\n\nexport const handleGamepad = () => {\n  if (gamePad && gamePad.connected) {\n    let xstick = gamePad.axes[0]\n    let ystick = gamePad.axes[1]\n    if (nearZero(gamePad.axes[0]) && nearZero(gamePad.axes[1])) {\n      xstick = gamePad.axes[2]\n      ystick = gamePad.axes[3]\n    }\n    if (Math.abs(xstick) < 0.01) xstick = 0\n    if (Math.abs(ystick) < 0.01) ystick = 0\n    const dist = Math.sqrt(xstick * xstick + ystick * ystick)\n    const clip = 0.95 * ((dist === 0) ? 1 :\n      Math.max(Math.abs(xstick), Math.abs(ystick)) / dist)\n    xstick = Math.min(Math.max(-clip, xstick), clip)\n    ystick = Math.min(Math.max(-clip, ystick), clip)\n    paddle0timeout = Math.trunc(maxTimeoutCycles*(xstick + clip)/(2*clip))\n    paddle1timeout = Math.trunc(maxTimeoutCycles*(ystick + clip)/(2*clip))\n    leftButtonDown = false\n    rightButtonDown = false\n    gamePad.buttons.forEach((button, i) => {\n      if (button && i < funcs.length) {\n        funcs[i]()\n      }\n    });\n    setButtonState()\n  }\n\n}\n","import { memGetC000, memSetC000 } from \"./memory\"\nimport { popKey } from \"./keyboard\"\nimport { passClickSpeaker } from \"./worker2main\"\nimport { resetJoystick, checkJoystickValues } from \"./joystick\"\nimport { toHex } from \"./utility\"\n\ntype tSetFunc = ((addr: number, cycleCount: number) => void) | null\n\ntype softSwitch = {\n  offAddr: number\n  onAddr: number\n  isSetAddr: number\n  writeOnly: boolean\n  isSet: boolean\n  setFunc: tSetFunc\n}\n\nconst sswitch: Array<softSwitch> = []\n\nconst NewSwitch = (offAddr: number, isSetAddr: number,\n  writeOnly = false,\n  setFunc: tSetFunc = null): softSwitch => {\n  const result: softSwitch = {\n    offAddr: offAddr,\n    onAddr: offAddr + 1,\n    isSetAddr: isSetAddr,\n    writeOnly: writeOnly,\n    isSet: false,\n    setFunc: setFunc,\n  }\n  if (offAddr >= 0xC000) {\n    sswitch[offAddr - 0xC000] = result\n    sswitch[offAddr + 1 - 0xC000] = result\n  } \n  if (isSetAddr >= 0xC000) {\n    sswitch[isSetAddr - 0xC000] = result\n  } \n  return result\n}\n\nconst SLOT6 = 0x60\n\nconst rand = () => Math.floor(256 * Math.random())\n\nexport const handleBankedRAM = (addr: number) => {\n  // Only keep bits 0, 1, 3 of the 0xC08* number\n  addr &= 0b1011\n  SWITCHES.READBSR2.isSet = addr === 0\n  SWITCHES.WRITEBSR2.isSet = addr === 1\n  SWITCHES.OFFBSR2.isSet = addr === 2\n  SWITCHES.RDWRBSR2.isSet = addr === 3\n  SWITCHES.READBSR1.isSet = addr === 8\n  SWITCHES.WRITEBSR1.isSet = addr === 9\n  SWITCHES.OFFBSR1.isSet = addr === 0x0A\n  SWITCHES.RDWRBSR1.isSet = addr === 0x0B\n  // Set soft switches for reading the bank-switched RAM status\n  SWITCHES.BSRBANK2.isSet = (addr <= 3)\n  SWITCHES.BSRREADRAM.isSet = [0, 3, 8, 0x0B].includes(addr)\n}\n\nexport const SWITCHES = {\n  STORE80: NewSwitch(0xC000, 0xC018, true),\n  RAMRD: NewSwitch(0xC002, 0xC013, true),\n  RAMWRT: NewSwitch(0xC004, 0xC014, true),\n  INTCXROM: NewSwitch(0xC006, 0xC015, true),\n  ALTZP: NewSwitch(0xC008, 0xC016, true),\n  SLOTC3ROM: NewSwitch(0xC00A, 0xC017, true),\n  COLUMN80: NewSwitch(0xC00C, 0xC01F, true),\n  ALTCHARSET: NewSwitch(0xC00E, 0xC01E, true),\n  KBRDSTROBE: NewSwitch(0, 0xC010, false, () => {\n    const keyvalue = memGetC000(0xC000) & 0b01111111\n    memSetC000(0xC000, keyvalue, 32)\n    popKey()\n  }),\n  BSRBANK2: NewSwitch(0, 0xC011),    // status location, not a switch\n  BSRREADRAM: NewSwitch(0, 0xC012),  // status location, not a switch\n  CASSOUT: NewSwitch(0xC020, 0, false, () => {\n    memSetC000(0xC020, rand(), 16)\n  }),\n  SPEAKER: NewSwitch(0xC030, 0, false, (addr, cycleCount) => {\n    memSetC000(0xC030, rand(), 16)\n    passClickSpeaker(cycleCount)\n  }),\n  EMUBYTE: NewSwitch(0, 0xC04F, false, () => {memSetC000(0xC04F, 0xCD)}),\n  TEXT: NewSwitch(0xC050, 0xC01A),\n  MIXED: NewSwitch(0xC052, 0xC01B),\n  PAGE2: NewSwitch(0xC054, 0xC01C),\n  HIRES: NewSwitch(0xC056, 0xC01D),\n  AN0: NewSwitch(0xC058, 0),\n  AN1: NewSwitch(0xC05A, 0),\n  AN2: NewSwitch(0xC05C, 0),\n  AN3: NewSwitch(0xC05E, 0),\n  CASSIN1: NewSwitch(0, 0xC060, false, () => {memSetC000(0xC060, rand())}),\n  PB0: NewSwitch(0, 0xC061),  // status location, not a switch\n  PB1: NewSwitch(0, 0xC062),  // status location, not a switch\n  PB2: NewSwitch(0, 0xC063),  // status location, not a switch\n  JOYSTICK12: NewSwitch(0xC064, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  CASSIN2: NewSwitch(0, 0xC068, false, () => {memSetC000(0xC068, rand())}),\n  FASTCHIP_LOCK: NewSwitch(0xC06A, 0),   // used by Total Replay\n  FASTCHIP_ENABLE: NewSwitch(0xC06B, 0), // used by Total Replay\n  FASTCHIP_SPEED: NewSwitch(0xC06D, 0),  // used by Total Replay\n  JOYSTICKRESET: NewSwitch(0xC070, 0, false, (addr, cycleCount) => {\n    resetJoystick(cycleCount)\n    memSetC000(0xC070, rand())\n  }),\n  LASER128EX: NewSwitch(0xC074, 0),  // used by Total Replay\n  READBSR2: NewSwitch(0xC080, 0, false),\n  WRITEBSR2: NewSwitch(0xC081, 0, false),\n  OFFBSR2: NewSwitch(0xC082, 0, false),\n  RDWRBSR2: NewSwitch(0xC083, 0, false),\n  READBSR1: NewSwitch(0xC088, 0, false),\n  WRITEBSR1: NewSwitch(0xC089, 0, false),\n  OFFBSR1: NewSwitch(0xC08A, 0, false),\n  RDWRBSR1: NewSwitch(0xC08B, 0, false),\n  DRVSM0: NewSwitch(0xC080 + SLOT6, 0),\n  DRVSM1: NewSwitch(0xC082 + SLOT6, 0),\n  DRVSM2: NewSwitch(0xC084 + SLOT6, 0),\n  DRVSM3: NewSwitch(0xC086 + SLOT6, 0),\n  DRIVE: NewSwitch(0xC088 + SLOT6, 0),\n  DRVSEL: NewSwitch(0xC08A + SLOT6, 0),\n  DRVDATA: NewSwitch(0xC08C + SLOT6, 0),\n  DRVWRITE: NewSwitch(0xC08E + SLOT6, 0),\n}\n\nSWITCHES.TEXT.isSet = true\n\n// const skipDebugFlags = [0xC000, 0xC001, 0xC00D, 0xC00F, 0xC030, 0xC054, 0xC055, 0xC01F]\n\nexport const checkSoftSwitches = (addr: number,\n  calledFromMemSet: boolean, cycleCount: number) => {\n  // if (!skipDebugFlags.includes(addr)) {\n  //   const s = memC000[addr - 0xC000] > 0x80 ? 1 : 0\n  //   console.log(`${cycleCount} $${toHex(s6502.PC)}: $${toHex(addr)} [${s}] ${calledFromMemSet ? \"set\" : \"\"}`)\n  // }\n  // Handle banked-RAM soft switches, since these have duplicate addresses\n  // and need to call our special function.\n  if (addr >= 0xC080 && addr <= 0xC08F) {\n    // $C084...87 --> $C080...83, $C08C...8F --> $C088...8B\n    addr -= addr & 4\n    handleBankedRAM(addr)\n    return\n  }\n  const sswitch1 = sswitch[addr - 0xC000]\n  if (!sswitch1) {\n    console.error(\"Unknown softswitch \" + toHex(addr))\n    return\n  }\n  if (sswitch1.setFunc) {\n    sswitch1.setFunc(addr, cycleCount)\n    return\n  }\n  if (addr === sswitch1.offAddr || addr === sswitch1.onAddr) {\n    if (!sswitch1.writeOnly || calledFromMemSet) {\n      sswitch1.isSet = (addr === sswitch1.onAddr)\n    }\n    if (sswitch1.isSetAddr) {\n      memSetC000(sswitch1.isSetAddr, sswitch1.isSet ? 0x8D : 0x0D)\n    }\n  } else if (addr === sswitch1.isSetAddr) {\n    memSetC000(addr, sswitch1.isSet ? 0x8D : 0x0D)\n  }\n}\n","import { SWITCHES, checkSoftSwitches } from \"./softswitches\";\nimport { cycleCount } from \"./instructions\"\nimport { handleDriveSoftSwitches } from \"./diskdata\"\nimport { romBase64 } from \"./roms/rom_2e\"\nimport { Buffer } from \"buffer\";\n\n// 00000: main memory\n// 10000: aux memory \n// 20000...23FFF: ROM\n// 24000...246FF: Slots 1-7\n// Bank1 of $D000-$DFFF is stored at 0x*D000-0x*DFFF (* 0 for main, 1 for aux)\n// Bank2 of $D000-$DFFF is stored at 0x*C000-0x*CFFF (* 0 for main, 1 for aux)\nexport let memory = (new Uint8Array(600 * 256)).fill(0)\n\n// Mappings from real Apple II address to memory array above.\n// 256 pages of memory, from $00xx to $FFxx\nconst addressGetTable = (new Array<number>(256)).fill(-1)\nconst addressSetTable = (new Array<number>(256)).fill(-1)\n\nconst ROMindexMinusC0 = 0x200 - 0xC0\nconst SLOTindexMinusC1 = 0x240 - 0xC1\nconst AUXindex = 0x100\nconst ROMstartMinusC000 = 256 * ROMindexMinusC0\nconst SLOTstartMinusC100 = 256 * SLOTindexMinusC1\nconst AUXstart = 256 * AUXindex\n\nconst updateMainAuxMemoryTable = () => {\n  const offsetAuxRead = SWITCHES.RAMRD.isSet ? AUXindex : 0\n  const offsetAuxWrite = SWITCHES.RAMWRT.isSet ? AUXindex : 0\n  const offsetPage2 = SWITCHES.PAGE2.isSet ? AUXindex : 0\n  const offsetTextPageRead = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxRead\n  const offsetTextPageWrite = SWITCHES.STORE80.isSet ? offsetPage2 : offsetAuxWrite\n  const offsetHgrPageRead = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxRead\n  const offsetHgrPageWrite = (SWITCHES.STORE80.isSet && SWITCHES.HIRES.isSet) ? offsetPage2 : offsetAuxWrite\n  for (let i = 2; i < 256; i++) {\n    addressGetTable[i] = i + offsetAuxRead;\n    addressSetTable[i] = i + offsetAuxWrite;\n  }\n  for (let i = 4; i <= 7; i++) {\n    addressGetTable[i] = i + offsetTextPageRead;\n    addressSetTable[i] = i + offsetTextPageWrite;\n  }\n  for (let i = 0x20; i <= 0x3F; i++) {\n    addressGetTable[i] = i + offsetHgrPageRead;\n    addressSetTable[i] = i + offsetHgrPageWrite;\n  }\n}\n\nconst updateReadBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  addressGetTable[0] = offsetZP;\n  addressGetTable[1] = 1 + offsetZP;\n  addressSetTable[0] = offsetZP;\n  addressSetTable[1] = 1 + offsetZP;\n  if (SWITCHES.BSRREADRAM.isSet) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressGetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressGetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM ($C000...$FFFF) is in 0x200...0x23F\n    for (let i = 0xC0; i <= 0xFF; i++) {\n      addressGetTable[i] = ROMindexMinusC0 + i;\n    }\n  }\n}\n\nconst updateWriteBankSwitchedRamTable = () => {\n  const offsetZP = SWITCHES.ALTZP.isSet ? AUXindex : 0\n  const writeRAM = SWITCHES.WRITEBSR1.isSet || SWITCHES.WRITEBSR2.isSet ||\n    SWITCHES.RDWRBSR1.isSet || SWITCHES.RDWRBSR2.isSet\n  if (writeRAM) {\n    for (let i = 0xD0; i <= 0xFF; i++) {\n      addressSetTable[i] = i + offsetZP;\n    }\n    if (!SWITCHES.BSRBANK2.isSet) {\n      // Bank1 of $D000-$DFFF is actually in 0xC0...0xCF\n      for (let i = 0xD0; i <= 0xDF; i++) {\n        addressSetTable[i] = i - 0x10 + offsetZP;\n      }\n    }\n  } else {\n    // ROM is not writeable\n    for (let i = 0xC0; i <= 0xFF; i++) {\n      addressSetTable[i] = -1;\n    }\n  }\n}\n\nconst updateSlotRomTable = () => {\n  // Read peripheral slot ROM\n  if (!SWITCHES.INTCXROM.isSet) {\n    // TODO: Currently, $C800-$CFFF is not being filled in for cards.\n    for (let i = 0xC1; i <= 0xC7; i++) {\n      addressGetTable[i] = SLOTindexMinusC1 + i;\n    }\n  }\n  if (!SWITCHES.SLOTC3ROM.isSet) {\n    addressGetTable[0xC3] = ROMindexMinusC0 + 0xC3\n  }\n}\n\nexport const updateAddressTables = () => {\n  updateMainAuxMemoryTable()\n  updateReadBankSwitchedRamTable()\n  updateWriteBankSwitchedRamTable()\n  updateSlotRomTable()\n  // Scale all of our mappings up by 256 to get to offsets in memory array.\n  for (let i = 0; i < 256; i++) {\n    addressGetTable[i] = 256 * addressGetTable[i];\n    addressSetTable[i] = 256 * addressSetTable[i];\n  }\n}\n\nexport const specialJumpTable = new Map<number, () => void>();\n\nexport const setSlotDriver = (slot: number, driver: Uint8Array, jump = 0, fn = () => {}) => {\n  memory.set(driver, SLOTstartMinusC100 + 0xC000 + slot * 0x100)\n  if (jump) {\n    specialJumpTable.set(jump, fn)\n  }\n}\n\nexport const memoryReset = () => {\n  memory.fill(0xFF, 0, 0x1FFFF)\n  const rom64 = romBase64.replace(/\\n/g, \"\")\n  const rom = new Uint8Array(\n    Buffer.from(rom64, \"base64\")\n  )\n  memory.set(rom, ROMstartMinusC000 + 0xC000)\n  updateAddressTables()\n}\n\n// Fill all pages of either main or aux memory with 0, 1, 2,...\nexport const memorySetForTests = (aux = false) => {\n  memoryReset()\n  const offset = aux ? AUXstart : 0\n  for (let i=0; i <= 0xFF; i++) {\n    memory.fill(i, i * 256 + offset, (i + 1) * 256 + offset)\n  }\n}\n\n// Set $C007: FF to see this code\n// Hack to change the cursor\n// rom[0xC26F - 0xC000] = 161\n// rom[0xC273 - 0xC000] = 161\n// Hack to speed up the cursor\n// rom[0xC288 - 0xC000] = 0x20\n\nexport const readWriteAuxMem = (addr: number, write = false) => {\n  let useAux = write ? SWITCHES.RAMWRT.isSet : SWITCHES.RAMRD.isSet\n  if (addr <= 0x1FF || addr >= 0xC000) {\n    useAux = SWITCHES.ALTZP.isSet\n  } else if (addr >= 0x400 && addr <= 0x7FF) {\n    if (SWITCHES.STORE80.isSet) {\n      useAux = SWITCHES.PAGE2.isSet\n    }\n  } else if (addr >= 0x2000 && addr <= 0x3FFF) {\n    if (SWITCHES.STORE80.isSet) {\n      if (SWITCHES.HIRES.isSet) {\n        useAux = SWITCHES.PAGE2.isSet\n      }\n    }\n  }\n  return useAux\n}\n\nconst memGetSoftSwitch = (addr: number, code=0): number => {\n  // $C019 Vertical blanking status (0 = vertical blanking, 1 = beam on)\n  if (addr === 0xC019) {\n    // Return \"low\" for 70 scan lines out of 262 (70 * 65 cycles = 4550)\n    return ((cycleCount % 17030) > 12480) ? 0x0D : 0x8D\n  }\n  checkSoftSwitches(addr, false, cycleCount)\n  if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n    return handleDriveSoftSwitches(addr, -1)\n  }\n  updateAddressTables()\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const memGet = (addr: number, code=0): number => {\n  const page = addr >>> 8\n  if (page === 0xC0) {\n    return memGetSoftSwitch(addr, code)\n  }\n  const shifted = addressGetTable[page]\n  return memory[shifted + (addr & 255)]\n}\n\nexport const memSet = (addr: number, value: number) => {\n  const page = addr >>> 8\n  if (page === 0xC0) {\n    if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n      handleDriveSoftSwitches(addr, value)\n    } else {\n      checkSoftSwitches(addr, true, cycleCount)\n      updateAddressTables()\n    }\n    return\n  }\n  const shifted = addressSetTable[page]\n  if (shifted < 0) return\n  memory[shifted + (addr & 255)] = value\n}\n\nexport const memGetC000 = (addr: number) => {\n  return memory[ROMstartMinusC000 + addr]\n}\n\nexport const memSetC000 = (addr: number, value: number, repeat = 1) => {\n  const start = ROMstartMinusC000 + addr\n  memory.fill(value, start, start + repeat)\n}\n\nconst TEXT_PAGE1 = 0x400\nconst TEXT_PAGE2 = 0x800\nconst offset = [\n  0, 0x80, 0x100, 0x180, 0x200, 0x280, 0x300, 0x380, 0x28, 0xA8, 0x128, 0x1A8,\n  0x228, 0x2A8, 0x328, 0x3A8, 0x50, 0xD0, 0x150, 0x1D0, 0x250, 0x2D0, 0x350,\n  0x3D0,\n]\n\nexport function getTextPage(getLores = false) {\n  let jstart = 0\n  let jend = 24\n  let is80column = false\n  if (getLores) {\n    if (SWITCHES.TEXT.isSet || SWITCHES.HIRES.isSet) {\n      return new Uint8Array()\n    }\n    jend = SWITCHES.MIXED.isSet ? 20 : 24\n    is80column = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  } else {\n    if (!SWITCHES.TEXT.isSet && !SWITCHES.MIXED.isSet) {\n      return new Uint8Array()\n    }\n    if (!SWITCHES.TEXT.isSet && SWITCHES.MIXED.isSet) jstart = 20\n    is80column = SWITCHES.COLUMN80.isSet\n  }\n  if (is80column) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(80 * (jend - jstart)).fill(0xA0)\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 80 * (j - jstart)\n      for (let i = 0; i < 40; i++) {\n        textPage[joffset + 2 * i + 1] = memory[pageOffset + offset[j] + i]\n        textPage[joffset + 2 * i] = memory[AUXstart + pageOffset + offset[j] + i]\n      }\n    }\n    return textPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(40 * (jend - jstart))\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 40 * (j - jstart)\n      let start = pageOffset + offset[j]\n      textPage.set(memory.slice(start, start + 40), joffset)\n    }\n    return textPage\n  }\n}\n\nexport function getHires() {\n  if (SWITCHES.TEXT.isSet || !SWITCHES.HIRES.isSet) {\n    return new Uint8Array()\n  }\n  const doubleRes = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  const nlines = SWITCHES.MIXED.isSet ? 160 : 192\n  if (doubleRes) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(80 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      for (let i = 0; i < 40; i++) {\n        hgrPage[j * 80 + 2 * i + 1] = memory[addr + i]\n        hgrPage[j * 80 + 2 * i] = memory[AUXstart + addr + i]\n      }\n    }\n    return hgrPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(40 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      hgrPage.set(memory.slice(addr, addr + 40), j * 40)\n    }\n    return hgrPage\n  }\n}\n\nexport const getDataBlock = (addr: number) => {\n  const offset = addressGetTable[addr >>> 8]\n  return memory.slice(offset, offset + 512)\n}\n\nexport const setDataBlock = (addr: number, data: Uint8Array) => {\n  const offset = addressSetTable[addr >>> 8] + (addr & 255)\n  memory.set(data, offset)\n}\n\nexport const matchMemory = (addr: number, data: number[]) => {\n  for (let i = 0; i < data.length; i++) {\n   if (memGet(addr + i) !== data[i]) return false\n  }\n  return true\n}","export const romBase64=`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\ncM5oYLEoLB/AEBmNAcCEKphFIGqwBK1VwMiYSqixKCxUwKQqLB7AEAbJILACCUBg\nSCn/MBat+wRqaEiQDiwewBAJSUAsrM7wAklALB/AEB2NAcBIhCqYRSBKsAStVcDI\nmEqoaJEorVTApCpoYJEoaGBImEisewUgRM6NewYpgEmrTM3OSJhIrHsFrXsGIHDO\naKhoYCBxzan/hTKt+wQpBPACRjKteweFKK37B4UprfsFhSVgLBLAED2pBs2z+/A2\nogMsEcAwAqILjbP7LIDArbP7yQbwAegsgcAsgcCgAKn4hTeENrE2kTbI0PnmN9D1\nvYDAvYDAYAAAAOmBStAUpD+mPtABiMqKGOU6hT4QAciY5TvQQKQvuT0AkTqIEPgg\nSPkgGvwgGvxM4/ylPSCO+Kq9APrFQtATvcD5xUPQDKVEpC7AnfCzxS7wysY90Nzm\nRMY18NakNJiqTNL8IMf/rQACyaDwEsmN0AFgIKf/yZPQ5Yrw4iB4/qkDhT0gE/8K\n6b7JwpDRCgqiBAomQiZDyhD4xj3w9BDkogUgyMSlRAoKBTXJILAGpjXwAgmAhUSE\nNLkAAsm78ATJjdC0TGvP32/YZdf43JTZsdsw89jf4duP85jz5PHd8dTxJPIx8kDy\n1/Ph8+j2/fZo92735vdX/CD3Jvd092zybvJy8nbyf/JO8mrZVfKF8qXyyvIX87vz\nnvNh8kXaPdkR2cjZSNj0AyDZatnb2W3Y69mD58jYr9gS43rn1NqV2KTWadaf20jW\nkOsj7K/rCgDe4hLUzd//4o3uru9B6Qnv6u/x7zrwnvBk59bmxeMH5+XmRuZa5obm\nkeZ5wOd5qed7gel7aOp9lu5QVN9GTt9/z+5/l95kZN9FTsRGT9JORVjUREFUwUlO\nUFXUREXMREnNUkVBxEfSVEVY1FBSo0lOo0NBTMxQTE/USExJzlZMSc5IR1KySEfS\nSENPTE9SvUhQTE/URFJB11hEUkHXSFRBwkhPTcVST1S9U0NBTEW9U0hMT0HEVFJB\nQ8VOT1RSQUPFTk9STUHMSU5WRVJTxUZMQVPIQ09MT1K9UE/QVlRBwkhJTUVNukxP\nTUVNuk9ORVLSUkVTVU3FUkVDQUzMU1RPUsVTUEVFRL1MRdRHT1TPUlXOScZSRVNU\nT1LFpkdPU1XCUkVUVVLOUkXNU1RP0E/OV0FJ1ExPQcRTQVbFREXGUE9LxVBSSU7U\nQ09O1ExJU9RDTEVB0kdF1E5F11RBQqhUz0bOU1BDqFRIRc5B1E5P1FNURdCrraqv\n3kFOxE/Svr28U0fOSU7UQULTVVPSRlLFU0NSTqhQRMxQT9NTUdJSTsRMT8dFWNBD\nT9NTSc5UQc5BVM5QRUXLTEXOU1RSpFZBzEFTw0NIUqRMRUZUpFJJR0hUpE1JRKQA\nTkVYVCBXSVRIT1VUIEZP0lNZTlRB2FJFVFVSTiBXSVRIT1VUIEdPU1XCT1VUIE9G\nIERBVMFJTExFR0FMIFFVQU5USVTZT1ZFUkZMT9dPVVQgT0YgTUVNT1LZVU5ERUYn\nRCBTVEFURU1FTtRCQUQgU1VCU0NSSVDUUkVESU0nRCBBUlJB2URJVklTSU9OIEJZ\nIFpFUs9JTExFR0FMIERJUkVD1FRZUEUgTUlTTUFUQ8hTVFJJTkcgVE9PIExPTsdG\nT1JNVUxBIFRPTyBDT01QTEXYQ0FOJ1QgQ09OVElOVcVVTkRFRidEIEZVTkNUSU/O\nIEVSUk9SBwAgSU4gAA1CUkVBSwcAuujo6Oi9AQHJgdAhpYbQCr0CAYWFvQMBhYbd\nAwHQB6WF3QIB8AeKGGkSqtDYYCDj04VthG44pZblm4VeqKWX5Zyq6JjwI6WWOOVe\nhZawA8aXOKWU5V6FlLAIxpWQBLGWkZSI0PmxlpGUxpfGlcrQ8mAKaTawNYVeuuRe\nkC5gxHCQKNAExW+QIkiiCZhItZPKEPoghOSi92iVnegw+mioaMRwkAbQBcVvsAFg\nok0k2BADTOnyIPvaIFrbvWDSSCBc2+hoEPUgg9apUKDTIDrbpHbI8AMgGe0g+9qi\n3SAu1Ya4hLlG2CCxAKrw7KL/hnaQBiBZ1UwF2KavhmmmsIZqIAzaIFnVhA8gGtaQ\nRKABsZuFX6VphV6lnIVhpZuI8ZsYZWmFaYVgpWpp/4Vq5ZyqOKWb5WmosAPoxmEY\nZV6QA8ZfGLFekWDI0PnmX+ZhytDyrQAC8Dilc6R0hW+EcKVphZZlD4WUpGqEl5AB\nyISVIJPTpVCkUY3+AYz/AaVtpG6FaYRqpA+5+wGIkZvQ+CBl1qVnpGiFXoRfGKAB\nsV7QC6Vpha+laoWwTDzUoATIsV7Q+8iYZV6qoACRXqVfaQDIkV6GXoVfkNKigIYz\nIGr94O+QAqLvqQCdAAKK8Au9/wEpf53/AcrQ9akAov+gAWAgDP0pf2CmuMqgBIQT\n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\n5opMi/4g+OaKTJX+IPjm4DCwE4bwqSwgwN4g+ObgMLAFhiyGLWBMmeEg7PHk8LAI\npfCFLIUthvCpxSDA3iD45uAwsOJgIOzxiqTwwCiw10wA+CAJ8oqkLMAosMqk8EwZ\n+CAJ8oqowCiwvKXwTCj4IPjmikxk+CD45sqKyRiwp0xb+yD45opJ/6rohvFgOJAY\nZvJgqf/QAqk/ogCFMobzYKl/okDQ9SBn3SBS56VQxW2lUeVusANMENSlUIVzhW+l\nUYV0hXBgIGfdIFLnpVDFc6VR5XSw4KVQxWmlUeVqkNalUIVppVGFakxs1qmrIMDe\npbiF9KW5hfU4ZtildYX2pXaF9yCm2UyY2YbepviG36V1hdqldoXbpXmF3KV6hd2l\n9IW4pfWFuaX2hXWl94V2ILcAID7ZTNLXpdqFdaXbhXal3IW4pd2FuabfmkzS10zJ\n3rD7pq+GaaawhmogDNogGtalm4VgpZyFYaksIMDeIAza5lDQAuZRIBrWpZvFYKWc\n5WGwAWCgALGbkWDmm9AC5pzmYNAC5mGlacWbpWrlnLDmpmGkYNAByoiGaoRpTPLU\nrVbArVPATED7rVTATDn7INn3oAOxm6qIsZvpAbAByoVQhlEgzf4gd/dMzf4g2fcg\n/f6gArGbxVDIsZvlUbADTBDUIHf3TP3+LFXALFLAqUDQCKkgLFTALFPAheatV8Ct\nUMCpAIUcpeaFG6AAhBqlHJEaIH70yND25hulGykf0O5gheKG4IThSCnAhSZKSgUm\nhSZohScKCgomJwomJwpmJqUnKR8F5oUnisAA8AWgI2kEyOkHsPuE5aq9ufSFMJhK\npeSFHLAoYCAR9KUcUSYlMFEmkSZgECOlMEqwBUnAhTBgiBACoCepwIUwhOWlHArJ\nwBAGpRxJf4UcYKUwCkmAMN2pgcjAKJDgoACw3Bil0SkE8CWpfyUwMSbQGebqqX8l\nMBARGKXRKQTwDrEmRRwlMNAC5upRJpEmpdFl0ykDyQJqsJIwMBilJyy59dAiBiaw\nGizN9PAFaR84sBJpI0ilJmmwsAJp8IUmaLACaR9mJmn8hSdgGKUnaQQsufXQ8wYm\nkBhp4BgsCPXwEqUmaVBJ8PACSfCFJqXmkAJp4GYmkNFIqQCF4IXhheJoSDjl4EiK\n5eGF07AKaEn/aQFIqQDl04XRhdVohdCF1GiF4IbhmBjl4pAESf9p/oXShOJm0zjl\n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\ng39dzLX8Fxf1A/sDYvr6ww==`\n","import { toHex, MODE } from \"./utility\"\nimport { memGet, memSet } from \"./memory\"\n// var startTime = performance.now()\n\nexport let s6502: STATE6502 = {\n  PStatus: 0,\n  PC: 0,\n  Accum: 0,\n  XReg: 0,\n  YReg: 0,\n  StackPtr: 0\n}\n\nexport const setX = (value: number) => {\n  s6502.XReg = value\n}\n\nexport const setY = (value: number) => {\n  s6502.YReg = value\n}\n\nexport let cycleCount = 0\n\nexport const setCycleCount = (cycles: number) => { cycleCount = cycles }\n\nexport const set6502State = (new6502: any) => {\n  s6502 = new6502\n}\n\nexport const reset6502 = () => {\n  s6502.Accum = 0\n  s6502.XReg = 0\n  s6502.YReg = 0\n  s6502.PStatus = 0b00100100\n  s6502.StackPtr = 0xFF\n  setPC(memGet(0xFFFD) * 256 + memGet(0xFFFC))\n}\n\nexport const incrementPC = (value: number) => {\n  setPC((s6502.PC + value + 65536) % 65536)\n}\n\nexport const setPC = (value: number) => {\n  console.assert(!isNaN(value), \"illegal PC\")\n  s6502.PC = value\n}\n\nconst setPStatus = (value: number) => {\n  s6502.PStatus = value | 0b00110000\n}\n\nexport const stack = new Array<string>(256).fill('')\n\nconst pushStack = (call: string, value: number) => {\n  stack[s6502.StackPtr] = call\n  memSet(0x100 + s6502.StackPtr, value)\n  s6502.StackPtr = (s6502.StackPtr + 255) % 256\n}\n\nconst popStack = () => {\n  s6502.StackPtr = (s6502.StackPtr + 1) % 256;\n  const value = memGet(0x100 + s6502.StackPtr);\n  if (isNaN(value)) {\n    throw new Error(\"illegal stack value\");\n  }\n  return value\n}\n\nexport const isCarry = () => { return ((s6502.PStatus & 0x01) !== 0); }\nexport const setCarry = (set = true) => s6502.PStatus = set ? s6502.PStatus | 1 :\n  s6502.PStatus & 0b11111110\n\nconst isZero = () => { return ((s6502.PStatus & 0x02) !== 0); }\nconst setZero = (set = true) => s6502.PStatus = set ? s6502.PStatus | 2 :\n  s6502.PStatus & 0b11111101\n\n// const isInterrupt = () => { return ((PStatus & 0x04) !== 0); }\nexport const setInterrupt = (set = true) => s6502.PStatus = set ? s6502.PStatus | 4 :\n  s6502.PStatus & 0b11111011\n\nconst isDecimal = () => { return ((s6502.PStatus & 0x08) !== 0); }\nconst BCD = () => (isDecimal() ? 1 : 0)\nconst setDecimal = (set = true) => s6502.PStatus = set ? s6502.PStatus | 8 :\n  s6502.PStatus & 0b11110111\n\nexport const isBreak = () => { return ((s6502.PStatus & 0x10) !== 0); }\nconst setBreak = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x10 :\n  s6502.PStatus & 0b11101111\n\nconst isOverflow = () => { return ((s6502.PStatus & 0x40) !== 0); }\nconst setOverflow = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x40 :\n  s6502.PStatus & 0b10111111\n\nconst isNegative = () => { return ((s6502.PStatus & 0x80) !== 0); }\nconst setNegative = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x80 :\n  s6502.PStatus & 0b01111111\n\nconst checkStatus = (value: number) => {\n  setZero(value === 0);\n  setNegative(value >= 128);\n}\n\n// Return number of clock cycles taken\nexport const doBranch = (takeBranch: boolean, offset: number) => {\n  if (takeBranch) {\n    const oldPC = s6502.PC\n    incrementPC((offset > 127) ? (offset - 256) : offset)\n    return 3 + pageBoundary(oldPC, s6502.PC)\n  }\n  return 2\n}\n\nconst oneByteAdd = (value: number, offset: number) => (value + offset + 256) % 256\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\nconst twoByteAdd = (vLo: number, vHi: number, offset: number) => (vHi*256 + vLo + offset + 65536) % 65536\nconst pageBoundary = (addr1: number, addr2: number) => (((addr1 >> 8) !== (addr2 >> 8)) ? 1 : 0)\n\nexport const pcodes = new Array<PCodeInstr>(256)\n\nconst PCODE = (name: string, mode: MODE, pcode: number, PC: number, code: PCodeFunc) => {\n  console.assert(!pcodes[pcode], \"Duplicate instruction: \" + name + \" mode=\" + mode)\n  pcodes[pcode] = {name: name, pcode: pcode, mode: mode, PC: PC, execute: code}\n}\n\nconst doIndirectYinstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = twoByteAdd(vLo, vHi, s6502.YReg)\n  doInstruction(addr)\n  let cycles = 5 + pageBoundary(addr, address(vLo, vHi))\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\nconst doIndirectInstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = address(vLo, vHi)\n  doInstruction(addr)\n  let cycles = 5\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\n// 300: F8 18 B8 A9 BD 69 00 D8 00\nconst doADC_BCD = (value: number) => {\n  let ones = (s6502.Accum & 0x0F) + (value & 0x0F) + (isCarry() ? 1 : 0)\n  // Handle illegal BCD hex values by wrapping to \"tens\" digit\n  if (ones >= 0xA) {\n    ones += 6\n  }\n  let tmp = (s6502.Accum & 0xF0) + (value & 0xF0) + ones\n  // Pretend we're doing normal addition to set overflow flag\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow((tmp & 0xFF) >= 128 ? bothPositive : bothNegative)\n  // Handle illegal BCD hex values by wrapping to \"hundreds\" digit\n  setCarry(tmp >= 0xA0)\n  if (isCarry()) {\n    tmp += 0x60\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n}\n\nconst doADC_HEX = (value: number) => {\n  let tmp = s6502.Accum + value + (isCarry() ? 1 : 0)\n  setCarry(tmp >= 256)\n  tmp = tmp % 256\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow(tmp >= 128 ? bothPositive : bothNegative)\n  s6502.Accum = tmp\n  checkStatus(s6502.Accum)\n}\n\nconst doADC = (addr: number) => {\n  if (isDecimal()) {\n    doADC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(memGet(addr))\n  }\n}\n\nPCODE('ADC', MODE.IMM, 0x69, 2, (value) => {\n  if (BCD()) {doADC_BCD(value)} else {doADC_HEX(value)}; return 2 + BCD()})\nPCODE('ADC', MODE.ZP_REL, 0x65, 2, (vZP) => {doADC(vZP); return 3 + BCD()})\nPCODE('ADC', MODE.ZP_X, 0x75, 2, (vZP) =>\n  {doADC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS, 0x6D, 3, (vLo, vHi) =>\n  {doADC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS_X, 0x7D, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.ABS_Y, 0x79, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.IND_X, 0x61, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doADC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('ADC', MODE.IND_Y, 0x71, 2, (vZP) => doIndirectYinstruction(vZP, doADC, true))\nPCODE('ADC', MODE.IND, 0x72, 2, (vZP) => doIndirectInstruction(vZP, doADC, true))\n\nconst doAND = (addr: number) => {\n  s6502.Accum &= memGet(addr)\n  checkStatus(s6502.Accum)}\nPCODE('AND', MODE.IMM, 0x29, 2, (value) => {s6502.Accum &= value; checkStatus(s6502.Accum); return 2})\nPCODE('AND', MODE.ZP_REL, 0x25, 2, (vZP) => {doAND(vZP); return 3})\nPCODE('AND', MODE.ZP_X, 0x35, 2, (vZP) => {doAND(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('AND', MODE.ABS, 0x2D, 3, (vLo, vHi) => {doAND(address(vLo, vHi)); return 4})\nPCODE('AND', MODE.ABS_X, 0x3D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.ABS_Y, 0x39, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.IND_X, 0x21, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doAND(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('AND', MODE.IND_Y, 0x31, 2, (vZP) => doIndirectYinstruction(vZP, doAND, false))\nPCODE('AND', MODE.IND, 0x32, 2, (vZP) => doIndirectInstruction(vZP, doAND, false))\n\nconst doASL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 128) === 128)\n  v = (v << 1) % 256\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ASL', MODE.IMPLIED, 0x0A, 1, () => {setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = (s6502.Accum << 1) % 256; checkStatus(s6502.Accum); return 2})\nPCODE('ASL', MODE.ZP_REL, 0x06, 2, (vZP) => {doASL(vZP); return 5})\nPCODE('ASL', MODE.ZP_X, 0x16, 2, (vZP) => {doASL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ASL', MODE.ABS, 0x0E, 3, (vLo, vHi) => {doASL(address(vLo, vHi)); return 6})\nPCODE('ASL', MODE.ABS_X, 0x1E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doASL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BCC', MODE.ZP_REL, 0x90, 2, (value) => doBranch(!isCarry(), value))\nPCODE('BCS', MODE.ZP_REL, 0xB0, 2, (value) => doBranch(isCarry(), value))\nPCODE('BEQ', MODE.ZP_REL, 0xF0, 2, (value) => doBranch(isZero(), value))\nPCODE('BMI', MODE.ZP_REL, 0x30, 2, (value) => doBranch(isNegative(), value))\nPCODE('BNE', MODE.ZP_REL, 0xD0, 2, (value) => doBranch(!isZero(), value))\nPCODE('BPL', MODE.ZP_REL, 0x10, 2, (value) => doBranch(!isNegative(), value))\nPCODE('BVC', MODE.ZP_REL, 0x50, 2, (value) => doBranch(!isOverflow(), value))\nPCODE('BVS', MODE.ZP_REL, 0x70, 2, (value) => doBranch(isOverflow(), value))\nPCODE('BRA', MODE.ZP_REL, 0x80, 2, (value) => doBranch(true, value))\n\nconst doBit = (value: number) => {\n  setZero((s6502.Accum & value) === 0);\n  setNegative((value & 0b10000000) !== 0);\n  setOverflow((value & 0b01000000) !== 0);\n}\nPCODE('BIT', MODE.ZP_REL, 0x24, 2, (vZP) => {doBit(memGet(vZP)); return 3})\nPCODE('BIT', MODE.ABS, 0x2C, 3, (vLo, vHi) => {doBit(memGet(address(vLo, vHi))); return 4})\nPCODE('BIT', MODE.IMM, 0x89, 2, (value) => {doBit(value); return 2})\nPCODE('BIT', MODE.ZP_X, 0x34, 2, (vZP) => {doBit(memGet(oneByteAdd(vZP, s6502.XReg))); return 4})\nPCODE('BIT', MODE.ABS_X, 0x3C, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doBit(memGet(addr)); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BRK', MODE.IMPLIED, 0x00, 1, () => {\n  setBreak();\n  memSet(0xC00A, 0)\n  memSet(0xC006, 0)\n  const PC2 = (s6502.PC + 2) % 65536\n  const vLo = memGet(0xFFFE)\n  const vHi = memGet(0xFFFF)\n  pushStack(\"BRK $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256))\n  pushStack(\"BRK\", PC2 % 256)\n  pushStack(\"S\", s6502.PStatus)\n  setDecimal(false)  // 65c02 only\n  setInterrupt()\n  setPC(twoByteAdd(vLo, vHi, -1));\n  return 7})\n\nPCODE('CLC', MODE.IMPLIED, 0x18, 1, () => {setCarry(false); return 2})\nPCODE('CLD', MODE.IMPLIED, 0xD8, 1, () => {setDecimal(false); return 2})\nPCODE('CLI', MODE.IMPLIED, 0x58, 1, () => {setInterrupt(false); return 2})\nPCODE('CLV', MODE.IMPLIED, 0xB8, 1, () => {setOverflow(false); return 2})\n\nconst doCMP = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nconst doCMP1 = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nPCODE('CMP', MODE.IMM, 0xC9, 2, (value) => {setCarry(s6502.Accum >= value);\n  checkStatus((s6502.Accum - value + 256) % 256); return 2})\nPCODE('CMP', MODE.ZP_REL, 0xC5, 2, (vZP) => {doCMP(vZP); return 3})\nPCODE('CMP', MODE.ZP_X, 0xD5, 2, (vZP) => {doCMP(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('CMP', MODE.ABS, 0xCD, 3, (vLo, vHi) => {doCMP(address(vLo, vHi)); return 4})\nPCODE('CMP', MODE.ABS_X, 0xDD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doCMP1(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.ABS_Y, 0xD9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doCMP(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.IND_X, 0xC1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doCMP(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('CMP', MODE.IND_Y, 0xD1, 2, (vZP) => doIndirectYinstruction(vZP, doCMP, false))\nPCODE('CMP', MODE.IND, 0xD2, 2, (vZP) => doIndirectInstruction(vZP, doCMP, false))\n\nconst doCPX = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.XReg >= value)\n  checkStatus((s6502.XReg - value + 256) % 256)\n}\nPCODE('CPX', MODE.IMM, 0xE0, 2, (value) => {setCarry(s6502.XReg >= value);\n  checkStatus((s6502.XReg - value + 256) % 256); return 2})\nPCODE('CPX', MODE.ZP_REL, 0xE4, 2, (vZP) => {doCPX(vZP); return 3})\nPCODE('CPX', MODE.ABS, 0xEC, 3, (vLo, vHi) => {doCPX(address(vLo, vHi)); return 4})\n\nconst doCPY = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.YReg >= value)\n  checkStatus((s6502.YReg - value + 256) % 256)\n}\nPCODE('CPY', MODE.IMM, 0xC0, 2, (value) => {setCarry(s6502.YReg >= value);\n  checkStatus((s6502.YReg - value + 256) % 256); return 2})\nPCODE('CPY', MODE.ZP_REL, 0xC4, 2, (vZP) => {doCPY(vZP); return 3})\nPCODE('CPY', MODE.ABS, 0xCC, 3, (vLo, vHi) => {doCPY(address(vLo, vHi)); return 4})\n\nconst doDEC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), -1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('DEC', MODE.IMPLIED, 0x3A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, -1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('DEC', MODE.ZP_REL, 0xC6, 2, (vZP) => {doDEC(vZP); return 5})\nPCODE('DEC', MODE.ZP_X, 0xD6, 2, (vZP) => {doDEC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('DEC', MODE.ABS, 0xCE, 3, (vLo, vHi) => {doDEC(address(vLo, vHi)); return 6})\nPCODE('DEC', MODE.ABS_X, 0xDE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doDEC(addr)\n  return 7})\n\nPCODE('DEX', MODE.IMPLIED, 0xCA, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, -1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('DEY', MODE.IMPLIED, 0x88, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, -1);\n  checkStatus(s6502.YReg); return 2})\n\nconst doEOR = (addr: number) => {\n  s6502.Accum ^= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('EOR', MODE.IMM, 0x49, 2, (value) => {s6502.Accum ^= value; checkStatus(s6502.Accum); return 2})\nPCODE('EOR', MODE.ZP_REL, 0x45, 2, (vZP) => {doEOR(vZP); return 3})\nPCODE('EOR', MODE.ZP_X, 0x55, 2, (vZP) => {doEOR(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('EOR', MODE.ABS, 0x4D, 3, (vLo, vHi) => {doEOR(address(vLo, vHi)); return 4})\nPCODE('EOR', MODE.ABS_X, 0x5D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.ABS_Y, 0x59, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.IND_X, 0x41, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doEOR(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('EOR', MODE.IND_Y, 0x51, 2, (vZP) => doIndirectYinstruction(vZP, doEOR, false))\nPCODE('EOR', MODE.IND, 0x52, 2, (vZP) => doIndirectInstruction(vZP, doEOR, false))\n\nconst doINC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), 1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('INC', MODE.IMPLIED, 0x1A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, 1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('INC', MODE.ZP_REL, 0xE6, 2, (vZP) => {doINC(vZP); return 5})\nPCODE('INC', MODE.ZP_X, 0xF6, 2, (vZP) => {doINC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('INC', MODE.ABS, 0xEE, 3, (vLo, vHi) => {doINC(address(vLo, vHi)); return 6})\nPCODE('INC', MODE.ABS_X, 0xFE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doINC(addr)\n  return 7})\n\nPCODE('INX', MODE.IMPLIED, 0xE8, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, 1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('INY', MODE.IMPLIED, 0xC8, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, 1);\n  checkStatus(s6502.YReg); return 2})\n\nPCODE('JMP', MODE.ABS, 0x4C, 3, (vLo, vHi) => {setPC(twoByteAdd(vLo, vHi, -3)); return 3})\n// 65c02 - this fixes the 6502 indirect JMP bug across page boundaries\nPCODE('JMP', MODE.IND, 0x6C, 3, (vLo, vHi) => {const a = address(vLo, vHi);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\nPCODE('JMP', MODE.IND_X, 0x7C, 3, (vLo, vHi) => {const a = twoByteAdd(vLo, vHi, s6502.XReg);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nPCODE('JSR', MODE.ABS, 0x20, 3, (vLo, vHi) => {\n  // Push the (address - 1) of the next instruction\n  const PC2 = (s6502.PC + 2) % 65536\n  pushStack(\"JSR $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256));\n  pushStack(\"JSR\", PC2 % 256);\n  setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nconst doLDA = (addr: number) => {\n  s6502.Accum = memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('LDA', MODE.IMM, 0xA9, 2, (value) => {s6502.Accum = value; checkStatus(s6502.Accum); return 2})\nPCODE('LDA', MODE.ZP_REL, 0xA5, 2, (vZP) => {doLDA(vZP); return 3})\nPCODE('LDA', MODE.ZP_X, 0xB5, 2, (vZP) => {doLDA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDA', MODE.ABS, 0xAD, 3, (vLo, vHi) => {doLDA(address(vLo, vHi)); return 4})\nPCODE('LDA', MODE.ABS_X, 0xBD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.ABS_Y, 0xB9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.IND_X, 0xA1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doLDA(address(memGet(vZP), memGet((vZP + 1) % 256))); return 6})\nPCODE('LDA', MODE.IND_Y, 0xB1, 2, (vZP) => doIndirectYinstruction(vZP, doLDA, false))\nPCODE('LDA', MODE.IND, 0xB2, 2, (vZP) => doIndirectInstruction(vZP, doLDA, false))\n\nconst doLDX = (addr: number) => {\n  s6502.XReg = memGet(addr)\n  checkStatus(s6502.XReg)\n}\nPCODE('LDX', MODE.IMM, 0xA2, 2, (value) => {s6502.XReg = value; checkStatus(s6502.XReg); return 2})\nPCODE('LDX', MODE.ZP_REL, 0xA6, 2, (vZP) => {doLDX(vZP); return 3})\nPCODE('LDX', MODE.ZP_Y, 0xB6, 2, (vZP) => {doLDX(oneByteAdd(vZP, s6502.YReg)); return 4})\nPCODE('LDX', MODE.ABS, 0xAE, 3, (vLo, vHi) => {doLDX(address(vLo, vHi)); return 4})\nPCODE('LDX', MODE.ABS_Y, 0xBE, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDX(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLDY = (addr: number) => {\n  s6502.YReg = memGet(addr)\n  checkStatus(s6502.YReg)\n}\nPCODE('LDY', MODE.IMM, 0xA0, 2, (value) => {s6502.YReg = value; checkStatus(s6502.YReg); return 2})\nPCODE('LDY', MODE.ZP_REL, 0xA4, 2, (vZP) => {doLDY(vZP); return 3})\nPCODE('LDY', MODE.ZP_X, 0xB4, 2, (vZP) => {doLDY(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDY', MODE.ABS, 0xAC, 3, (vLo, vHi) => {doLDY(address(vLo, vHi)); return 4})\nPCODE('LDY', MODE.ABS_X, 0xBC, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDY(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLSR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 1) === 1)\n  v >>= 1\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('LSR', MODE.IMPLIED, 0x4A, 1, () => {setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum >>= 1; checkStatus(s6502.Accum); return 2})\nPCODE('LSR', MODE.ZP_REL, 0x46, 2, (vZP) => {doLSR(vZP); return 5})\nPCODE('LSR', MODE.ZP_X, 0x56, 2, (vZP) => {doLSR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('LSR', MODE.ABS, 0x4E, 3, (vLo, vHi) => {doLSR(address(vLo, vHi)); return 6})\nPCODE('LSR', MODE.ABS_X, 0x5E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLSR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('NOP', MODE.IMPLIED, 0xEA, 1, () => {return 2})\n\nconst doORA = (addr: number) => {\n  s6502.Accum |= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('ORA', MODE.IMM, 0x09, 2, (value) => {s6502.Accum |= value; checkStatus(s6502.Accum); return 2})\nPCODE('ORA', MODE.ZP_REL, 0x05, 2, (vZP) => {doORA(vZP); return 3})\nPCODE('ORA', MODE.ZP_X, 0x15, 2, (vZP) => {doORA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('ORA', MODE.ABS, 0x0D, 3, (vLo, vHi) => {doORA(address(vLo, vHi)); return 4})\nPCODE('ORA', MODE.ABS_X, 0x1D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.ABS_Y, 0x19, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.IND_X, 0x01, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doORA(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('ORA', MODE.IND_Y, 0x11, 2, (vZP) => doIndirectYinstruction(vZP, doORA, false))\nPCODE('ORA', MODE.IND, 0x12, 2, (vZP) => doIndirectInstruction(vZP, doORA, false))\n\nPCODE('PHA', MODE.IMPLIED, 0x48, 1, () => {pushStack(\"A\", s6502.Accum); return 3})\nPCODE('PHP', MODE.IMPLIED, 0x08, 1, () => {setBreak(); pushStack(\"S\", s6502.PStatus); return 3})\nPCODE('PHX', MODE.IMPLIED, 0xDA, 1, () => {pushStack(\"X\", s6502.XReg); return 3})\nPCODE('PHY', MODE.IMPLIED, 0x5A, 1, () => {pushStack(\"Y\", s6502.YReg); return 3})\nPCODE('PLA', MODE.IMPLIED, 0x68, 1, () => {s6502.Accum = popStack(); checkStatus(s6502.Accum); return 4})\nPCODE('PLP', MODE.IMPLIED, 0x28, 1, () => {setPStatus(popStack()); return 4})\nPCODE('PLX', MODE.IMPLIED, 0xFA, 1, () => {s6502.XReg = popStack(); checkStatus(s6502.XReg); return 4})\nPCODE('PLY', MODE.IMPLIED, 0x7A, 1, () => {s6502.YReg = popStack(); checkStatus(s6502.YReg); return 4})\n\nconst doROL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit0 = isCarry() ? 1 : 0;\n  setCarry((v & 128) === 128)\n  v = ((v << 1) % 256) | bit0\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROL', MODE.IMPLIED, 0x2A, 1, () => {const bit0 = isCarry() ? 1 : 0;\n  setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = ((s6502.Accum << 1) % 256) | bit0; checkStatus(s6502.Accum); return 2})\nPCODE('ROL', MODE.ZP_REL, 0x26, 2, (vZP) => {doROL(vZP); return 5})\nPCODE('ROL', MODE.ZP_X, 0x36, 2, (vZP) => {doROL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROL', MODE.ABS, 0x2E, 3, (vLo, vHi) => {doROL(address(vLo, vHi)); return 6})\nPCODE('ROL', MODE.ABS_X, 0x3E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doROR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit7 = isCarry() ? 128 : 0;\n  setCarry((v & 1) === 1)\n  v = (v >> 1) | bit7\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROR', MODE.IMPLIED, 0x6A, 1, () => {const bit7 = isCarry() ? 128 : 0;\n  setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum = (s6502.Accum >> 1) | bit7; checkStatus(s6502.Accum); return 2})\nPCODE('ROR', MODE.ZP_REL, 0x66, 2, (vZP) => {doROR(vZP); return 5})\nPCODE('ROR', MODE.ZP_X, 0x76, 2, (vZP) => {doROR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROR', MODE.ABS, 0x6E, 3, (vLo, vHi) => {doROR(address(vLo, vHi)); return 6})\nPCODE('ROR', MODE.ABS_X, 0x7E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('RTI', MODE.IMPLIED, 0x40, 1, () => {\n  setPStatus(popStack());\n  setPC(address(popStack(), popStack()) - 1); return 6})\n\nPCODE('RTS', MODE.IMPLIED, 0x60, 1, () => {setPC(address(popStack(), popStack())); return 6})\n\n// 300: F8 38 B8 A9 00 E9 00 D8 00\nconst doSBC_BCD = (value: number) => {\n  // On 65c02, do normal hex subtraction to set the carry & overflow flags.\n  const vtmp = 255 - value\n  let tmp = s6502.Accum + vtmp + (isCarry() ? 1 : 0)\n  const newCarry = (tmp >= 256)\n  const bothPositive = (s6502.Accum <= 127 && vtmp <= 127)\n  const bothNegative = (s6502.Accum >= 128 && vtmp >= 128)\n  setOverflow((tmp % 256) >= 128 ? bothPositive : bothNegative)\n\n  let ones = (s6502.Accum & 0x0F) - (value & 0x0F) + (isCarry() ? 0 : -1)\n  tmp = s6502.Accum - value + (isCarry() ? 0 : -1)\n  if (tmp < 0) {\n    tmp -= 0x60\n  }\n  if (ones < 0) {\n    tmp -= 0x06\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n  setCarry(newCarry)\n}\n\nconst doSBC = (addr: number) => {\n  if (BCD()) {\n    doSBC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(255 - memGet(addr))\n  }\n}\n\nPCODE('SBC', MODE.IMM, 0xE9, 2, (value) => {\n  if (BCD()) {doSBC_BCD(value)} else {doADC_HEX(255 - value)}\n  return 2 + BCD()})\nPCODE('SBC', MODE.ZP_REL, 0xE5, 2, (vZP) =>\n  {doSBC(vZP); return 3 + BCD()})\nPCODE('SBC', MODE.ZP_X, 0xF5, 2, (vZP) =>\n  {doSBC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS, 0xED, 3, (vLo, vHi) =>\n  {doSBC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS_X, 0xFD, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.ABS_Y, 0xF9, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.IND_X, 0xE1, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doSBC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('SBC', MODE.IND_Y, 0xF1, 2, (vZP) =>\n  doIndirectYinstruction(vZP, doSBC, true))\nPCODE('SBC', MODE.IND, 0xF2, 2, (vZP) =>\n  doIndirectInstruction(vZP, doSBC, true))\n\nPCODE('SEC', MODE.IMPLIED, 0x38, 1, () => {setCarry(); return 2})\nPCODE('SED', MODE.IMPLIED, 0xF8, 1, () => {setDecimal(); return 2})\nPCODE('SEI', MODE.IMPLIED, 0x78, 1, () => {setInterrupt(); return 2})\n\n// Zero Page     STA $44       $85  2   3\n// Zero Page,X   STA $44,X     $95  2   4\n// Absolute      STA $4400     $8D  3   4\n// Absolute,X    STA $4400,X   $9D  3   5\n// Absolute,Y    STA $4400,Y   $99  3   5\n// Indirect,X    STA ($44,X)   $81  2   6\n// Indirect,Y    STA ($44),Y   $91  2   6\nPCODE('STA', MODE.ZP_REL, 0x85, 2, (vZP) => {memSet(vZP, s6502.Accum); return 3})\nPCODE('STA', MODE.ZP_X, 0x95, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS, 0x8D, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS_X, 0x9D, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, s6502.Accum)\n  return 5})\nPCODE('STA', MODE.ABS_Y, 0x99, 3, (vLo, vHi) => {memSet(twoByteAdd(vLo, vHi, s6502.YReg), s6502.Accum); return 5})\nPCODE('STA', MODE.IND_X, 0x81, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  memSet(address(memGet(vZP), memGet(vZP + 1)), s6502.Accum); return 6})\nconst doSTA = (addr: number) => {\n  memSet(addr, s6502.Accum)\n}\n// STA ($FF),Y take 6 cycles, doesn't depend upon page boundary\nPCODE('STA', MODE.IND_Y, 0x91, 2, (vZP) => {doIndirectYinstruction(vZP, doSTA, false); return 6})\nPCODE('STA', MODE.IND, 0x92, 2, (vZP) => doIndirectInstruction(vZP, doSTA, false))\n\nPCODE('STX', MODE.ZP_REL, 0x86, 2, (vZP) => {memSet(vZP, s6502.XReg); return 3})\nPCODE('STX', MODE.ZP_Y, 0x96, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.YReg), s6502.XReg); return 4})\nPCODE('STX', MODE.ABS, 0x8E, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.XReg); return 4})\n\nPCODE('STY', MODE.ZP_REL, 0x84, 2, (vZP) => {memSet(vZP, s6502.YReg); return 3})\nPCODE('STY', MODE.ZP_X, 0x94, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.YReg); return 4})\nPCODE('STY', MODE.ABS, 0x8C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.YReg); return 4})\n\nPCODE('STZ', MODE.ZP_REL, 0x64, 2, (vZP) => {memSet(vZP, 0); return 3})\nPCODE('STZ', MODE.ZP_X, 0x74, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), 0); return 4})\nPCODE('STZ', MODE.ABS, 0x9C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), 0); return 4})\nPCODE('STZ', MODE.ABS_X, 0x9E, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, 0)\n  return 5})\n\nPCODE('TAX', MODE.IMPLIED, 0xAA, 1, () => {s6502.XReg = s6502.Accum; checkStatus(s6502.XReg); return 2})\nPCODE('TAY', MODE.IMPLIED, 0xA8, 1, () => {s6502.YReg = s6502.Accum; checkStatus(s6502.YReg); return 2})\nPCODE('TSX', MODE.IMPLIED, 0xBA, 1, () => {s6502.XReg = s6502.StackPtr; checkStatus(s6502.XReg); return 2})\nPCODE('TXA', MODE.IMPLIED, 0x8A, 1, () => {s6502.Accum = s6502.XReg; checkStatus(s6502.Accum); return 2})\nPCODE('TXS', MODE.IMPLIED, 0x9A, 1, () => {s6502.StackPtr = s6502.XReg; return 2})\nPCODE('TYA', MODE.IMPLIED, 0x98, 1, () => {s6502.Accum = s6502.YReg; checkStatus(s6502.Accum); return 2})\n\n// Undocumented 65c02 NOP's\n// http://www.6502.org/tutorials/65c02opcodes.html\n//       x2:     x3:     x4:     x7:     xB:     xC:     xF:\n//      -----   -----   -----   -----   -----   -----   -----\n// 0x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 1x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 2x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 3x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 4x:  2 2 .   1 1 .   2 3 g   1 1 a   1 1 .   . . .   1 1 c\n// 5x:  . . .   1 1 .   2 4 h   1 1 a   1 1 .   3 8 j   1 1 c\n// 6x:  2 2 .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 7x:  . . .   1 1 .   . . .   1 1 a   1 1 .   . . .   1 1 c\n// 8x:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// 9x:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Ax:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Bx:  . . .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Cx:  2 2 .   1 1 .   . . .   1 1 b   1 1 e   . . .   1 1 d\n// Dx:  . . .   1 1 .   2 4 h   1 1 b   1 1 f   3 4 i   1 1 d\n// Ex:  2 2 .   1 1 .   . . .   1 1 b   1 1 .   . . .   1 1 d\n// Fx:  . . .   1 1 .   2 4 h   1 1 b   1 1 .   3 4 i   1 1 d\nconst twoByteNops = [0x02, 0x22, 0x42, 0x62, 0x82, 0xC2, 0xE2]\ntwoByteNops.forEach(instr => {\n  PCODE('NOPX', MODE.IMPLIED, instr, 2, () => {return 2})\n});\nfor (let i = 0; i <= 15; i++) {\n  PCODE('NOPX', MODE.IMPLIED, 3 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 7 + 16 * i, 1, () => {return 1})\n  PCODE('NOPX', MODE.IMPLIED, 0xB + 16 * i, 1, () => {return 1})  \n  PCODE('NOPX', MODE.IMPLIED, 0xF + 16 * i, 1, () => {return 1})  \n}\nPCODE('NOPX', MODE.IMPLIED, 0x44, 2, () => {return 3})\nPCODE('NOPX', MODE.IMPLIED, 0x54, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xD4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xF4, 2, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0x5C, 3, () => {return 8})\nPCODE('NOPX', MODE.IMPLIED, 0xDC, 3, () => {return 4})\nPCODE('NOPX', MODE.IMPLIED, 0xFC, 3, () => {return 4})\n","\n// export const code = ''\nexport const code = `\n        ORG   $300\n; set up Mockingboard\n        LDA #$C0    ; enable Mockingboard\n        STA $C030\n        LDA #$80    ; select channel 0\n        STA $C010\n        LDA #$00    ; set frequency LSB to 0\n        STA $C012\n        LDA #$05    ; set frequency MSB to 5 (261 Hz)\n        STA $C013\n        LDA #$0F    ; set volume to maximum\n        STA $C015\n\n; play notes\n        LDA #$80    ; start sound\n        STA $C010\n        LDX #20     ; loop for 20 cycles (approx. 1 second)\nLOOP    DEX\n        BNE LOOP\n        LDA #$00    ; stop sound\n        STA $C010\n\n; end of program\n        RTS\n`\nexport const code2 = `\n         ORG   $300\nFREQ     EQU   $350\nPLSWIDTH EQU   $352\n\n         LDA   #$FF\n         STA   FREQ\n         LDA   #$80\n         STA   PLSWIDTH\nPLAY     LDA   $C030\n         LDY   PLSWIDTH\nPULSE    DEY\n         BNE   PULSE\n         LDA   $C030\n         LDX   FREQ\nCOUNTDN  DEX\n         BNE   COUNTDN\n         JSR   READKB\n         JMP   PLAY\n\nINCR     INC   FREQ\n         RTS\n\nDECR     DEC   FREQ\n         RTS\n\nPULSEINC DEC   PLSWIDTH\n         INC   FREQ\n         RTS\n\nPULSEDEC INC   PLSWIDTH\n         DEC   FREQ\n         RTS\n\nREADKB   LDA   $C000\n         STA   $C010   \n         CMP   #$88\n         BEQ   INCR\n         CMP   #$95\n         BEQ   DECR\n         CMP   #$C1\n         BEQ   PULSEINC\n         CMP   #$DA\n         BEQ   PULSEDEC\n         RTS\n`\n","export const disk2driver = [0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C,0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10,0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD,0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0,0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,0x20,0xA8,0xFC,0x88,0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C,0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3,0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0,0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD,0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40,0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00,0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5,0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00]\n// export const slot_disk2=`oiCgAKIDhjyKCiQ88BAFPEn/KX6wCErQ+5idVgPI6BDlIFj/ur0AAQoKCgqFK6q9\n// jsC9jMC9isC9icCgUL2AwJgpAwoFK6q9gcCpViCo/IgQ64UmhT2FQakIhScYCL2M\n// wBD7SdXQ972MwBD7yarQ8+q9jMAQ+8mW8AkokN9JrfAl0NmgA4VAvYzAEPsqhTy9\n// jMAQ+yU8iNDsKMU90L6lQMVB0Liwt6BWhDy8jMAQ+1nWAqQ8iJkAA9DuhDy8jMAQ\n// +1nWAqQ8kSbI0O+8jMAQ+1nWAtCHoACiVsow+7EmXgADKl4AAyqRJsjQ7uYn5j2l\n// Pc0ACKYrkNtMAQgAAAAAAA==`\n","// Chris Torrence, 2022\nimport { Buffer } from \"buffer\"\nimport { passMachineState } from \"./worker2main\"\nimport { s6502, set6502State, reset6502, pcodes,\n  incrementPC, cycleCount, setCycleCount, stack } from \"./instructions\"\nimport { STATE, getProcessorStatus, getInstrString, toHex } from \"./utility\"\nimport { getDriveSaveState, restoreDriveSaveState, doResetDrive, doPauseDrive } from \"./drivestate\"\n// import { slot_omni } from \"./roms/slot_omni_cx00\"\nimport { SWITCHES } from \"./softswitches\";\nimport { memory, memGet, getTextPage, getHires, specialJumpTable, setSlotDriver, memoryReset, updateAddressTables } from \"./memory\"\nimport { setButtonState, handleGamepad } from \"./joystick\"\nimport { parseAssembly } from \"./assembler\";\nimport { code } from \"./assemblycode\"\nimport { disk2driver } from \"./roms/slot_disk2_cx00\"\n\n// let timerID: any | number = 0\nlet startTime = 0\nlet prevTime = 0\nlet normalSpeed = true\nlet speed = 0\nlet refreshTime = 16.6881 // 17030 / 1020.488\nlet timeDelta = 0\nlet cpuState = STATE.IDLE\nlet iRefresh = 0\nlet saveTimeSlice = false\nlet iSaveState = 0\nlet iTempState = 0\nlet maxState = 60\nlet saveStates = Array<string>(maxState).fill('')\n// let prevMemory = Buffer.from(mainMem)\n// let DEBUG_ADDRESS = -1 // 0x9631\nlet doDebug = false\n// let doDebugZeroPage = false\nconst instrTrail = new Array<string>(1000)\nlet posTrail = 0\nlet breakpoint = -1\nlet runToRTS = false\n\nconst getApple2State = (): SAVEAPPLE2STATE => {\n  const softSwitches: { [name: string]: boolean } = {}\n  for (const key in SWITCHES) {\n    softSwitches[key] = SWITCHES[key as keyof typeof SWITCHES].isSet\n  }\n  const membuffer = Buffer.from(memory)\n  // let memdiff: { [addr: number]: number } = {};\n  // for (let i = 0; i < memory.length; i++) {\n  //   if (prevMemory[i] !== memory[i]) {\n  //     memdiff[i] = memory[i]\n  //   }\n  // }\n  // prevMemory = memory\n  return {\n    s6502: s6502,\n    softSwitches: softSwitches,\n    memory: membuffer.toString(\"base64\"),\n    memAux: '',\n    memc000: '',\n  }\n}\n\nconst setApple2State = (newState: SAVEAPPLE2STATE) => {\n  set6502State(newState.s6502)\n  const softSwitches: { [name: string]: boolean } = newState.softSwitches\n  for (const key in softSwitches) {\n    const keyTyped = key as keyof typeof SWITCHES\n    try {\n      SWITCHES[keyTyped].isSet = softSwitches[key]    \n    } catch (error) {\n    }\n  }\n  memory.set(Buffer.from(newState.memory, \"base64\"))\n  updateAddressTables()\n  // mainMem.set(Buffer.from(newState.memory, \"base64\"))\n  // memC000.set(Buffer.from(newState.memc000, \"base64\"))\n  // if (newState.memAux !== undefined) {\n  //   auxMem.set(Buffer.from(newState.memAux, \"base64\"))\n  // }\n}\n\n// export const doRequestSaveState = () => {\n//   passSaveState(doGetSaveState())\n// }\n\nexport const doGetSaveState = () => {\n  const state = { state6502: getApple2State(), driveState: getDriveSaveState() }\n  return JSON.stringify(state)\n//  return Buffer.from(compress(JSON.stringify(state)), 'ucs2').toString('base64')\n}\n\nexport const doRestoreSaveState = (sState: string) => {\n  const state = JSON.parse(sState);\n  setApple2State(state.state6502 as SAVEAPPLE2STATE)\n  restoreDriveSaveState(state.driveState)\n  updateExternalMachineState()\n}\n\n// const testTiming = () => {\n//   let t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memGet(i)    \n//     }\n//   }\n//   let tdiff = performance.now() - t0\n//   console.log(`memGet time = ${tdiff}`)\n//   t0 = performance.now()\n//   for (let j = 0; j < 10000; j++) {\n//     for (let i = 0; i < 0xBFFF; i++) {\n//       memSet(i, 255)    \n//     }\n//   }\n//   tdiff = performance.now() - t0\n//   console.log(`memSet time = ${tdiff}`)\n// }\n\nconst doBoot = () => {\n  setCycleCount(0)\n  memoryReset()\n  setSlotDriver(6, Uint8Array.from(disk2driver))\n  if (code.length > 0) {\n    let pcode = parseAssembly(0x300, code.split(\"\\n\"));\n    memory.set(pcode, 0x300);\n  }\n//  testTiming()\n  doReset()\n}\n\nconst doReset = () => {\n//  memoryReset()\n  for (const key in SWITCHES) {\n    const keyTyped = key as keyof typeof SWITCHES\n    SWITCHES[keyTyped].isSet = false\n  }\n  SWITCHES.TEXT.isSet = true\n  // Reset banked RAM\n  memGet(0xC082)\n  reset6502()\n  doResetDrive()\n  setButtonState()\n}\n\nexport const doSetNormalSpeed = (normal: boolean) => {\n  normalSpeed = normal\n  refreshTime = normalSpeed ? 16.6881 : 0\n  resetRefreshCounter()\n}\n\nexport const doGoBackInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  // if this is the first time we're called, make sure our current\n  // state is up to date\n  if (iTempState === iSaveState) {\n    saveStates[iSaveState] = doGetSaveState()\n  }\n  const newTmp = (iTempState + maxState - 1) % maxState\n  if (newTmp === iSaveState || saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doGoForwardInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  if (iTempState === iSaveState) {\n    return\n  }\n  const newTmp = (iTempState + 1) % maxState\n  if (saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doSaveTimeSlice = () => {\n  // Set a flag and save our slice at the end of the next 6502 display cycle.\n  // Otherwise we risk saving in the middle of a keystroke.\n  saveTimeSlice = true\n}\n\nexport const doStepInto = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  processInstruction(true)\n  cpuState = STATE.PAUSED\n  updateExternalMachineState()\n}\n\nexport const doStepOver = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  if (memGet(s6502.PC) === 0x20) {\n    // If we're at a JSR then briefly step in, then step out.\n    processInstruction(true)\n    doStepOut()\n  } else {\n    // Otherwise just do a single step.\n    doStepInto()\n  }\n}\n\nexport const doStepOut = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  runToRTS = true\n  doSetCPUState(STATE.RUNNING)\n}\n\nconst resetRefreshCounter = () => {\n  iRefresh = 0\n  prevTime = performance.now()\n  startTime = prevTime\n}\n\nexport const doSetCPUState = (cpuStateIn: STATE) => {\n  cpuState = cpuStateIn\n  if (cpuState === STATE.PAUSED || cpuState === STATE.RUNNING) {\n    doPauseDrive(cpuState === STATE.RUNNING)\n  }\n  updateExternalMachineState()\n  resetRefreshCounter()\n  if (speed === 0) {\n    doAdvance6502Timer()\n  }\n}\n\nexport const doSetDebug = (debug: boolean) => {\n  doDebug = debug\n}\n\nexport const doSetBreakpoint = (breakpt: number) => {\n  breakpoint = breakpt\n//  if (breakpoint !== 0) doDebug = true\n}\n\nlet ndebug = 0\n\nexport const processInstruction = (step = false) => {\n  let cycles = 0\n  let PC1 = s6502.PC\n  const instr = memGet(s6502.PC)\n  const vLo = s6502.PC < 0xFFFF ? memGet(s6502.PC + 1) : 0\n  const vHi = s6502.PC < 0xFFFE ? memGet(s6502.PC + 2) : 0\n  let code = pcodes[instr]\n  if (!code) {\n    code = pcodes[0xEA]\n  }\n  if (code) {\n    if (PC1 === breakpoint && !step) {\n      cpuState = STATE.PAUSED\n      return -1\n    }\n    // HACK\n    const fn = specialJumpTable.get(PC1)\n    if (fn && !SWITCHES.INTCXROM.isSet) {\n      fn()\n    }\n    // END HACK\n//    if (PC1 === 0xC7C3) doDebug = true\n    cycles = code.execute(vLo, vHi)\n    let out = '----'\n    // Do not output during the Apple II's WAIT subroutine\n    if ((PC1 < 0xFCA8 || PC1 > 0xFCB3) && PC1 < 0xFF47) {\n      const cc = (cycleCount.toString() + '      ').slice(0, 10)\n      const ins = getInstrString(code, vLo, vHi, PC1) + '            '\n      out = `${cc}  ${ins.slice(0, 22)}  ${getProcessorStatus(s6502)}`\n    }\n    instrTrail[posTrail] = out\n    posTrail = (posTrail + 1) % instrTrail.length\n    if (doDebug) {\n      if (instr === 0) doDebug = false\n      console.log(out)\n      ndebug++\n      if (ndebug > 10000) {\n        doDebug = false\n        cpuState = STATE.PAUSED\n        return -1\n      }\n//      console.log(getStackString())\n//      if (doDebugZeroPage) {\n//        debugZeroPage(mainMem.slice(0, 256))\n//      }\n    }\n    // if (doDebug) {\n    //   instrTrail.slice(posTrail).forEach(s => console.log(s));\n    //   instrTrail.slice(0, posTrail).forEach(s => console.log(s));\n    //   console.log(\"stop!!!\")\n    // }\n    setCycleCount(cycleCount + cycles)\n    incrementPC(code.PC)\n    if (code.pcode === 0x60 && runToRTS) {\n      runToRTS = false\n      cpuState = STATE.PAUSED\n      return -1\n    }\n  }\n  return cycles\n}\n\nexport const getStackString = () => {\n  const stackvalues = memory.slice(256, 512)\n  const result = new Array<string>()\n  for (let i = 0xFF; i > s6502.StackPtr; i--) {\n    let value = \"$\" + toHex(stackvalues[i])\n    let cmd = stack[i]\n    if ((stack[i].length > 3) && (i - 1) > s6502.StackPtr) {\n      if (stack[i-1] === \"JSR\" || stack[i-1] === \"BRK\") {\n        i--\n        value += toHex(stackvalues[i])\n      } else {\n        cmd = ''\n      }\n    }\n    value = (value + \"   \").substring(0, 6)\n    result.push(toHex(0x100 + i, 4) + \": \" + value + cmd)\n  }\n  return result\n}\n\nconst getDebugString = () => {\n  return ''\n  // const status = Array<String>(16).fill(\"\")\n  // // const stackString = getStackString()\n  // // for (let i = 0; i < Math.min(20, stackString.length); i++) {\n  // //   status[i] = stackString[i]\n  // // }\n  // for (let j = 0; j < 16; j++) {\n  //   let s = toHex(16 * j) + \":\"\n  //   for (let i = 0; i < 16; i++) {\n  //     s += \" \" + toHex(mainMem[j * 16 + i])\n  //   }\n  //   status[j] = s\n  // }\n  // return status.join('\\n')\n}\n\nconst updateExternalMachineState = () => {\n  const state: MachineState = {\n    state: cpuState,\n    speed: speed.toFixed(2),\n    altChar: SWITCHES.ALTCHARSET.isSet,\n    textPage: getTextPage(),\n    lores: getTextPage(true),\n    hires: getHires(),\n    zeroPageStack: getDebugString(),\n    button0: SWITCHES.PB0.isSet,\n    button1: SWITCHES.PB1.isSet,\n  }\n  passMachineState(state)\n}\n\nconst doAdvance6502 = () => {\n  const newTime = performance.now()\n  timeDelta = newTime - prevTime\n  if (timeDelta < refreshTime) return\n  prevTime = newTime\n  if (cpuState === STATE.IDLE || cpuState === STATE.PAUSED) {\n    return;\n  }\n  if (cpuState === STATE.NEED_BOOT) {\n    doBoot();\n    doSetCPUState(STATE.RUNNING)\n  } else if (cpuState === STATE.NEED_RESET) {\n    doReset();\n    doSetCPUState(STATE.RUNNING)\n  }\n  let cycleTotal = 0\n  while (true) {\n    const cycles = processInstruction();\n    if (cycles < 0) break\n    cycleTotal += cycles;\n    if (cycleTotal >= 17030) {\n      break;\n    }\n  }\n  iRefresh++\n  speed = (iRefresh * 17.030) / (performance.now() - startTime)\n  updateExternalMachineState()\n  if (saveTimeSlice) {\n    saveTimeSlice = false\n    iSaveState = (iSaveState + 1) % maxState\n    iTempState = iSaveState\n//    console.log(\"iSaveState \" + iSaveState)\n    saveStates[iSaveState] = doGetSaveState()\n  }\n}\n\nconst doAdvance6502Timer = () => {\n  doAdvance6502()\n  const iRefreshFinish = (iRefresh + 5)\n  while (cpuState === STATE.RUNNING && iRefresh !== iRefreshFinish) {\n    doAdvance6502()\n  }\n  if (cpuState === STATE.RUNNING) {\n    handleGamepad()\n    setTimeout(doAdvance6502Timer, 0)\n  } else {\n    setTimeout(doAdvance6502Timer, 10)\n  }\n}\n","import { doSetCPUState, doSetBreakpoint,\n  doGetSaveState, doRestoreSaveState, doSetNormalSpeed,\n  doGoBackInTime, doGoForwardInTime, doSetDebug,\n  doStepInto, doStepOver, doStepOut } from \"./motherboard\";\nimport { doSetDriveProps } from \"./drivestate\"\nimport { sendTextToEmulator } from \"./keyboard\"\nimport { pressAppleCommandKey, setGamepad } from \"./joystick\"\nimport { DRIVE } from \"./utility\";\n\n// This file must have worker types, but not DOM types.\n// The global should be that of a dedicated worker.\n\n// This fixes `self`'s type.\ndeclare var self: DedicatedWorkerGlobalScope;\nexport {};\n\nconst doPostMessage = (msg: string, payload: any) => {\n  self.postMessage({msg, payload});\n}\n\nexport const passMachineState = (state: MachineState) => {\n  doPostMessage(\"MACHINE_STATE\", state)\n}\n\nexport const passClickSpeaker = (cycleCount: number) => {\n  doPostMessage(\"CLICK\", cycleCount)\n}\n\nexport const passDriveProps = (props: DriveProps) => {\n  doPostMessage(\"DRIVE_PROPS\", props)\n}\n\nexport const passDriveSound = (sound: DRIVE) => {\n  doPostMessage(\"DRIVE_SOUND\", sound)\n}\n\nconst passSaveState = (saveState: string) => {\n  doPostMessage(\"SAVE_STATE\", saveState)\n}\n\nself.onmessage = (e: MessageEvent) => {\n  switch (e.data.msg) {\n    case \"STATE\":\n      doSetCPUState(e.data.payload)\n      break;\n    case \"DEBUG\":\n      doSetDebug(e.data.payload)\n      break;\n    case \"BREAKPOINT\":\n      doSetBreakpoint(e.data.payload)\n      break;\n    case \"STEP_INTO\":\n      doStepInto()\n      break;\n    case \"STEP_OVER\":\n      doStepOver()\n      break;\n    case \"STEP_OUT\":\n      doStepOut()\n      break;\n    case \"SPEED\":\n      doSetNormalSpeed(e.data.payload)\n      break;\n    case \"TIME_TRAVEL\":\n      if (e.data.payload === \"FORWARD\") {\n          doGoForwardInTime()\n      } else {\n          doGoBackInTime()\n      }\n      break;\n    case \"RESTORE_STATE\":\n      doRestoreSaveState(e.data.payload)\n      break;\n    case \"KEYBUFFER\":\n      sendTextToEmulator(e.data.payload)\n      break;\n    case \"APPLE_PRESS\":\n      pressAppleCommandKey(true, e.data.payload)\n      break;\n    case \"APPLE_RELEASE\":\n      pressAppleCommandKey(false, e.data.payload)\n      break;\n    case \"GET_SAVE_STATE\":\n      passSaveState(doGetSaveState())\n      break;\n    case \"DRIVE_PROPS\":\n      const props = e.data.payload as DriveProps\n      doSetDriveProps(props)\n      break;\n    case \"GAMEPAD\":\n      setGamepad(e.data.payload)\n      break\n    default:\n      break;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [669], function() { return __webpack_require__(1645); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"14135427\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t645: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkapple2ts\"] = self[\"webpackChunkapple2ts\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(669).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["STATE","COLOR_MODE","DRIVE","MODE","isRelativeInstr","instr","startsWith","toHex","value","ndigits","arguments","length","undefined","toString","toUpperCase","slice","getProcessorStatus","s6502","concat","Accum","XReg","YReg","PStatus","P","StackPtr","getInstrString","code","vLo","vHi","PC","result","_modeString","mode","prefix","suffix","IMM","ZP_X","ABS_X","ZP_Y","ABS_Y","IND","IND_X","IND_Y","modeString","_modeString2","_slicedToArray","name","addr","address","toASCII","Uint8Array","s","split","map","char","charCodeAt","uint32toBytes","n","replaceSuffix","fname","i","lastIndexOf","substring","keyBuffer","popKey","memGetC000","key","memSetC000","doSaveTimeSlice","prevKey","addToBuffer","text","tPrev","addToBufferDebounce","timeout","t","performance","now","write_byte","woz","position","shift","byte_position","write_4_and_4","write_sync","encode_6_and_2","src","six_and_two_mapping","dest","bit_reverse","c","location","serialise_track","track_number","is_prodos","track_position","fill","sector","ls","contents","crcTable","Uint32Array","makeCRCTable","k","decodeWoz2","driveState","diskData","isWoz2","find","isWriteProtected","crc","storedCRC","Math","pow","actualCRC","data","offset","crc32","alert","filename","htrack","tmap_index","tmap_offset","trk","trackStart","trackNbits","decodeDSK","newData","dskData","isPO","set","trackInput","trackData","convertdsk2woz","toLowerCase","endsWith","diskHasChanges","int32","isHardDriveImage","f","decodeDiskData","hardDrive","status","nbytes","magic","String","fromCharCode","console","error","decode2MG","isDSK","isWoz1","decodeWoz1","motorOffTimeout","doResetDiskDrive","SWITCHES","doMotorTimeout","halftrack","prevHalfTrack","doPauseDiskDrive","ds","getCurrentDriveState","motorRunning","startMotor","passDriveSound","MOTOR_OFF","moveHead","TRACK_END","TRACK_SEEK","passData","trackLocation","floor","pickbit","clearbit","getNextBit","dd","bit","byte","b","dataRegister","prevCycleCount","doWriteBit","fileOffset","doWriteByte","delta","debugCache","push","clearTimeout","MOTOR_ON","dumpData","handleDriveSoftSwitches","getCurrentDriveData","cycleCount","writeMode","getNextByte","setTimeout","stopMotor","currentDrive","dsOld","setCurrentDrive","ps","a","ascend","currentPhase","descend","isSet","parseNumberOptionalAddressMode","operand","IMPLIED","ABS","ZP_REL","parseInt","labels","getOperandModeValue","pc","pass","match","labelOperand","label","operation","replace","splitOperand","isImmediate","Error","parseOnce","start","instructions","prevLabel","forEach","line","trimEnd","codeLine","splitLine","parts","_parseNumberOptionalA","_parseNumberOptionalA2","handleLabel","_getOperandModeValue","_getOperandModeValue2","pcodes","findIndex","newInstructions","pcode","trunc","getHexCodesForInstruction","apply","_toConsumableArray","parseAssembly","timerID","driverAddr","code1","prodos8driver","driver","pcode1","pcode2","processSmartPortAccess","getHardDriveState","getHardDriveData","S","callAddr","memGet","spCommand","spParamList","unitNumber","bufferAddr","setCarry","statusCode","memSet","blockStart","dataRead","setDataBlock","processHardDriveBlockAccess","block","dataLen","setX","setY","nblocks","dataWrite","getDataBlock","initDriveState","drive","Array","driveData","dprops","passDriveProps","getDriveSaveState","Buffer","doSetDriveProps","props","enable","slot","setSlotDriver","enableHardDrive","gamePad","maxTimeoutCycles","paddle0timeout","paddle1timeout","countStart","leftAppleDown","rightAppleDown","leftButtonDown","rightButtonDown","isRightDown","setButtonState","pressAppleCommandKey","isDown","left","memSet1","defaultButtons","aztec","funcs","setGamepad","gamePadIn","includes","nearZero","sswitch","NewSwitch","offAddr","isSetAddr","onAddr","writeOnly","setFunc","rand","random","STORE80","RAMRD","RAMWRT","INTCXROM","ALTZP","SLOTC3ROM","COLUMN80","ALTCHARSET","KBRDSTROBE","keyvalue","BSRBANK2","BSRREADRAM","CASSOUT","SPEAKER","passClickSpeaker","EMUBYTE","TEXT","MIXED","PAGE2","HIRES","AN0","AN1","AN2","AN3","CASSIN1","PB0","PB1","PB2","JOYSTICK12","diff","checkJoystickValues","CASSIN2","FASTCHIP_LOCK","FASTCHIP_ENABLE","FASTCHIP_SPEED","JOYSTICKRESET","resetJoystick","LASER128EX","READBSR2","WRITEBSR2","OFFBSR2","RDWRBSR2","READBSR1","WRITEBSR1","OFFBSR1","RDWRBSR1","DRVSM0","DRVSM1","DRVSM2","DRVSM3","DRVSEL","DRVDATA","DRVWRITE","checkSoftSwitches","calledFromMemSet","handleBankedRAM","sswitch1","memory","addressGetTable","addressSetTable","AUXindex","ROMstartMinusC000","SLOTstartMinusC100","AUXstart","updateAddressTables","offsetAuxRead","offsetAuxWrite","offsetPage2","offsetTextPageRead","offsetTextPageWrite","offsetHgrPageRead","offsetHgrPageWrite","updateMainAuxMemoryTable","offsetZP","updateReadBankSwitchedRamTable","updateWriteBankSwitchedRamTable","ROMindexMinusC0","updateSlotRomTable","specialJumpTable","Map","jump","fn","memoryReset","rom64","rom","memGetSoftSwitch","page","shifted","repeat","TEXT_PAGE1","TEXT_PAGE2","getTextPage","jstart","jend","is80column","pageOffset","textPage","j","joffset","getHires","doubleRes","nlines","hgrPage","matchMemory","setCycleCount","cycles","incrementPC","setPC","assert","isNaN","setPStatus","stack","pushStack","call","popStack","isCarry","isZero","setZero","setInterrupt","isDecimal","BCD","setDecimal","setBreak","isOverflow","setOverflow","isNegative","setNegative","checkStatus","doBranch","takeBranch","oldPC","pageBoundary","oneByteAdd","twoByteAdd","addr1","addr2","PCODE","execute","doIndirectYinstruction","vZP","doInstruction","addBCD","doIndirectInstruction","doADC_BCD","ones","tmp","bothPositive","bothNegative","doADC_HEX","doADC","vOffset","doAND","doASL","v","doBit","PC2","doCMP","doCMP1","doCPX","doCPY","doDEC","doEOR","doINC","doLDA","doLDX","doLDY","doLSR","doORA","doROL","bit0","doROR","bit7","doSBC_BCD","vtmp","newCarry","doSBC","doSTA","disk2driver","startTime","prevTime","speed","refreshTime","cpuState","IDLE","iRefresh","saveTimeSlice","iSaveState","iTempState","saveStates","doDebug","instrTrail","posTrail","breakpoint","runToRTS","getApple2State","softSwitches","membuffer","memAux","memc000","setApple2State","newState","new6502","keyTyped","doGetSaveState","state","state6502","JSON","stringify","doRestoreSaveState","sState","parse","updateExternalMachineState","doBoot","from","doReset","doStepInto","PAUSED","processInstruction","doStepOut","doSetCPUState","RUNNING","resetRefreshCounter","cpuStateIn","doPauseDrive","doAdvance6502Timer","ndebug","step","PC1","get","out","cc","ins","log","toFixed","altChar","lores","hires","zeroPageStack","button0","button1","passMachineState","doAdvance6502","newTime","NEED_BOOT","NEED_RESET","cycleTotal","iRefreshFinish","connected","xstick","axes","ystick","abs","dist","sqrt","clip","max","min","buttons","button","handleGamepad","doPostMessage","msg","payload","self","postMessage","sound","onmessage","e","debug","breakpt","normal","newTmp","doGoForwardInTime","doGoBackInTime","mapping","sendTextToEmulator","saveState","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}