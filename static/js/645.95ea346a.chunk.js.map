{"version":3,"file":"static/js/645.95ea346a.chunk.js","mappings":"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","sources":["emulator/utility.ts","emulator/keyboard.ts","emulator/convertdsk2woz.ts","emulator/decodedisk.ts","emulator/diskdata.ts","emulator/drivestate.ts","emulator/joystick.ts","emulator/softswitches.ts","emulator/memory.ts","emulator/roms/slot_disk2_cx00.ts","emulator/roms/rom_2e.ts","emulator/instructions.ts","emulator/assembler.ts","emulator/assemblycode.ts","emulator/harddrivedata.ts","emulator/motherboard.ts","emulator/worker2main.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import { KeyboardEvent } from \"react\"\n\nexport enum STATE {\n  IDLE,\n  NEED_BOOT,\n  NEED_RESET,\n  RUNNING,\n  PAUSED,\n}\n\nexport enum DRIVE {\n  MOTOR_OFF,\n  MOTOR_ON,\n  TRACK_END,\n  TRACK_SEEK,\n}\n\nexport enum MODE {\n  IMPLIED,  // BRK\n  IMM,      // LDA #$01\n  ZP_REL,   // LDA $C0 or BCC $FF\n  ZP_X,     // LDA $C0,X\n  ZP_Y,     // LDX $C0,Y\n  ABS,      // LDA $1234\n  ABS_X,    // LDA $1234,X\n  ABS_Y,    // LDA $1234,Y\n  IND_X,    // LDA ($FF,X) or JMP ($1234,X)\n  IND_Y,    // LDA ($FF),Y\n  IND       // JMP ($1234) or LDA ($C0)\n}\n\n// A hack to determine if this is a relative instruction.\nexport const isRelativeInstr = (instr: string) => instr.startsWith('B') && instr !== \"BIT\" && instr !== \"BRK\"\n\n// export const toBinary = (value: number, ndigits = 8) => {\n//   return (\"0000000000000000\" + value.toString(2)).slice(-ndigits)\n// }\n\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\n\nexport const toHex = (value: number, ndigits = 2) => {\n  if (value > 0xFF) {\n    ndigits = 4\n  }\n  return (\"0000\" + value.toString(16).toUpperCase()).slice(-ndigits)\n}\n\nconst getPStatusString = (P: number) => {\n  const result = ((P & 0x80) ? 'N' : 'n') +\n    ((P & 0x40) ? 'V' : 'v') +\n    '-' +\n    ((P & 0x10) ? 'B' : 'b') +\n    ((P & 0x8) ? 'D' : 'd') +\n    ((P & 0x4) ? 'I' : 'i') +\n    ((P & 0x2) ? 'Z' : 'z') +\n    ((P & 0x1) ? 'C' : 'c')\n  return result\n}\n\nexport const getProcessorStatus = (s6502: STATE6502) => {\n  return (\n    `A=${toHex(s6502.Accum)} X=${toHex(s6502.XReg)} ` +\n    `Y=${toHex(s6502.YReg)} P=${toHex(s6502.PStatus)} ${getPStatusString(s6502.PStatus)} S=${toHex(s6502.StackPtr)}`\n  )\n}\n\nconst modeString = (mode: MODE) => {\n  let prefix = \"\"\n  let suffix = \"\"\n  switch (mode) {\n    case MODE.IMM:\n      prefix = \"#\"\n      break\n    case MODE.ZP_X:\n    case MODE.ABS_X:\n      suffix = \",X\"\n      break\n    case MODE.ZP_Y:\n    case MODE.ABS_Y:\n      suffix = \",Y\"\n      break\n    case MODE.IND:\n      prefix = \"(\"\n      suffix = \")\"\n      break\n    case MODE.IND_X:\n      prefix = \"(\"\n      suffix = \",X)\"\n      break\n    case MODE.IND_Y:\n      prefix = \"(\"\n      suffix = \"),Y\"\n      break\n  }\n  return [prefix, suffix]\n}\n\nexport const getInstrString = (code: PCodeInstr, vLo: number, vHi: number, PC: number) => {\n  let result = `${toHex(PC,4)}`\n  if (code) {\n    let [prefix, suffix] = modeString(code.mode)\n    if (code.PC >= 2) {\n      prefix = `   ${code.name}   ${prefix}$`\n    }\n    if (isRelativeInstr(code.name)) {\n      // The extra +2 is for the branch instruction itself\n      const addr = PC + 2 + (vLo > 127 ? vLo - 256 : vLo)\n      result += `${prefix}${toHex(addr, 4)}${suffix}`\n    } else {\n      switch (code.PC) {\n        case 1:\n          result += `   ${code.name}`\n          break\n        case 2:\n          result += `${prefix}${toHex(vLo)}${suffix}`\n          break\n        case 3:\n          result += `${prefix}${toHex(address(vLo, vHi),4)}${suffix}`\n          break\n      }\n    }\n  } else {\n    result += \"         ???\"\n  }\n  return result\n}\n\nexport const convertAppleKey = (e: KeyboardEvent, uppercase=false) => {\n  let key = 0\n  if (e.key.length === 1) {\n    if (e.metaKey || e.altKey) {\n      return 0\n    }\n    key = e.key.charCodeAt(0)\n    if (e.ctrlKey) {\n      if (key >= 0x40 && key <= 0x7E) {\n        key &= 0b00011111\n      } else {\n        return 0\n      }\n    } else if (uppercase) {\n      key = e.key.toUpperCase().charCodeAt(0)\n    }\n  } else {\n    const keymap: { [key: string]: number } = {\n      Enter: 13,\n      ArrowRight: 21,\n      ArrowLeft: 8,\n      Backspace: 8,\n      ArrowUp: 11,\n      ArrowDown: 10,\n      Escape: 27,\n      Shift: -1,\n      Control: -1\n    };\n    if (e.key === \"Backspace\" && e.shiftKey) {\n      key = 0x7F\n    } else if (e.key in keymap) {\n      key = keymap[e.key]\n    }\n  }\n  return key\n};\n\nexport const getPrintableChar = (value: number, isAltCharSet: boolean) => {\n  let v1 = value\n  if (isAltCharSet) {\n    if ((v1 >= 0 && v1 <= 31) || (v1 >= 64 && v1 <= 95)) {\n      v1 += 64\n    } else if (v1 >= 128 && v1 <= 159) {\n      v1 -= 64\n    } else if (v1 >= 160) {\n      v1 -= 128\n    }\n  } else {\n    // Shift Ctrl chars and second ASCII's into correct ASCII range\n    if ((v1 >= 0 && v1 <= 0x1f) || (v1 >= 0x60 && v1 <= 0x9f)) {\n      v1 += 64\n    }\n    v1 &= 0b01111111\n  }\n  return v1\n}\n\nlet zpPrev = new Uint8Array(1)\nexport const debugZeroPage = (zp: Uint8Array) => {\n  if (zpPrev.length === 1) zpPrev = zp\n  let diff = \"\"\n  for (let i = 0; i < 256; i++) {\n    if (zp[i] !== zpPrev[i]) {\n      diff += \" \" + toHex(i) + \":\" + toHex(zpPrev[i]) + \">\" + toHex(zp[i])\n    }\n  }\n  if (diff !== \"\") console.log(diff)\n  zpPrev = zp\n}\n\nexport const toASCII = (s: String) => s.split('').map(char => char.charCodeAt(0))\nexport const uint16toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF]\nexport const uint32toBytes = (n: number) => [n & 0xFF, (n >>> 8) & 0xFF,\n  (n >>> 16) & 0xFF, (n >>> 24) & 0xFF]\n","import { memC000 } from \"./memory\"\nimport { doSaveTimeSlice } from \"./motherboard\"\n\nlet keyBuffer = ''\nexport const popKey = () => {\n  if (memC000[0] < 128 && keyBuffer !== '') {\n    let key = keyBuffer.charCodeAt(0)\n    keyPress(key)\n    keyBuffer = keyBuffer.slice(1)\n    if (keyBuffer.length === 0) {\n      doSaveTimeSlice()\n    }\n  }\n}\n\nlet prevKey = ''\n\nexport const addToBuffer = (text: String) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  if (text === prevKey && keyBuffer.length > 0) {\n    return\n  }\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\nlet tPrev = 0\n\nexport const addToBufferDebounce = (text: String, timeout: number) => {\n  // Avoid repeating keys in the buffer if the Apple isn't processing them.\n  const t = performance.now()\n  if ((t - tPrev) < timeout) {\n    return\n  }\n  tPrev = t\n  prevKey = text.slice(0,1)\n  keyBuffer += text\n  popKey()\n}\n\nconst keyPress = (key: number) => {\n  memC000.fill(key | 0b10000000, 0, 32)\n}\n\n","// Code converted from the C code library available at:\n// https://github.com/mr-stivo/dsk2woz2\n//\nimport { toASCII, uint16toBytes, uint32toBytes } from \"./utility\"\n\n/**\n  Appends a byte to a woz at a supplied position: number, returning the\n  position immediately after the byte.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to write.\n  @returns The position immediately after the byte.\n*/\nconst write_byte = (woz: Uint8Array, position: number, value: number) => {\n  const shift = position & 7\n  const byte_position = position >>> 3\n  woz[byte_position] |= value >>> shift\n  if (shift) woz[byte_position+1] |= value << (8 - shift)\n  return position + 8;\n}\n\n/**\n  Encodes a byte into Apple 4-and-4 format and appends it to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @param value The byte to encode and write.\n  @returns The position immediately after the encoded byte.\n*/\nconst write_4_and_4 = (woz: Uint8Array, position: number, value: number) => {\n  position = write_byte(woz, position, (value >>> 1) | 0xAA);\n  position = write_byte(woz, position, value | 0xAA);\n  return position;\n}\n\n/**\n  Appends a 6-and-2-style 10-bit sync word to a woz.\n  @param woz The woz to write into.\n  @param position The position to write at.\n  @returns The position immediately after the sync word.\n*/\nconst write_sync = (woz: Uint8Array, position: number) => {\n  position = write_byte(woz, position, 0xFF);\n  // Skip two bits, i.e. leave them as 0s\n  return position + 2\n}\n\n/*!\n  Converts a 256-byte source woz into the 343 byte values that\n  contain the Apple 6-and-2 encoding of that woz.\n  @param dest The at-least-343 byte woz to which the encoded sector is written.\n  @param src The 256-byte source data.\n*/\nconst encode_6_and_2 = (src: Uint8Array) => {\n  const six_and_two_mapping = [\n    0x96, 0x97, 0x9A, 0x9B, 0x9D, 0x9E, 0x9F, 0xA6,\n    0xA7, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB2, 0xB3,\n    0xB4, 0xB5, 0xB6, 0xB7, 0xB9, 0xBA, 0xBB, 0xBC,\n    0xBD, 0xBE, 0xBF, 0xCB, 0xCD, 0xCE, 0xCF, 0xD3,\n    0xD6, 0xD7, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE,\n    0xDF, 0xE5, 0xE6, 0xE7, 0xE9, 0xEA, 0xEB, 0xEC,\n    0xED, 0xEE, 0xEF, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6,\n    0xF7, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n  ];\n\n  const dest = new Uint8Array(343)\n\n  // Fill in byte values: the first 86 bytes contain shuffled\n  // and combined copies of the bottom two bits of the sector\n  // contents; the 256 bytes afterwards are the remaining\n  // six bits.\n  const bit_reverse = [0, 2, 1, 3];\n  for (let c = 0; c < 84; c++) {\n    dest[c] =\n      bit_reverse[src[c] & 3] |\n      (bit_reverse[src[c + 86] & 3] << 2) |\n      (bit_reverse[src[c + 172] & 3] << 4);\n  }\n  dest[84] =\n    (bit_reverse[src[84] & 3] << 0) |\n    (bit_reverse[src[170] & 3] << 2);\n  dest[85] =\n      (bit_reverse[src[85] & 3] << 0) |\n      (bit_reverse[src[171] & 3] << 2);\n\n  for (let c = 0; c < 256; c++) {\n    dest[86 + c] = src[c] >>> 2;\n  }\n\n  // Exclusive OR each byte with the one before it.\n  dest[342] = dest[341];\n  let location = 342;\n  while(location > 1) {\n    location--;\n    dest[location] ^= dest[location - 1];\n  }\n\n  // Map six-bit values up to full bytes.\n  for (let c = 0; c < 343; c++) {\n    dest[c] = six_and_two_mapping[dest[c]];\n  }\n  return dest\n}\n\n/*!\n  Converts a DSK-style track to a WOZ-style track.\n  @param dest The 6646-byte woz that will contain the WOZ track. Both track contents and the\n      proper suffix will be written.\n  @param src The 4096-byte woz that contains the DSK track — 16 instances of 256 bytes, each\n      a fully-decoded sector.\n  @param track_number The track number to encode into this track.\n  @param is_prodos @c true if the DSK image is in Pro-DOS order; @c false if it is in DOS 3.3 order.\n*/\nconst serialise_track = (src: Uint8Array, track_number: number, is_prodos: boolean) => {\n  let track_position = 0;    // This is the track position **in bits**.\n  const dest = new Uint8Array(6646).fill(0)\n\n  // Write gap 1.\n  for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n  }\n\n  // Step through the sectors in physical order.\n  for (let sector = 0; sector < 16; sector++) {\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0x96);\n    // Volume, track, setor and checksum, all in 4-and-4 format.\n    track_position = write_4_and_4(dest, track_position, 254);\n    track_position = write_4_and_4(dest, track_position, track_number);\n    track_position = write_4_and_4(dest, track_position, sector);\n    track_position = write_4_and_4(dest, track_position, 254 ^ track_number ^ sector);\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 2.\n    for (let c = 0; c < 7; c++) {\n        track_position = write_sync(dest, track_position);\n    }\n\n    // Write the sector body.\n    // Prologue.\n    track_position = write_byte(dest, track_position, 0xD5);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xAD);\n\n    // Map from this physical sector to a logical sector.\n    const ls = (sector === 15) ? 15 : ((sector * (is_prodos ? 8 : 7)) % 15);\n\n    // Sector contents.\n    const contents = encode_6_and_2(src.slice(ls * 256, ls * 256 + 256));\n    for (let c = 0; c < contents.length; c++) {\n      track_position = write_byte(dest, track_position, contents[c]);            \n    }\n\n    // Epilogue.\n    track_position = write_byte(dest, track_position, 0xDE);\n    track_position = write_byte(dest, track_position, 0xAA);\n    track_position = write_byte(dest, track_position, 0xEB);\n\n    // Write gap 3.\n    for (let c = 0; c < 16; c++) {\n      track_position = write_sync(dest, track_position);\n    }\n  }\n  return dest\n}\n\nexport const convertdsk2woz = (dskData: Uint8Array, isPO: boolean) => {\n  if (dskData.length !== 35 * 16 * 256) {\n    return new Uint8Array()\n  }\n  const woz = new Uint8Array(512*3 + 512*35*13).fill(0)\n  woz.set(toASCII(\"WOZ2\\xFF\\n\\r\\n\"), 0)\n  woz.set(toASCII(\"INFO\"), 12)\n  woz[16] = 60    // Chunk size\n  woz[20] = 2     // INFO version: 2\n  woz[21] = 1     // Disk type: 5.25\"\n  woz[22] = 0     // Write protection: disabled\n  woz[23] = 0     // Cross-track synchronised image: no\n  woz[24] = 1     // MC3470 fake bits have been removed: yes\n  woz.fill(32, 25, 57)\n  woz.set(toASCII(\"Apple2TS (CT6502)\"), 25)\n  woz[57] = 1     // Disk sides: 1\n  woz[58] = 0     // Boot sector format: 0 (unknown)\n  woz[59] = 32    // Optimal bit timing: 32 (4us)\n  woz[60] = 0     // Compatible hardware: 0 (unknown)\n  woz[62] = 0     // Required RAM: 0 (unknown)\n  woz[64] = 13    // Largest track blocks (512 bytes): 13 (default track size)\n  woz.set(toASCII(\"TMAP\"), 80)\n  woz[84] = 160    // Chunk size\n  woz.fill(0xFF, 88, 88 + 160)  // Fill the TMAP with empty tracks\n  // Now fill in the quarter tracks around each whole track\n  let offset = 0;\n  for (let c = 0; c < 35; c++) {\n    offset = 88 + (c << 2)\n    if (c > 0) woz[offset - 1] = c\n    woz[offset] = woz[offset + 1] = c\n  }\n  woz.set(toASCII(\"TRKS\"), 248)\n  woz.set(uint32toBytes(1280 + 35*13*512), 252)\n  for (let c = 0; c < 35; c++) {\n    offset = 256 + (c << 3);\n    woz.set(uint16toBytes(3 + c*13), offset)  // start block\n    woz[offset + 2] = 13   // block count\n    woz.set(uint32toBytes(50304), offset + 4)  // start block\n    const trackInput = dskData.slice(c * 16 * 256, (c + 1) * 16 * 256)\n    const trackData = serialise_track(trackInput, c, isPO)\n    offset = 512 * (3 + 13 * c)\n    woz.set(trackData, offset)\n  }\n  return woz\n}\n","import { convertdsk2woz } from \"./convertdsk2woz\"\n\nlet crcTable = new Uint32Array(256).fill(0)\n\nconst makeCRCTable = () => {\n  let c;\n  for (let n =0; n < 256; n++) {\n    c = n;\n    for (let k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    crcTable[n] = c;\n  }\n}\n\nexport const crc32 = (data: Uint8Array, offset = 0) => {\n  if (crcTable[255] === 0) {\n    makeCRCTable()\n  }\n  let crc = 0 ^ (-1);\n  for (let i = offset; i < data.length; i++) {\n    crc = (crc >>> 8) ^ crcTable[(crc ^ data[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)) >>> 0;\n};\n\nconst decodeWoz2 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz2 = [0x57, 0x4F, 0x5A, 0x32, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz2 = woz2.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz2) return false\n  driveState.isWriteProtected = diskData[22] === 1\n  const crc = diskData.slice(8, 12)\n  const storedCRC = crc[0] + (crc[1] << 8) + (crc[2] << 16) + crc[3] * (2 ** 24)\n  const actualCRC = crc32(diskData, 12)\n  if (storedCRC !== 0 && storedCRC !== actualCRC) {\n    alert(\"CRC checksum error: \" + driveState.filename)\n    return false\n  }\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      const tmap_offset = 256 + 8 * tmap_index\n      const trk = diskData.slice(tmap_offset, tmap_offset + 8)\n      driveState.trackStart[htrack] = 512*(trk[0] + (trk[1] << 8))\n      // const nBlocks = trk[2] + (trk[3] << 8)\n      driveState.trackNbits[htrack] = trk[4] + (trk[5] << 8) + (trk[6] << 16) + trk[7] * (2 ** 24)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz2 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst decodeWoz1 = (driveState: DriveState, diskData: Uint8Array): boolean => {\n  const woz1 = [0x57, 0x4F, 0x5A, 0x31, 0xFF, 0x0A, 0x0D, 0x0A]\n  const isWoz1 = woz1.find((value, i) => value !== diskData[i]) === undefined\n  if (!isWoz1) {\n    return false\n  }\n  driveState.isWriteProtected = diskData[22] === 1\n  for (let htrack=0; htrack < 80; htrack++) {\n    const tmap_index = diskData[88 + htrack * 2]\n    if (tmap_index < 255) {\n      driveState.trackStart[htrack] = 256 + tmap_index * 6656\n      const trk = diskData.slice(driveState.trackStart[htrack] + 6646,\n        driveState.trackStart[htrack] + 6656)\n      driveState.trackNbits[htrack] = trk[2] + (trk[3] << 8)\n    } else {\n      driveState.trackStart[htrack] = 0\n      driveState.trackNbits[htrack] = 51200\n//        console.log(`empty woz1 track ${htrack / 2}`)\n    }\n  }\n  return true\n}\n\nconst isDSK = (filename: String) => {\n  const f = filename.toUpperCase()\n  const isDSK = f.endsWith(\".DSK\") || f.endsWith(\".DO\")\n  const isPO = f.endsWith(\".PO\")\n  return isDSK || isPO\n}\n\nconst decodeDSK = (driveState: DriveState, diskData: Uint8Array) => {\n  let f = driveState.filename.toUpperCase()\n  const isPO = f.endsWith(\".PO\")\n  diskData = convertdsk2woz(diskData, isPO)\n  if (diskData.length > 0) {\n    const i = f.lastIndexOf('.')\n    f = f.substring(0, i)\n    driveState.filename = f + '.woz'\n    driveState.diskHasChanges = true\n  }\n  return diskData\n}\n\nconst int32 = (data: Uint8Array) => {\n  return data[0] + 256 * (data[1] + 256 * (data[2] + 256 * data[3]))\n}\n\nconst decode2MG = (driveState: DriveState, diskData: Uint8Array) => {\n//    const nblocks = int32(diskData.slice(0x14, 0x18))\n  const offset = int32(diskData.slice(0x18, 0x1c))\n  const nbytes = int32(diskData.slice(0x1c, 0x20))\n  let magic = ''\n  for (let i = 0; i < 4; i++) magic += String.fromCharCode(diskData[i]) \n  if (magic !== '2IMG') {\n    console.error(\"Corrupt 2MG file.\")\n    driveState.filename = \"\"\n    return new Uint8Array()\n  }\n  if (diskData[12] !== 1) {\n    console.error(\"Only ProDOS 2MG files are supported.\")\n    driveState.filename = \"\"\n    return new Uint8Array()\n  }\n  return diskData.slice(offset, offset + nbytes)\n}\n\nexport const decodeDiskData = (driveState: DriveState, diskData: Uint8Array): Uint8Array => {\n  driveState.diskHasChanges = false\n  const fname = driveState.filename.toLowerCase()\n  if (fname.endsWith('.hdv') || fname.endsWith('.po')) {\n    return diskData\n  } else if (fname.endsWith('.2mg')) {\n    return decode2MG(driveState, diskData)\n  }\n  if (isDSK(driveState.filename)) {\n    diskData = decodeDSK(driveState, diskData)\n  }\n  if (decodeWoz2(driveState, diskData)) {\n    return diskData\n  }\n  if (decodeWoz1(driveState, diskData)) {\n    return diskData\n  }\n  if (decodeDSK(driveState, diskData)) {\n    return diskData\n  }\n  console.error(\"Unknown disk format.\")\n  driveState.filename = \"\"\n  return new Uint8Array()\n}\n","import { passDriveSound } from \"./worker2main\"\nimport { SWITCHES } from \"./softswitches\"\nimport { cycleCount } from './instructions'\nimport { toHex, DRIVE } from \"./utility\"\nimport { getDriveState, passData } from \"./drivestate\"\n\n\nlet currentDrive = 0\nlet motorOffTimeout: any = 0\n\nexport const doResetDiskDrive = (driveState: DriveState[]) => {\n  SWITCHES.DRIVE.isSet = false\n  doMotorTimeout(driveState[0])\n  doMotorTimeout(driveState[1])\n  driveState[0].halftrack = 68\n  driveState[0].prevHalfTrack = 68\n  driveState[1].halftrack = 68\n  driveState[1].prevHalfTrack = 68\n  passData()\n}\n\nexport const doPauseDiskDrive = (driveState: DriveState[], resume = false) => {\n  if (resume) {\n    if (driveState[currentDrive].motorRunning) {\n      startMotor(driveState[currentDrive])\n    }\n  } else {\n    passDriveSound(DRIVE.MOTOR_OFF)\n  }\n}\n\nconst moveHead = (dd: DriveState, offset: number) => {\n  if (dd.trackStart[dd.halftrack] > 0) {\n    dd.prevHalfTrack = dd.halftrack\n  }\n  dd.halftrack += offset\n  if (dd.halftrack < 0 || dd.halftrack > 68) {\n    passDriveSound(DRIVE.TRACK_END)\n    dd.halftrack = (dd.halftrack < 0) ? 0 : (dd.halftrack > 68 ? 68 : dd.halftrack)\n  } else {\n    passDriveSound(DRIVE.TRACK_SEEK)\n  }\n  dd.status = (dd.halftrack / 2).toString()\n  passData()\n  // Adjust new track location based on arm position relative to old track loc.\n  if (dd.trackStart[dd.halftrack] > 0 && dd.prevHalfTrack !== dd.halftrack) {\n    // const oldloc = dState.trackLocation\n    dd.trackLocation = Math.floor(dd.trackLocation * (dd.trackNbits[dd.halftrack] / dd.trackNbits[dd.prevHalfTrack]))\n    if (dd.trackLocation > 3) {\n      dd.trackLocation -= 4\n    }\n  }\n}\n\nconst pickbit = [128, 64, 32, 16, 8, 4, 2, 1]\nconst clearbit = [0b01111111, 0b10111111, 0b11011111, 0b11101111,\n  0b11110111, 0b11111011, 0b11111101, 0b11111110]\n\nconst getNextBit = (dd: DriveState) => {\n  dd.trackLocation = dd.trackLocation % dd.trackNbits[dd.halftrack]\n  let bit: number\n  if (dd.trackStart[dd.halftrack] > 0) {\n    const fileOffset = dd.trackStart[dd.halftrack] + (dd.trackLocation >> 3)\n    const byte = dd.diskData[fileOffset]\n    const b = dd.trackLocation & 7\n    bit = (byte & pickbit[b]) >> (7 - b)\n  } else {\n    // TODO: Freak out like a MC3470 and return random bits\n    bit = 1\n  }\n  dd.trackLocation++\n  return bit\n}\n\nlet dataRegister = 0\n\nconst getNextByte = (dd: DriveState) => {\n  if (dd.diskData.length === 0) return 0\n  let result = 0\n  if (dataRegister === 0) {\n    while (getNextBit(dd) === 0) {}\n    // This will become the high bit on the next read\n    dataRegister = 0x40\n    // Read the next 6 bits, all except the last one.\n    for (let i = 5; i >= 0; i--) {\n      dataRegister |= getNextBit(dd) << i\n    }\n  } else {\n    // Read the last bit.\n    const bit = getNextBit(dd)\n    dataRegister = (dataRegister << 1) | bit\n  }\n  result = dataRegister\n  if (dataRegister > 127) {\n    dataRegister = 0\n  }\n  return result\n}\n\nlet prevCycleCount = 0\n\nconst doWriteBit = (dd: DriveState, bit: 0 | 1) => {\n  dd.trackLocation = dd.trackLocation % dd.trackNbits[dd.halftrack]\n  // TODO: What about writing to empty tracks?\n  if (dd.trackStart[dd.halftrack] > 0) {\n    const fileOffset = dd.trackStart[dd.halftrack] + (dd.trackLocation >> 3)\n    let byte = dd.diskData[fileOffset]\n    const b = dd.trackLocation & 7\n    if (bit) {\n      byte |= pickbit[b]\n    } else {\n      byte &= clearbit[b]\n    }\n    dd.diskData[fileOffset] = byte\n  }\n  dd.trackLocation++\n}\n\nconst doWriteByte = (dd: DriveState, delta: number) => {\n  // Sanity check to make sure we aren't on an empty track. Is this correct?\n  if (dd.diskData.length === 0 || dd.trackStart[dd.halftrack] === 0) {\n    return\n  }\n  if (dataRegister > 0) {\n    if (delta >= 16) {\n      for (let i = 7; i >= 0; i--) {\n        doWriteBit(dd, dataRegister & 2**i ? 1 : 0)      \n      }\n    }\n    if (delta >= 36) {\n      doWriteBit(dd, 0)\n    }\n    if (delta >= 40) {\n      doWriteBit(dd, 0)\n    }\n    debugCache.push(delta >= 40 ? 2 : delta >= 36 ? 1 : dataRegister)\n    dd.diskHasChanges = true\n    dataRegister = 0\n  }\n}\n\nconst doMotorTimeout = (dd: DriveState) => {\n  motorOffTimeout = 0\n  if (!SWITCHES.DRIVE.isSet) {\n    dd.motorRunning = false\n  }\n  passData()\n  passDriveSound(DRIVE.MOTOR_OFF)\n}\n\nconst startMotor = (dd: DriveState) => {\n  if (motorOffTimeout) {\n    clearTimeout(motorOffTimeout)\n    motorOffTimeout = 0\n  }\n  dd.motorRunning = true\n  passData()\n  passDriveSound(DRIVE.MOTOR_ON)\n}\n\nconst stopMotor = (dd: DriveState) => {\n  if (motorOffTimeout === 0) {\n    motorOffTimeout = setTimeout(() => doMotorTimeout(dd), 1000);\n  }\n}\n\nlet debugCache:number[] = []\nconst doDebugDrive = false\n\nconst dumpData = (dd: DriveState, addr: number) => {\n  // if (dataRegister !== 0) {\n  //   console.error(`addr=${toHex(addr)} writeByte= ${dataRegister}`)\n  // }\n  if (debugCache.length > 0 && dd.halftrack === 2 * 0x00) {\n    if (doDebugDrive) {\n      let output = `TRACK ${toHex(dd.halftrack/2)}: `\n      let out = ''\n      debugCache.forEach(element => {\n        switch (element) {\n          case 1: out = 'Ff'; break;\n          case 2: out = 'FF'; break;\n          default: out = element.toString(16); break;\n        }\n        output += out + ' '\n      });\n      console.log(output)\n    }\n    debugCache = []\n  }\n}\n\nexport const handleDriveSoftSwitches =\n  (addr: number, value: number): number => {\n  let dd = getDriveState(currentDrive)\n  let result = 0\n  const delta = cycleCount - prevCycleCount\n  // if (doDebugDrive && value !== 0x96) {\n  //   const dc = (delta < 100) ? `  deltaCycles=${delta}` : ''\n  //   const wb = (dataRegister > 0) ? `  writeByte=$${toHex(dataRegister)}` : ''\n  //   const v = (value > 0) ? `  value=$${toHex(value)}` : ''\n  //   console.log(`write ${dd.writeMode}  addr=$${toHex(addr)}${dc}${wb}${v}`)\n  // }\n  if (addr === SWITCHES.DRVDATA.offAddr) {  // $C08C SHIFT/READ\n    if (dd.motorRunning && !dd.writeMode) {\n      return getNextByte(dd)\n    }\n  }\n  if (addr === SWITCHES.DRIVE.onAddr) {  // $C089\n    startMotor(dd)\n    dumpData(dd, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRIVE.offAddr) {  // $C088\n    stopMotor(dd)\n    dumpData(dd, addr)\n    return result\n  }\n  if (addr === SWITCHES.DRVSEL.offAddr || addr === SWITCHES.DRVSEL.onAddr) {\n    currentDrive = (addr === SWITCHES.DRVSEL.offAddr) ? 0 : 1\n    const ddOld = getDriveState(1 - currentDrive)\n    dd = getDriveState(currentDrive)\n    if (ddOld.motorRunning) {\n      ddOld.motorRunning = false\n      dd.motorRunning = true\n      passData()\n    }\n    return result\n  }\n  const ps = [SWITCHES.DRVSM0, SWITCHES.DRVSM1,\n    SWITCHES.DRVSM2, SWITCHES.DRVSM3]\n  const a = addr - SWITCHES.DRVSM0.offAddr\n  // One of the stepper motors has been turned on or off\n  if (a >= 0 && a <= 7) {\n    const ascend = ps[(dd.currentPhase + 1) % 4]\n    const descend = ps[(dd.currentPhase + 3) % 4]\n    // Make sure our current phase motor has been turned off.\n    if (!ps[dd.currentPhase].isSet) {\n      if (dd.motorRunning && ascend.isSet) {\n        moveHead(dd, 1)\n        dd.currentPhase = (dd.currentPhase + 1) % 4\n\n      } else if (dd.motorRunning && descend.isSet) {\n        moveHead(dd, -1)\n        dd.currentPhase = (dd.currentPhase + 3) % 4\n      }\n    }\n    // if (doDebugDrive) {\n    //   const phases = `${ps[0].isSet ? 1 : 0}${ps[1].isSet ? 1 : 0}` +\n    //     `${ps[2].isSet ? 1 : 0}${ps[3].isSet ? 1 : 0}`\n    //   console.log(`***** PC=${toHex(s6502.PC,4)}  addr=${toHex(addr,4)} ` +\n    //     `phase ${a >> 1} ${a % 2 === 0 ? \"off\" : \"on \"}  ${phases}  ` +\n    //     `track=${dState.halftrack / 2}`)\n    // }\n    dumpData(dd, addr)\n  } else if (addr === SWITCHES.DRVWRITE.offAddr) {  // $C08E READ\n    if (dd.motorRunning && dd.writeMode) {\n      doWriteByte(dd, delta)\n      // Reset the Disk II Logic State Sequencer clock\n      prevCycleCount = cycleCount\n    }\n    dd.writeMode = false\n    if (SWITCHES.DRVDATA.isSet) {\n      result = dd.isWriteProtected ? 0xFF : 0\n    }\n    dumpData(dd, addr)\n  } else if (addr === SWITCHES.DRVWRITE.onAddr) {  // $C08F WRITE\n    dd.writeMode = true\n    // Reset the Disk II Logic State Sequencer clock\n    prevCycleCount = cycleCount\n    if (value >= 0) {\n      dataRegister = value\n    }\n  } else if (addr === SWITCHES.DRVDATA.onAddr) {  // $C08D LOAD/READ\n    if (dd.motorRunning) {\n      if (dd.writeMode) {\n        doWriteByte(dd, delta)\n        // Reset the Disk II Logic State Sequencer clock\n        prevCycleCount = cycleCount\n      }\n      if (value >= 0) {\n        dataRegister = value\n      }\n    }\n  }\n\n  return result\n}\n","import { Buffer } from \"buffer\"\nimport { passDriveProps } from \"./worker2main\"\nimport { decodeDiskData } from \"./decodedisk\"\nimport { doPauseDiskDrive, doResetDiskDrive } from \"./diskdata\"\n\nconst initDriveState = (): DriveState => {\n  return {\n    hardDrive: false,\n    drive: 0,\n    status: \"\",\n    filename: \"\",\n    diskData: new Uint8Array(),\n    diskHasChanges: false,\n    motorRunning: false,\n    isWriteProtected: false,\n    halftrack: 0,\n    prevHalfTrack: 0,\n    writeMode: false,\n    currentPhase: 0,\n    trackStart: Array<number>(80),\n    trackNbits: Array<number>(80),\n    trackLocation: 0,\n  }\n}\n\nlet driveState: DriveState[] = [initDriveState(), initDriveState(), initDriveState()];\n\nlet currentDrive = 0\n\nexport const getDriveState = (drive: number) => {\n  return driveState[drive]\n}\n\nexport const getDriveSaveState = () => {\n  const driveData = [Buffer.from(driveState[0].diskData).toString(\"base64\"),\n    Buffer.from(driveState[1].diskData).toString(\"base64\")]\n  return { currentDrive: currentDrive, driveState: driveState.slice(0, 2), driveData: driveData }\n}\n\nexport const getFilename = () => {\n  return driveState[currentDrive].filename\n}\n\nexport const passData = () => {\n  for (let i = 0; i < driveState.length; i++) {\n    const dprops: DriveProps = {\n      hardDrive: false,\n      drive: i,\n      filename: driveState[i].filename,\n      status: driveState[i].status,\n      motorRunning: driveState[i].motorRunning,\n      diskHasChanges: driveState[i].diskHasChanges,\n      diskData: driveState[i].diskHasChanges ? driveState[i].diskData : new Uint8Array()\n    }\n    passDriveProps(dprops)\n  }\n}\n\nexport const restoreDriveSaveState = (newState: any) => {\n  currentDrive = newState.currentDrive\n  driveState[0] = newState.driveState[0]\n  driveState[1] = newState.driveState[1]\n  for (let i = 0; i < driveState.length; i++) {\n    if (\"fileName\" in newState.driveState[i]) {\n      driveState[i].filename = newState.driveState[i].fileName\n      delete (driveState[i] as any).fileName\n    }\n    if (\"diskImageHasChanges\" in newState.driveState[i]) {\n      driveState[i].diskHasChanges = newState.driveState[i].diskImageHasChanges\n      delete (driveState[i] as any).diskImageHasChanges\n    }\n    if (\"motorIsRunning\" in newState.driveState[i]) {\n      driveState[i].motorRunning = newState.driveState[i].motorIsRunning\n      delete (driveState[i] as any).motorIsRunning\n    }\n  }\n  driveState[0].diskData = new Uint8Array(Buffer.from(newState.driveData[0], 'base64'))\n  driveState[1].diskData = new Uint8Array(Buffer.from(newState.driveData[1], 'base64'))\n  passData()\n}\n\nexport const doResetDrive = () => {\n  doResetDiskDrive(driveState)\n  passData()\n}\n\nexport const doPauseDrive = (resume = false) => {\n  doPauseDiskDrive(driveState)\n  passData()\n}\n\nexport const doSetDriveProps = (props: DriveProps) => {\n  driveState[props.drive] = initDriveState()\n  driveState[props.drive].diskData = new Uint8Array()\n  driveState[props.drive].filename = props.filename\n  driveState[props.drive].motorRunning = props.motorRunning\n  if (props.diskData.length > 0) {\n    driveState[props.drive].diskData = decodeDiskData(driveState[props.drive], props.diskData)\n  }\n  passData()\n}\n","import { getFilename } from \"./drivestate\"\nimport { addToBuffer, addToBufferDebounce } from \"./keyboard\"\nimport { memC000 } from \"./memory\"\nimport { SWITCHES } from \"./softswitches\"\n// import { doSaveTimeSlice } from \"./motherboard\"\n// import { addToBufferDebounce } from \"./keyboard\"\n\nlet gamePad: EmuGamepad | null = null\nconst maxTimeoutCycles = Math.trunc(0.0028*1.020484e6)\nlet paddle0timeout = maxTimeoutCycles / 2\nlet paddle1timeout = maxTimeoutCycles / 2\n// let prevPaddle0timeout = paddle0timeout\n// let prevPaddle1timeout = paddle1timeout\nlet countStart = 0\nlet leftAppleDown = false\nlet rightAppleDown = false\nlet leftButtonDown = false\nlet rightButtonDown = false\nlet isLeftDown = false\nlet isRightDown = false\n\nexport const setButtonState = () => {\n  const wasLeftDown = isLeftDown\n  const wasRightDown = isRightDown\n  isLeftDown = leftAppleDown || leftButtonDown\n  isRightDown = rightAppleDown || rightButtonDown\n  SWITCHES.PB0.isSet = (leftAppleDown || leftButtonDown)\n  SWITCHES.PB1.isSet = (isRightDown || rightButtonDown)\n  if ((isLeftDown && !wasLeftDown) || (isRightDown && !wasRightDown)) {\n//    doSaveTimeSlice()\n  }\n}\n\nexport const pressAppleCommandKey = (isDown: boolean, left: boolean) => {\n  if (left) {\n    leftAppleDown = isDown\n  } else {\n    rightAppleDown = isDown\n  }\n  setButtonState()\n}\n\nconst memSet1 = (addr: number, value: number) => {\n  memC000[addr - 0xC000] = value\n}\nexport const resetJoystick = (cycleCount: number) => {\n  memSet1(0xC064, 0x80)\n  memSet1(0xC065, 0x80)\n  memSet1(0xC066, 0)\n  memSet1(0xC067, 0)\n  countStart = cycleCount\n}\n\n// const largeDiff = (v1: number, v2: number) => {\n//   return (Math.abs(v1 - v2) > 0.1 * maxTimeoutCycles)\n// }\n\nexport const checkJoystickValues = (cycleCount: number) => {\n//   if (largeDiff(prevPaddle0timeout, paddle0timeout) ||\n//     largeDiff(prevPaddle1timeout, paddle1timeout)) {\n//     prevPaddle0timeout = paddle0timeout\n//     prevPaddle1timeout = paddle1timeout\n//     doSaveTimeSlice()\n//   }\n  const diff = cycleCount - countStart\n  memSet1(0xC064, (diff < paddle0timeout) ? 0x80 : 0)\n  memSet1(0xC065, (diff < paddle1timeout) ? 0x80 : 0)\n}\n\nconst defaultButtons = [\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {leftButtonDown = true},\n  () => {rightButtonDown = true},\n  () => {paddle1timeout = 0},\n  () => {paddle1timeout = maxTimeoutCycles},\n  () => {paddle0timeout = 0},\n  () => {paddle0timeout = maxTimeoutCycles},\n]\n\n// const wolf = [\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {addToBufferDebounce('U'.charCodeAt(0))},\n//   () => {addToBufferDebounce('T'.charCodeAt(0))},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {addToBufferDebounce(' '.charCodeAt(0))},\n//   () => {addToBufferDebounce('\\r', timeout)},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {leftButtonDown = true},\n//   () => {rightButtonDown = true},\n//   () => {paddle1timeout = 0},\n//   () => {paddle1timeout = maxTimeoutCycles},\n//   () => {paddle0timeout = 0},\n//   () => {paddle0timeout = maxTimeoutCycles},\n// ]\n\n// AZTEC Controls\n// A, D: move left or right (while using weapon); face left or right (otherwise)\n// W: go to walk mode\n// R: go to run mode\n// C: go to climb mode (ascends steps or mounds)\n// J: jump\n// S: stop walking, running, or climbing\n// G: crawl once\n// P: set explosive (must be crawling)\n// O: open box or clear trash mound\n// L: look in box\n// T: take object from ground or box\n// Z: inventory\n// F: draw machete if you have one, gun otherwise, does nothin if unarmed\n// S: turn around while using weapon\n// L: lunge while using machete\n// M: stab at ground while using machete\n// G: switch from machete to gun\n// <spacebar>: fire gun\n//let moving = false\nconst timeout = 300\nconst aztec = [\n  () => {addToBufferDebounce('J', timeout)},  // 0 A\n  () => {addToBuffer('O'); addToBufferDebounce('L', timeout)},  // 1 B\n  () => {addToBufferDebounce('G', timeout)},  // 2 X\n  () => {addToBufferDebounce('T', timeout)},  // 3 Y\n  () => {leftButtonDown = true},  // 4 LB\n  () => {addToBuffer('F'); addToBufferDebounce('L', timeout)},  // 5 RB\n  () => {addToBuffer('O'); addToBuffer('L'); addToBufferDebounce('T', timeout)},  // 6 LT\n  () => {addToBufferDebounce(' ', timeout)},  // 7 RT\n  () => {leftButtonDown = true},  // 8 Select?\n  () => {rightButtonDown = true},  // 9 Start?\n  () => {leftButtonDown = true},  // 10 Left thumb\n  () => {rightButtonDown = true},  // 11 Right thumb\n  () => {addToBufferDebounce('C', timeout)},  // 12 D-pad U\n  () => {addToBufferDebounce('S', timeout)},  // 13 D-pad D\n  () => {\n    addToBuffer('A')\n    addToBufferDebounce('W', timeout)},  // 14 D-pad L\n  () => {\n    addToBuffer('D')\n    addToBufferDebounce('W', timeout)},  // 15 D-pad R\n]\n\nlet funcs = defaultButtons\n// funcs = aztec\n\nexport const setGamepad = (gamePadIn: EmuGamepad) => {\n  gamePad = gamePadIn\n  const filename = getFilename()\n  if (filename.toLowerCase().includes(\"aztec\")) {\n    funcs = aztec\n  } else {\n    funcs = defaultButtons\n  }\n}\n\nconst nearZero = (value: number) => {return value > -0.01 && value < 0.01}\n\nexport const handleGamepad = () => {\n  if (gamePad && gamePad.connected) {\n    let xstick = gamePad.axes[0]\n    let ystick = gamePad.axes[1]\n    if (nearZero(gamePad.axes[0]) && nearZero(gamePad.axes[1])) {\n      xstick = gamePad.axes[2]\n      ystick = gamePad.axes[3]\n    }\n    if (Math.abs(xstick) < 0.01) xstick = 0\n    if (Math.abs(ystick) < 0.01) ystick = 0\n    const dist = Math.sqrt(xstick * xstick + ystick * ystick)\n    const clip = 0.95 * ((dist === 0) ? 1 :\n      Math.max(Math.abs(xstick), Math.abs(ystick)) / dist)\n    xstick = Math.min(Math.max(-clip, xstick), clip)\n    ystick = Math.min(Math.max(-clip, ystick), clip)\n    paddle0timeout = Math.trunc(maxTimeoutCycles*(xstick + clip)/(2*clip))\n    paddle1timeout = Math.trunc(maxTimeoutCycles*(ystick + clip)/(2*clip))\n    leftButtonDown = false\n    rightButtonDown = false\n    gamePad.buttons.forEach((button, i) => {\n      if (button && i < funcs.length) {\n        funcs[i]()\n      }\n    });\n    setButtonState()\n  }\n\n}\n","import { memC000 } from \"./memory\"\nimport { popKey } from \"./keyboard\"\nimport { passClickSpeaker } from \"./worker2main\"\nimport { resetJoystick, checkJoystickValues } from \"./joystick\"\nimport { toHex } from \"./utility\"\n\ntype tSetFunc = ((addr: number, cycleCount: number) => void) | null\n\ntype softSwitch = {\n  offAddr: number\n  onAddr: number\n  isSetAddr: number\n  writeOnly: boolean\n  isSet: boolean\n  setFunc: tSetFunc\n}\n\nconst sswitch: Array<softSwitch> = []\n\nconst NewSwitch = (offAddr: number, isSetAddr: number,\n  writeOnly = false,\n  setFunc: tSetFunc = null): softSwitch => {\n  const result: softSwitch = {\n    offAddr: offAddr,\n    onAddr: offAddr + 1,\n    isSetAddr: isSetAddr,\n    writeOnly: writeOnly,\n    isSet: false,\n    setFunc: setFunc,\n  }\n  if (offAddr >= 0xC000) {\n    sswitch[offAddr - 0xC000] = result\n    sswitch[offAddr + 1 - 0xC000] = result\n  } \n  if (isSetAddr >= 0xC000) {\n    sswitch[isSetAddr - 0xC000] = result\n  } \n  return result\n}\n\nconst SLOT6 = 0x60\n\nconst rand = () => Math.floor(256 * Math.random())\n\nexport const handleBankedRAM = (addr: number) => {\n  // Only keep bits 0, 1, 3 of the 0xC08* number\n  addr &= 0b1011\n  SWITCHES.READBSR2.isSet = addr === 0\n  SWITCHES.WRITEBSR2.isSet = addr === 1\n  SWITCHES.OFFBSR2.isSet = addr === 2\n  SWITCHES.RDWRBSR2.isSet = addr === 3\n  SWITCHES.READBSR1.isSet = addr === 8\n  SWITCHES.WRITEBSR1.isSet = addr === 9\n  SWITCHES.OFFBSR1.isSet = addr === 0x0A\n  SWITCHES.RDWRBSR1.isSet = addr === 0x0B\n  // Set soft switches for reading the bank-switched RAM status\n  SWITCHES.BSRBANK2.isSet = (addr <= 3)\n  SWITCHES.BSRREADRAM.isSet = [0, 3, 8, 0x0B].includes(addr)\n}\n\nexport const SWITCHES = {\n  STORE80: NewSwitch(0xC000, 0xC018, true),\n  RAMRD: NewSwitch(0xC002, 0xC013, true),\n  RAMWRT: NewSwitch(0xC004, 0xC014, true),\n  INTCXROM: NewSwitch(0xC006, 0xC015, true),\n  ALTZP: NewSwitch(0xC008, 0xC016, true),\n  SLOTC3ROM: NewSwitch(0xC00A, 0xC017, true),\n  COLUMN80: NewSwitch(0xC00C, 0xC01F, true),\n  ALTCHARSET: NewSwitch(0xC00E, 0xC01E, true),\n  KBRDSTROBE: NewSwitch(0, 0xC010, false, () => {\n    memC000.fill(memC000[0] & 0b01111111, 0, 32)\n    popKey()\n  }),\n  BSRBANK2: NewSwitch(0, 0xC011),    // status location, not a switch\n  BSRREADRAM: NewSwitch(0, 0xC012),  // status location, not a switch\n  CASSOUT: NewSwitch(0xC020, 0, false, () => {\n    memC000.fill(rand(), 0x20, 16)\n  }),\n  SPEAKER: NewSwitch(0xC030, 0, false, (addr, cycleCount) => {\n    memC000.fill(rand(), 0x30, 16)\n    passClickSpeaker(cycleCount)\n  }),\n  EMUBYTE: NewSwitch(0, 0xC04F, false, () => {memC000[0x4F] = 0xCD}),\n  TEXT: NewSwitch(0xC050, 0xC01A),\n  MIXED: NewSwitch(0xC052, 0xC01B),\n  PAGE2: NewSwitch(0xC054, 0xC01C),\n  HIRES: NewSwitch(0xC056, 0xC01D),\n  AN0: NewSwitch(0xC058, 0),\n  AN1: NewSwitch(0xC05A, 0),\n  AN2: NewSwitch(0xC05C, 0),\n  AN3: NewSwitch(0xC05E, 0),\n  CASSIN1: NewSwitch(0, 0xC060, false, () => {memC000[0x60] = rand()}),\n  PB0: NewSwitch(0, 0xC061),  // status location, not a switch\n  PB1: NewSwitch(0, 0xC062),  // status location, not a switch\n  PB2: NewSwitch(0, 0xC063),  // status location, not a switch\n  JOYSTICK12: NewSwitch(0xC064, 0, false, (addr, cycleCount) => {\n    checkJoystickValues(cycleCount)\n  }),\n  CASSIN2: NewSwitch(0, 0xC068, false, () => {memC000[0x68] = rand()}),\n  FASTCHIP_LOCK: NewSwitch(0xC06A, 0),   // used by Total Replay\n  FASTCHIP_ENABLE: NewSwitch(0xC06B, 0), // used by Total Replay\n  FASTCHIP_SPEED: NewSwitch(0xC06D, 0),  // used by Total Replay\n  JOYSTICKRESET: NewSwitch(0xC070, 0, false, (addr, cycleCount) => {\n    resetJoystick(cycleCount)\n    memC000[0x70] = rand()\n  }),\n  LASER128EX: NewSwitch(0xC074, 0),  // used by Total Replay\n  READBSR2: NewSwitch(0xC080, 0, false, (addr) => {handleBankedRAM(addr)}),\n  WRITEBSR2: NewSwitch(0xC081, 0, false, (addr) => {handleBankedRAM(addr)}),\n  OFFBSR2: NewSwitch(0xC082, 0, false, (addr) => {handleBankedRAM(addr)}),\n  RDWRBSR2: NewSwitch(0xC083, 0, false, (addr) => {handleBankedRAM(addr)}),\n  READBSR1: NewSwitch(0xC088, 0, false, (addr) => {handleBankedRAM(addr)}),\n  WRITEBSR1: NewSwitch(0xC089, 0, false, (addr) => {handleBankedRAM(addr)}),\n  OFFBSR1: NewSwitch(0xC08A, 0, false, (addr) => {handleBankedRAM(addr)}),\n  RDWRBSR1: NewSwitch(0xC08B, 0, false, (addr) => {handleBankedRAM(addr)}),\n  DRVSM0: NewSwitch(0xC080 + SLOT6, 0),\n  DRVSM1: NewSwitch(0xC082 + SLOT6, 0),\n  DRVSM2: NewSwitch(0xC084 + SLOT6, 0),\n  DRVSM3: NewSwitch(0xC086 + SLOT6, 0),\n  DRIVE: NewSwitch(0xC088 + SLOT6, 0),\n  DRVSEL: NewSwitch(0xC08A + SLOT6, 0),\n  DRVDATA: NewSwitch(0xC08C + SLOT6, 0),\n  DRVWRITE: NewSwitch(0xC08E + SLOT6, 0),\n}\n\nSWITCHES.TEXT.isSet = true\n\n// const skipDebugFlags = [0xC000, 0xC001, 0xC00D, 0xC00F, 0xC030, 0xC054, 0xC055, 0xC01F]\n\nexport const checkSoftSwitches = (addr: number,\n  calledFromMemSet: boolean, cycleCount: number) => {\n  // if (!skipDebugFlags.includes(addr)) {\n  //   const s = memC000[addr - 0xC000] > 0x80 ? 1 : 0\n  //   console.log(`${cycleCount} $${toHex(s6502.PC)}: $${toHex(addr)} [${s}] ${calledFromMemSet ? \"set\" : \"\"}`)\n  // }\n  if (sswitch[addr - 0xC000]) {\n    const sswitch1 = sswitch[addr - 0xC000]\n    const func = sswitch1.setFunc\n    if (addr === sswitch1.offAddr || addr === sswitch1.onAddr) {\n      if (func) {\n        func(addr, cycleCount)\n      } else {\n        if (!sswitch1.writeOnly || calledFromMemSet) {\n          sswitch1.isSet = (addr === sswitch1.onAddr)\n        }\n        if (sswitch1.isSetAddr) {\n          memC000[sswitch1.isSetAddr - 0xC000] = sswitch1.isSet ? 0x8D : 0x0D\n        }\n      }\n    } else if (addr === sswitch1.isSetAddr) {\n      if (func) {\n        func(addr, cycleCount)\n      } else {\n        memC000[addr - 0xC000] = sswitch1.isSet ? 0x8D : 0x0D\n      }\n    }\n    return\n  }\n\n  console.error(\"Unknown softswitch \" + toHex(addr))\n}\n","import { SWITCHES, checkSoftSwitches } from \"./softswitches\";\nimport { cycleCount } from \"./instructions\"\nimport { handleDriveSoftSwitches } from \"./diskdata\"\nimport { romBase64 } from \"./roms/rom_2e\"\nimport { disk2driver } from \"./roms/slot_disk2_cx00\"\nimport { Buffer } from \"buffer\";\n\n// Bank1 of $D000-$DFFF is stored in mainMem (and auxMem) at 0xC000-0xCFFF\n// Bank2 of $D000-$DFFF is stored in mainMem (and auxMem) at 0xD000-0xDFFF\nexport let mainMem = new Uint8Array(65536)\nexport let auxMem = new Uint8Array(65536)\nexport let memC000 = new Uint8Array(256)\nconst empty = new Uint8Array(256).fill(255)\nlet slots = [\n  empty,\n  empty,\n  empty,\n  empty,\n  empty,\n  disk2driver,\n  empty,\n]\n\nexport const specialJumpTable = new Map<number, () => void>();\n\nexport const setSlotDriver = (slot: number, driver: Uint8Array, jump = 0, fn = () => {}) => {\n  slots[slot - 1] = driver\n  if (jump) {\n    specialJumpTable.set(jump, fn)\n  }\n}\n\nconst rom = new Uint8Array(\n  Buffer.from(romBase64.replaceAll(\"\\n\", \"\"), \"base64\")\n)\n\n// Set $C007: FF to see this code\n// Hack to change the cursor\n// rom[0xC26F - 0xC000] = 161\n// rom[0xC273 - 0xC000] = 161\n// Hack to speed up the cursor\n// rom[0xC288 - 0xC000] = 0x20\n\n// let nn = 0\n\nexport const readWriteAuxMem = (addr: number, write = false) => {\n  let useAux = write ? SWITCHES.RAMWRT.isSet : SWITCHES.RAMRD.isSet\n  if (addr <= 0x1FF || addr >= 0xC000) {\n    useAux = SWITCHES.ALTZP.isSet\n  } else if (addr >= 0x400 && addr <= 0x7FF) {\n    if (SWITCHES.STORE80.isSet) {\n      useAux = SWITCHES.PAGE2.isSet\n    }\n  } else if (addr >= 0x2000 && addr <= 0x3FFF) {\n    if (SWITCHES.STORE80.isSet) {\n      if (SWITCHES.HIRES.isSet) {\n        useAux = SWITCHES.PAGE2.isSet\n      }\n    }\n  }\n  return useAux\n}\n\nconst memGetSoftSwitch = (addr: number, code=0): number => {\n  // $C019 Vertical blanking status (0 = vertical blanking, 1 = beam on)\n  if (addr === 0xC019) {\n    // Return \"low\" for 70 scan lines out of 262 (70 * 65 cycles = 4550)\n    return ((cycleCount % 17030) > 12480) ? 0x0D : 0x8D\n  }\n  // if (code === 0xDD && addr === 0xC0EC) {\n  //   let t = performance.now()\n  //   for (let index = 0; index < nn; index++) {\n  //     checkSoftSwitches(addr, false, cycleCount)\n  //   }\n  //   let t1 = (performance.now() - t)\n  //   console.log(`checkSoftSwitches t=${t1}`)\n  //   t = performance.now()\n  //   let result = 0\n  //   for (let index = 0; index < nn; index++) {\n  //     if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n  //       result = handleDriveSoftSwitches(addr, -1)\n  //     }\n  //   }\n  //   t1 = (performance.now() - t)\n  //   console.log(`handleDriveSoftSwitches t=${t1}`)\n  //   return result\n  // } else {\n    checkSoftSwitches(addr, false, cycleCount)\n    if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n//      nn++\n//      console.log(`${nn}`)\n      return handleDriveSoftSwitches(addr, -1)\n    }\n//  }\n\n  return memC000[addr - 0xC000]\n}\n\nconst memGetBankC000 = (addr: number): number => {\n  if (SWITCHES.INTCXROM.isSet) {\n    return rom[addr - 0xC000]\n  }\n  // TODO: This should return the card's ROM, not regular ROM.\n  if (addr >= 0xC800) {\n    return rom[addr - 0xC000]\n  }\n  if ((addr >= 0xC300 && addr <= 0xC3FF) && !SWITCHES.SLOTC3ROM.isSet) {\n    return rom[addr - 0xC000]\n  }\n  const slot = Math.floor((addr - 0xC100) / 256)\n  return slots[slot][addr - 0xC100 - 256 * slot]\n}\n\nconst bankRamAdjust = (addr: number) => {\n  // Bank1 of $D000-$DFFF is stored in $C000, so adjust address if necessary\n  if (addr >= 0xD000 && addr <= 0xDFFF && !SWITCHES.BSRBANK2.isSet) {\n    addr -= 0x1000\n  }\n  return addr\n}\n\nexport const memGet = (addr: number, code=0): number => {\n  if (addr >= 0xC000 && addr <= 0xC0FF) {\n    return memGetSoftSwitch(addr, code)\n  }\n  if (addr >= 0xC100 && addr <= 0xCFFF) {\n    return memGetBankC000(addr)\n  }\n  if (addr >= 0xD000) {\n    if (!SWITCHES.BSRREADRAM.isSet) {\n      return rom[addr - 0xC000]\n    }\n    addr = bankRamAdjust(addr)\n  }\n\n  return (readWriteAuxMem(addr) ? auxMem[addr] : mainMem[addr])\n}\n\nexport const memSet = (addr: number, value: number) => {\n  if (addr >= 0xC000 && addr <= 0xC0FF) {\n    if (addr >= SWITCHES.DRVSM0.offAddr && addr <= SWITCHES.DRVWRITE.onAddr) {\n      handleDriveSoftSwitches(addr, value)\n    } else {\n      checkSoftSwitches(addr, true, cycleCount)\n    }\n    return\n  }\n  if (addr >= 0xC100 && addr <= 0xCFFF) {\n    return\n  }\n\n  if (addr >= 0xD000) {\n    const writeRAM = SWITCHES.WRITEBSR1.isSet || SWITCHES.WRITEBSR2.isSet ||\n      SWITCHES.RDWRBSR1.isSet || SWITCHES.RDWRBSR2.isSet\n    if (!writeRAM) {\n      return\n    }\n    addr = bankRamAdjust(addr)\n  }\n\n  if (readWriteAuxMem(addr, true)) {\n    auxMem[addr] = value\n  } else {\n    mainMem[addr] = value\n  }\n}\n\nconst TEXT_PAGE1 = 0x400\nconst TEXT_PAGE2 = 0x800\nconst offset = [\n  0, 0x80, 0x100, 0x180, 0x200, 0x280, 0x300, 0x380, 0x28, 0xA8, 0x128, 0x1A8,\n  0x228, 0x2A8, 0x328, 0x3A8, 0x50, 0xD0, 0x150, 0x1D0, 0x250, 0x2D0, 0x350,\n  0x3D0,\n]\n\nexport function getTextPage(getLores = false) {\n  let jstart = 0\n  let jend = 24\n  let is80column = false\n  if (getLores) {\n    if (SWITCHES.TEXT.isSet || SWITCHES.HIRES.isSet) {\n      return new Uint8Array()\n    }\n    jend = SWITCHES.MIXED.isSet ? 20 : 24\n    is80column = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  } else {\n    if (!SWITCHES.TEXT.isSet && !SWITCHES.MIXED.isSet) {\n      return new Uint8Array()\n    }\n    if (!SWITCHES.TEXT.isSet && SWITCHES.MIXED.isSet) jstart = 20\n    is80column = SWITCHES.COLUMN80.isSet\n  }\n  if (is80column) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(80 * (jend - jstart)).fill(0xA0)\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 80 * (j - jstart)\n      for (let i = 0; i < 40; i++) {\n        textPage[joffset + 2 * i + 1] = mainMem[pageOffset + offset[j] + i]\n        textPage[joffset + 2 * i] = auxMem[pageOffset + offset[j] + i]\n      }\n    }\n    return textPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? TEXT_PAGE2 : TEXT_PAGE1\n    const textPage = new Uint8Array(40 * (jend - jstart))\n    for (let j = jstart; j < jend; j++) {\n      const joffset = 40 * (j - jstart)\n      let start = pageOffset + offset[j]\n      textPage.set(mainMem.slice(start, start + 40), joffset)\n    }\n    return textPage\n  }\n}\n\nexport function getHires() {\n  if (SWITCHES.TEXT.isSet || !SWITCHES.HIRES.isSet) {\n    return new Uint8Array()\n  }\n  const doubleRes = SWITCHES.COLUMN80.isSet && !SWITCHES.AN3.isSet\n  const nlines = SWITCHES.MIXED.isSet ? 160 : 192\n  if (doubleRes) {\n    // Only select second 80-column text page if STORE80 is also OFF\n    const pageOffset = (SWITCHES.PAGE2.isSet && !SWITCHES.STORE80.isSet) ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(80 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      for (let i = 0; i < 40; i++) {\n        hgrPage[j * 80 + 2 * i + 1] = mainMem[addr + i]\n        hgrPage[j * 80 + 2 * i] = auxMem[addr + i]\n      }\n    }\n    return hgrPage\n  } else {\n    const pageOffset = SWITCHES.PAGE2.isSet ? 0x4000 : 0x2000\n    const hgrPage = new Uint8Array(40 * nlines)\n    for (let j = 0; j < nlines; j++) {\n      const addr = pageOffset + 40 * Math.trunc(j / 64) +\n        1024 * (j % 8) + 128 * (Math.trunc(j / 8) & 7)\n      hgrPage.set(mainMem.slice(addr, addr + 40), j * 40)\n    }\n    return hgrPage\n  }\n}\n\nexport const getDataBlock = (addr: number) => {\n  const doAux = readWriteAuxMem(addr, true)\n  addr = bankRamAdjust(addr)\n  const result = doAux ?\n    auxMem.slice(addr, addr + 512) : mainMem.slice(addr, addr + 512)\n  return result\n}\n\nexport const setDataBlock = (addr: number, data: Uint8Array) => {\n  const doAux = readWriteAuxMem(addr, true)\n  addr = bankRamAdjust(addr)\n  if (doAux) {\n    auxMem.set(data, addr)\n  } else {\n    mainMem.set(data, addr)\n  }\n}","export const disk2driver = [0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C,0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10,0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD,0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0,0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,0x20,0xA8,0xFC,0x88,0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C,0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3,0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0,0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD,0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40,0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB,0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00,0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5,0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00]\n// export const slot_disk2=`oiCgAKIDhjyKCiQ88BAFPEn/KX6wCErQ+5idVgPI6BDlIFj/ur0AAQoKCgqFK6q9\n// jsC9jMC9isC9icCgUL2AwJgpAwoFK6q9gcCpViCo/IgQ64UmhT2FQakIhScYCL2M\n// wBD7SdXQ972MwBD7yarQ8+q9jMAQ+8mW8AkokN9JrfAl0NmgA4VAvYzAEPsqhTy9\n// jMAQ+yU8iNDsKMU90L6lQMVB0Liwt6BWhDy8jMAQ+1nWAqQ8iJkAA9DuhDy8jMAQ\n// +1nWAqQ8kSbI0O+8jMAQ+1nWAtCHoACiVsow+7EmXgADKl4AAyqRJsjQ7uYn5j2l\n// Pc0ACKYrkNtMAQgAAAAAAA==`\n","export const romBase64=`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\ncM5oYLEoLB/AEBmNAcCEKphFIGqwBK1VwMiYSqixKCxUwKQqLB7AEAbJILACCUBg\nSCn/MBat+wRqaEiQDiwewBAJSUAsrM7wAklALB/AEB2NAcBIhCqYRSBKsAStVcDI\nmEqoaJEorVTApCpoYJEoaGBImEisewUgRM6NewYpgEmrTM3OSJhIrHsFrXsGIHDO\naKhoYCBxzan/hTKt+wQpBPACRjKteweFKK37B4UprfsFhSVgLBLAED2pBs2z+/A2\nogMsEcAwAqILjbP7LIDArbP7yQbwAegsgcAsgcCgAKn4hTeENrE2kTbI0PnmN9D1\nvYDAvYDAYAAAAOmBStAUpD+mPtABiMqKGOU6hT4QAciY5TvQQKQvuT0AkTqIEPgg\nSPkgGvwgGvxM4/ylPSCO+Kq9APrFQtATvcD5xUPQDKVEpC7AnfCzxS7wysY90Nzm\nRMY18NakNJiqTNL8IMf/rQACyaDwEsmN0AFgIKf/yZPQ5Yrw4iB4/qkDhT0gE/8K\n6b7JwpDRCgqiBAomQiZDyhD4xj3w9BDkogUgyMSlRAoKBTXJILAGpjXwAgmAhUSE\nNLkAAsm78ATJjdC0TGvP32/YZdf43JTZsdsw89jf4duP85jz5PHd8dTxJPIx8kDy\n1/Ph8+j2/fZo92735vdX/CD3Jvd092zybvJy8nbyf/JO8mrZVfKF8qXyyvIX87vz\nnvNh8kXaPdkR2cjZSNj0AyDZatnb2W3Y69mD58jYr9gS43rn1NqV2KTWadaf20jW\nkOsj7K/rCgDe4hLUzd//4o3uru9B6Qnv6u/x7zrwnvBk59bmxeMH5+XmRuZa5obm\nkeZ5wOd5qed7gel7aOp9lu5QVN9GTt9/z+5/l95kZN9FTsRGT9JORVjUREFUwUlO\nUFXUREXMREnNUkVBxEfSVEVY1FBSo0lOo0NBTMxQTE/USExJzlZMSc5IR1KySEfS\nSENPTE9SvUhQTE/URFJB11hEUkHXSFRBwkhPTcVST1S9U0NBTEW9U0hMT0HEVFJB\nQ8VOT1RSQUPFTk9STUHMSU5WRVJTxUZMQVPIQ09MT1K9UE/QVlRBwkhJTUVNukxP\nTUVNuk9ORVLSUkVTVU3FUkVDQUzMU1RPUsVTUEVFRL1MRdRHT1TPUlXOScZSRVNU\nT1LFpkdPU1XCUkVUVVLOUkXNU1RP0E/OV0FJ1ExPQcRTQVbFREXGUE9LxVBSSU7U\nQ09O1ExJU9RDTEVB0kdF1E5F11RBQqhUz0bOU1BDqFRIRc5B1E5P1FNURdCrraqv\n3kFOxE/Svr28U0fOSU7UQULTVVPSRlLFU0NSTqhQRMxQT9NTUdJSTsRMT8dFWNBD\nT9NTSc5UQc5BVM5QRUXLTEXOU1RSpFZBzEFTw0NIUqRMRUZUpFJJR0hUpE1JRKQA\nTkVYVCBXSVRIT1VUIEZP0lNZTlRB2FJFVFVSTiBXSVRIT1VUIEdPU1XCT1VUIE9G\nIERBVMFJTExFR0FMIFFVQU5USVTZT1ZFUkZMT9dPVVQgT0YgTUVNT1LZVU5ERUYn\nRCBTVEFURU1FTtRCQUQgU1VCU0NSSVDUUkVESU0nRCBBUlJB2URJVklTSU9OIEJZ\nIFpFUs9JTExFR0FMIERJUkVD1FRZUEUgTUlTTUFUQ8hTVFJJTkcgVE9PIExPTsdG\nT1JNVUxBIFRPTyBDT01QTEXYQ0FOJ1QgQ09OVElOVcVVTkRFRidEIEZVTkNUSU/O\nIEVSUk9SBwAgSU4gAA1CUkVBSwcAuujo6Oi9AQHJgdAhpYbQCr0CAYWFvQMBhYbd\nAwHQB6WF3QIB8AeKGGkSqtDYYCDj04VthG44pZblm4VeqKWX5Zyq6JjwI6WWOOVe\nhZawA8aXOKWU5V6FlLAIxpWQBLGWkZSI0PmxlpGUxpfGlcrQ8mAKaTawNYVeuuRe\nkC5gxHCQKNAExW+QIkiiCZhItZPKEPoghOSi92iVnegw+mioaMRwkAbQBcVvsAFg\nok0k2BADTOnyIPvaIFrbvWDSSCBc2+hoEPUgg9apUKDTIDrbpHbI8AMgGe0g+9qi\n3SAu1Ya4hLlG2CCxAKrw7KL/hnaQBiBZ1UwF2KavhmmmsIZqIAzaIFnVhA8gGtaQ\nRKABsZuFX6VphV6lnIVhpZuI8ZsYZWmFaYVgpWpp/4Vq5ZyqOKWb5WmosAPoxmEY\nZV6QA8ZfGLFekWDI0PnmX+ZhytDyrQAC8Dilc6R0hW+EcKVphZZlD4WUpGqEl5AB\nyISVIJPTpVCkUY3+AYz/AaVtpG6FaYRqpA+5+wGIkZvQ+CBl1qVnpGiFXoRfGKAB\nsV7QC6Vpha+laoWwTDzUoATIsV7Q+8iYZV6qoACRXqVfaQDIkV6GXoVfkNKigIYz\nIGr94O+QAqLvqQCdAAKK8Au9/wEpf53/AcrQ9akAov+gAWAgDP0pf2CmuMqgBIQT\n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\n5opMi/4g+OaKTJX+IPjm4DCwE4bwqSwgwN4g+ObgMLAFhiyGLWBMmeEg7PHk8LAI\npfCFLIUthvCpxSDA3iD45uAwsOJgIOzxiqTwwCiw10wA+CAJ8oqkLMAosMqk8EwZ\n+CAJ8oqowCiwvKXwTCj4IPjmikxk+CD45sqKyRiwp0xb+yD45opJ/6rohvFgOJAY\nZvJgqf/QAqk/ogCFMobzYKl/okDQ9SBn3SBS56VQxW2lUeVusANMENSlUIVzhW+l\nUYV0hXBgIGfdIFLnpVDFc6VR5XSw4KVQxWmlUeVqkNalUIVppVGFakxs1qmrIMDe\npbiF9KW5hfU4ZtildYX2pXaF9yCm2UyY2YbepviG36V1hdqldoXbpXmF3KV6hd2l\n9IW4pfWFuaX2hXWl94V2ILcAID7ZTNLXpdqFdaXbhXal3IW4pd2FuabfmkzS10zJ\n3rD7pq+GaaawhmogDNogGtalm4VgpZyFYaksIMDeIAza5lDQAuZRIBrWpZvFYKWc\n5WGwAWCgALGbkWDmm9AC5pzmYNAC5mGlacWbpWrlnLDmpmGkYNAByoiGaoRpTPLU\nrVbArVPATED7rVTATDn7INn3oAOxm6qIsZvpAbAByoVQhlEgzf4gd/dMzf4g2fcg\n/f6gArGbxVDIsZvlUbADTBDUIHf3TP3+LFXALFLAqUDQCKkgLFTALFPAheatV8Ct\nUMCpAIUcpeaFG6AAhBqlHJEaIH70yND25hulGykf0O5gheKG4IThSCnAhSZKSgUm\nhSZohScKCgomJwomJwpmJqUnKR8F5oUnisAA8AWgI2kEyOkHsPuE5aq9ufSFMJhK\npeSFHLAoYCAR9KUcUSYlMFEmkSZgECOlMEqwBUnAhTBgiBACoCepwIUwhOWlHArJ\nwBAGpRxJf4UcYKUwCkmAMN2pgcjAKJDgoACw3Bil0SkE8CWpfyUwMSbQGebqqX8l\nMBARGKXRKQTwDrEmRRwlMNAC5upRJpEmpdFl0ykDyQJqsJIwMBilJyy59dAiBiaw\nGizN9PAFaR84sBJpI0ilJmmwsAJp8IUmaLACaR9mJmn8hSdgGKUnaQQsufXQ8wYm\nkBhp4BgsCPXwEqUmaVBJ8PACSfCFJqXmkAJp4GYmkNFIqQCF4IXhheJoSDjl4EiK\n5eGF07AKaEn/aQFIqQDl04XRhdVohdCF1GiF4IbhmBjl4pAESf9p/oXShOJm0zjl\n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\ng39dzLX8Fxf1A/sDYvr6ww==`\n","import { toHex, MODE } from \"./utility\"\nimport { memGet, memSet } from \"./memory\"\n// var startTime = performance.now()\n\nexport let s6502: STATE6502 = {\n  PStatus: 0,\n  PC: 0,\n  Accum: 0,\n  XReg: 0,\n  YReg: 0,\n  StackPtr: 0\n}\n\nexport const setX = (value: number) => {\n  s6502.XReg = value\n}\n\nexport const setY = (value: number) => {\n  s6502.YReg = value\n}\n\nexport let cycleCount = 0\n\nexport const setCycleCount = (cycles: number) => { cycleCount = cycles }\n\nexport const set6502State = (new6502: any) => {\n  s6502 = new6502\n}\n\nexport const reset6502 = () => {\n  s6502.Accum = 0\n  s6502.XReg = 0\n  s6502.YReg = 0\n  s6502.PStatus = 0b00100100\n  s6502.StackPtr = 0xFF\n  setPC(memGet(0xFFFD) * 256 + memGet(0xFFFC))\n}\n\nexport const incrementPC = (value: number) => {\n  setPC((s6502.PC + value + 65536) % 65536)\n}\n\nexport const setPC = (value: number) => {\n  console.assert(!isNaN(value), \"illegal PC\")\n  s6502.PC = value\n}\n\nconst setPStatus = (value: number) => {\n  s6502.PStatus = value | 0b00110000\n}\n\nexport const stack = new Array<string>(256).fill('')\n\nconst pushStack = (call: string, value: number) => {\n  stack[s6502.StackPtr] = call\n  memSet(0x100 + s6502.StackPtr, value)\n  s6502.StackPtr = (s6502.StackPtr + 255) % 256\n}\n\nconst popStack = () => {\n  s6502.StackPtr = (s6502.StackPtr + 1) % 256;\n  const value = memGet(0x100 + s6502.StackPtr);\n  if (isNaN(value)) {\n    throw new Error(\"illegal stack value\");\n  }\n  return value\n}\n\nexport const isCarry = () => { return ((s6502.PStatus & 0x01) !== 0); }\nexport const setCarry = (set = true) => s6502.PStatus = set ? s6502.PStatus | 1 :\n  s6502.PStatus & 0b11111110\n\nconst isZero = () => { return ((s6502.PStatus & 0x02) !== 0); }\nconst setZero = (set = true) => s6502.PStatus = set ? s6502.PStatus | 2 :\n  s6502.PStatus & 0b11111101\n\n// const isInterrupt = () => { return ((PStatus & 0x04) !== 0); }\nexport const setInterrupt = (set = true) => s6502.PStatus = set ? s6502.PStatus | 4 :\n  s6502.PStatus & 0b11111011\n\nconst isDecimal = () => { return ((s6502.PStatus & 0x08) !== 0); }\nconst BCD = () => (isDecimal() ? 1 : 0)\nconst setDecimal = (set = true) => s6502.PStatus = set ? s6502.PStatus | 8 :\n  s6502.PStatus & 0b11110111\n\nexport const isBreak = () => { return ((s6502.PStatus & 0x10) !== 0); }\nconst setBreak = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x10 :\n  s6502.PStatus & 0b11101111\n\nconst isOverflow = () => { return ((s6502.PStatus & 0x40) !== 0); }\nconst setOverflow = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x40 :\n  s6502.PStatus & 0b10111111\n\nconst isNegative = () => { return ((s6502.PStatus & 0x80) !== 0); }\nconst setNegative = (set = true) => s6502.PStatus = set ? s6502.PStatus | 0x80 :\n  s6502.PStatus & 0b01111111\n\nconst checkStatus = (value: number) => {\n  setZero(value === 0);\n  setNegative(value >= 128);\n}\n\n// Return number of clock cycles taken\nexport const doBranch = (takeBranch: boolean, offset: number) => {\n  if (takeBranch) {\n    const oldPC = s6502.PC\n    incrementPC((offset > 127) ? (offset - 256) : offset)\n    return 3 + pageBoundary(oldPC, s6502.PC)\n  }\n  return 2\n}\n\nconst oneByteAdd = (value: number, offset: number) => (value + offset + 256) % 256\nconst address = (vLo: number, vHi: number) => (vHi*256 + vLo)\nconst twoByteAdd = (vLo: number, vHi: number, offset: number) => (vHi*256 + vLo + offset + 65536) % 65536\nconst pageBoundary = (addr1: number, addr2: number) => (((addr1 >> 8) !== (addr2 >> 8)) ? 1 : 0)\n\nexport const pcodes = new Array<PCodeInstr>(256)\n\nconst PCODE = (name: string, mode: MODE, pcode: number, PC: number, code: PCodeFunc) => {\n  console.assert(!pcodes[pcode], \"Duplicate instruction: \" + name + \" mode=\" + mode)\n  pcodes[pcode] = {name: name, pcode: pcode, mode: mode, PC: PC, execute: code}\n}\n\nconst doIndirectYinstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = twoByteAdd(vLo, vHi, s6502.YReg)\n  doInstruction(addr)\n  let cycles = 5 + pageBoundary(addr, address(vLo, vHi))\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\nconst doIndirectInstruction = (vZP: number,\n  doInstruction: (addr: number) => void,\n  addBCD: boolean) => {\n  const vLo = memGet(vZP)\n  const vHi = memGet((vZP + 1) % 256)\n  const addr = address(vLo, vHi)\n  doInstruction(addr)\n  let cycles = 5\n  if (addBCD) cycles += BCD()\n  return cycles\n}\n\n// 300: F8 18 B8 A9 BD 69 00 D8 00\nconst doADC_BCD = (value: number) => {\n  let ones = (s6502.Accum & 0x0F) + (value & 0x0F) + (isCarry() ? 1 : 0)\n  // Handle illegal BCD hex values by wrapping to \"tens\" digit\n  if (ones >= 0xA) {\n    ones += 6\n  }\n  let tmp = (s6502.Accum & 0xF0) + (value & 0xF0) + ones\n  // Pretend we're doing normal addition to set overflow flag\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow((tmp & 0xFF) >= 128 ? bothPositive : bothNegative)\n  // Handle illegal BCD hex values by wrapping to \"hundreds\" digit\n  setCarry(tmp >= 0xA0)\n  if (isCarry()) {\n    tmp += 0x60\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n}\n\nconst doADC_HEX = (value: number) => {\n  let tmp = s6502.Accum + value + (isCarry() ? 1 : 0)\n  setCarry(tmp >= 256)\n  tmp = tmp % 256\n  const bothPositive = (s6502.Accum <= 127 && value <= 127)\n  const bothNegative = (s6502.Accum >= 128 && value >= 128)\n  setOverflow(tmp >= 128 ? bothPositive : bothNegative)\n  s6502.Accum = tmp\n  checkStatus(s6502.Accum)\n}\n\nconst doADC = (addr: number) => {\n  if (isDecimal()) {\n    doADC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(memGet(addr))\n  }\n}\n\nPCODE('ADC', MODE.IMM, 0x69, 2, (value) => {\n  if (BCD()) {doADC_BCD(value)} else {doADC_HEX(value)}; return 2 + BCD()})\nPCODE('ADC', MODE.ZP_REL, 0x65, 2, (vZP) => {doADC(vZP); return 3 + BCD()})\nPCODE('ADC', MODE.ZP_X, 0x75, 2, (vZP) =>\n  {doADC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS, 0x6D, 3, (vLo, vHi) =>\n  {doADC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('ADC', MODE.ABS_X, 0x7D, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.ABS_Y, 0x79, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doADC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ADC', MODE.IND_X, 0x61, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doADC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('ADC', MODE.IND_Y, 0x71, 2, (vZP) => doIndirectYinstruction(vZP, doADC, true))\nPCODE('ADC', MODE.IND, 0x72, 2, (vZP) => doIndirectInstruction(vZP, doADC, true))\n\nconst doAND = (addr: number) => {\n  s6502.Accum &= memGet(addr)\n  checkStatus(s6502.Accum)}\nPCODE('AND', MODE.IMM, 0x29, 2, (value) => {s6502.Accum &= value; checkStatus(s6502.Accum); return 2})\nPCODE('AND', MODE.ZP_REL, 0x25, 2, (vZP) => {doAND(vZP); return 3})\nPCODE('AND', MODE.ZP_X, 0x35, 2, (vZP) => {doAND(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('AND', MODE.ABS, 0x2D, 3, (vLo, vHi) => {doAND(address(vLo, vHi)); return 4})\nPCODE('AND', MODE.ABS_X, 0x3D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.ABS_Y, 0x39, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doAND(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('AND', MODE.IND_X, 0x21, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doAND(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('AND', MODE.IND_Y, 0x31, 2, (vZP) => doIndirectYinstruction(vZP, doAND, false))\nPCODE('AND', MODE.IND, 0x32, 2, (vZP) => doIndirectInstruction(vZP, doAND, false))\n\nconst doASL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 128) === 128)\n  v = (v << 1) % 256\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ASL', MODE.IMPLIED, 0x0A, 1, () => {setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = (s6502.Accum << 1) % 256; checkStatus(s6502.Accum); return 2})\nPCODE('ASL', MODE.ZP_REL, 0x06, 2, (vZP) => {doASL(vZP); return 5})\nPCODE('ASL', MODE.ZP_X, 0x16, 2, (vZP) => {doASL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ASL', MODE.ABS, 0x0E, 3, (vLo, vHi) => {doASL(address(vLo, vHi)); return 6})\nPCODE('ASL', MODE.ABS_X, 0x1E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doASL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BCC', MODE.ZP_REL, 0x90, 2, (value) => doBranch(!isCarry(), value))\nPCODE('BCS', MODE.ZP_REL, 0xB0, 2, (value) => doBranch(isCarry(), value))\nPCODE('BEQ', MODE.ZP_REL, 0xF0, 2, (value) => doBranch(isZero(), value))\nPCODE('BMI', MODE.ZP_REL, 0x30, 2, (value) => doBranch(isNegative(), value))\nPCODE('BNE', MODE.ZP_REL, 0xD0, 2, (value) => doBranch(!isZero(), value))\nPCODE('BPL', MODE.ZP_REL, 0x10, 2, (value) => doBranch(!isNegative(), value))\nPCODE('BVC', MODE.ZP_REL, 0x50, 2, (value) => doBranch(!isOverflow(), value))\nPCODE('BVS', MODE.ZP_REL, 0x70, 2, (value) => doBranch(isOverflow(), value))\nPCODE('BRA', MODE.ZP_REL, 0x80, 2, (value) => doBranch(true, value))\n\nconst doBit = (value: number) => {\n  setZero((s6502.Accum & value) === 0);\n  setNegative((value & 0b10000000) !== 0);\n  setOverflow((value & 0b01000000) !== 0);\n}\nPCODE('BIT', MODE.ZP_REL, 0x24, 2, (vZP) => {doBit(memGet(vZP)); return 3})\nPCODE('BIT', MODE.ABS, 0x2C, 3, (vLo, vHi) => {doBit(memGet(address(vLo, vHi))); return 4})\nPCODE('BIT', MODE.IMM, 0x89, 2, (value) => {doBit(value); return 2})\nPCODE('BIT', MODE.ZP_X, 0x34, 2, (vZP) => {doBit(memGet(oneByteAdd(vZP, s6502.XReg))); return 4})\nPCODE('BIT', MODE.ABS_X, 0x3C, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doBit(memGet(addr)); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('BRK', MODE.IMPLIED, 0x00, 1, () => {\n  setBreak();\n  memSet(0xC00A, 0)\n  memSet(0xC006, 0)\n  const PC2 = (s6502.PC + 2) % 65536\n  const vLo = memGet(0xFFFE)\n  const vHi = memGet(0xFFFF)\n  pushStack(\"BRK $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256))\n  pushStack(\"BRK\", PC2 % 256)\n  pushStack(\"S\", s6502.PStatus)\n  setDecimal(false)  // 65c02 only\n  setInterrupt()\n  setPC(twoByteAdd(vLo, vHi, -1));\n  return 7})\n\nPCODE('CLC', MODE.IMPLIED, 0x18, 1, () => {setCarry(false); return 2})\nPCODE('CLD', MODE.IMPLIED, 0xD8, 1, () => {setDecimal(false); return 2})\nPCODE('CLI', MODE.IMPLIED, 0x58, 1, () => {setInterrupt(false); return 2})\nPCODE('CLV', MODE.IMPLIED, 0xB8, 1, () => {setOverflow(false); return 2})\n\nconst doCMP = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nconst doCMP1 = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.Accum >= value)\n  checkStatus((s6502.Accum - value + 256) % 256)\n}\nPCODE('CMP', MODE.IMM, 0xC9, 2, (value) => {setCarry(s6502.Accum >= value);\n  checkStatus((s6502.Accum - value + 256) % 256); return 2})\nPCODE('CMP', MODE.ZP_REL, 0xC5, 2, (vZP) => {doCMP(vZP); return 3})\nPCODE('CMP', MODE.ZP_X, 0xD5, 2, (vZP) => {doCMP(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('CMP', MODE.ABS, 0xCD, 3, (vLo, vHi) => {doCMP(address(vLo, vHi)); return 4})\nPCODE('CMP', MODE.ABS_X, 0xDD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doCMP1(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.ABS_Y, 0xD9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doCMP(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('CMP', MODE.IND_X, 0xC1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doCMP(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('CMP', MODE.IND_Y, 0xD1, 2, (vZP) => doIndirectYinstruction(vZP, doCMP, false))\nPCODE('CMP', MODE.IND, 0xD2, 2, (vZP) => doIndirectInstruction(vZP, doCMP, false))\n\nconst doCPX = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.XReg >= value)\n  checkStatus((s6502.XReg - value + 256) % 256)\n}\nPCODE('CPX', MODE.IMM, 0xE0, 2, (value) => {setCarry(s6502.XReg >= value);\n  checkStatus((s6502.XReg - value + 256) % 256); return 2})\nPCODE('CPX', MODE.ZP_REL, 0xE4, 2, (vZP) => {doCPX(vZP); return 3})\nPCODE('CPX', MODE.ABS, 0xEC, 3, (vLo, vHi) => {doCPX(address(vLo, vHi)); return 4})\n\nconst doCPY = (addr: number) => {\n  const value = memGet(addr)\n  setCarry(s6502.YReg >= value)\n  checkStatus((s6502.YReg - value + 256) % 256)\n}\nPCODE('CPY', MODE.IMM, 0xC0, 2, (value) => {setCarry(s6502.YReg >= value);\n  checkStatus((s6502.YReg - value + 256) % 256); return 2})\nPCODE('CPY', MODE.ZP_REL, 0xC4, 2, (vZP) => {doCPY(vZP); return 3})\nPCODE('CPY', MODE.ABS, 0xCC, 3, (vLo, vHi) => {doCPY(address(vLo, vHi)); return 4})\n\nconst doDEC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), -1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('DEC', MODE.IMPLIED, 0x3A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, -1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('DEC', MODE.ZP_REL, 0xC6, 2, (vZP) => {doDEC(vZP); return 5})\nPCODE('DEC', MODE.ZP_X, 0xD6, 2, (vZP) => {doDEC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('DEC', MODE.ABS, 0xCE, 3, (vLo, vHi) => {doDEC(address(vLo, vHi)); return 6})\nPCODE('DEC', MODE.ABS_X, 0xDE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doDEC(addr)\n  return 7})\n\nPCODE('DEX', MODE.IMPLIED, 0xCA, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, -1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('DEY', MODE.IMPLIED, 0x88, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, -1);\n  checkStatus(s6502.YReg); return 2})\n\nconst doEOR = (addr: number) => {\n  s6502.Accum ^= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('EOR', MODE.IMM, 0x49, 2, (value) => {s6502.Accum ^= value; checkStatus(s6502.Accum); return 2})\nPCODE('EOR', MODE.ZP_REL, 0x45, 2, (vZP) => {doEOR(vZP); return 3})\nPCODE('EOR', MODE.ZP_X, 0x55, 2, (vZP) => {doEOR(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('EOR', MODE.ABS, 0x4D, 3, (vLo, vHi) => {doEOR(address(vLo, vHi)); return 4})\nPCODE('EOR', MODE.ABS_X, 0x5D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.ABS_Y, 0x59, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doEOR(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('EOR', MODE.IND_X, 0x41, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doEOR(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('EOR', MODE.IND_Y, 0x51, 2, (vZP) => doIndirectYinstruction(vZP, doEOR, false))\nPCODE('EOR', MODE.IND, 0x52, 2, (vZP) => doIndirectInstruction(vZP, doEOR, false))\n\nconst doINC = (addr: number) => {\n  const v = oneByteAdd(memGet(addr), 1)\n  memSet(addr, v)\n  checkStatus(v)\n}\nPCODE('INC', MODE.IMPLIED, 0x1A, 1, () => {s6502.Accum = oneByteAdd(s6502.Accum, 1);\n  checkStatus(s6502.Accum); return 2})\nPCODE('INC', MODE.ZP_REL, 0xE6, 2, (vZP) => {doINC(vZP); return 5})\nPCODE('INC', MODE.ZP_X, 0xF6, 2, (vZP) => {doINC(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('INC', MODE.ABS, 0xEE, 3, (vLo, vHi) => {doINC(address(vLo, vHi)); return 6})\nPCODE('INC', MODE.ABS_X, 0xFE, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  doINC(addr)\n  return 7})\n\nPCODE('INX', MODE.IMPLIED, 0xE8, 1, () => {s6502.XReg = oneByteAdd(s6502.XReg, 1);\n  checkStatus(s6502.XReg); return 2})\nPCODE('INY', MODE.IMPLIED, 0xC8, 1, () => {s6502.YReg = oneByteAdd(s6502.YReg, 1);\n  checkStatus(s6502.YReg); return 2})\n\nPCODE('JMP', MODE.ABS, 0x4C, 3, (vLo, vHi) => {setPC(twoByteAdd(vLo, vHi, -3)); return 3})\n// 65c02 - this fixes the 6502 indirect JMP bug across page boundaries\nPCODE('JMP', MODE.IND, 0x6C, 3, (vLo, vHi) => {const a = address(vLo, vHi);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\nPCODE('JMP', MODE.IND_X, 0x7C, 3, (vLo, vHi) => {const a = twoByteAdd(vLo, vHi, s6502.XReg);\n  vLo = memGet(a); vHi = memGet((a + 1) % 65536); setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nPCODE('JSR', MODE.ABS, 0x20, 3, (vLo, vHi) => {\n  // Push the (address - 1) of the next instruction\n  const PC2 = (s6502.PC + 2) % 65536\n  pushStack(\"JSR $\" + toHex(vHi) + toHex(vLo), Math.trunc(PC2 / 256));\n  pushStack(\"JSR\", PC2 % 256);\n  setPC(twoByteAdd(vLo, vHi, -3)); return 6})\n\nconst doLDA = (addr: number) => {\n  s6502.Accum = memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('LDA', MODE.IMM, 0xA9, 2, (value) => {s6502.Accum = value; checkStatus(s6502.Accum); return 2})\nPCODE('LDA', MODE.ZP_REL, 0xA5, 2, (vZP) => {doLDA(vZP); return 3})\nPCODE('LDA', MODE.ZP_X, 0xB5, 2, (vZP) => {doLDA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDA', MODE.ABS, 0xAD, 3, (vLo, vHi) => {doLDA(address(vLo, vHi)); return 4})\nPCODE('LDA', MODE.ABS_X, 0xBD, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.ABS_Y, 0xB9, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('LDA', MODE.IND_X, 0xA1, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doLDA(address(memGet(vZP), memGet((vZP + 1) % 256))); return 6})\nPCODE('LDA', MODE.IND_Y, 0xB1, 2, (vZP) => doIndirectYinstruction(vZP, doLDA, false))\nPCODE('LDA', MODE.IND, 0xB2, 2, (vZP) => doIndirectInstruction(vZP, doLDA, false))\n\nconst doLDX = (addr: number) => {\n  s6502.XReg = memGet(addr)\n  checkStatus(s6502.XReg)\n}\nPCODE('LDX', MODE.IMM, 0xA2, 2, (value) => {s6502.XReg = value; checkStatus(s6502.XReg); return 2})\nPCODE('LDX', MODE.ZP_REL, 0xA6, 2, (vZP) => {doLDX(vZP); return 3})\nPCODE('LDX', MODE.ZP_Y, 0xB6, 2, (vZP) => {doLDX(oneByteAdd(vZP, s6502.YReg)); return 4})\nPCODE('LDX', MODE.ABS, 0xAE, 3, (vLo, vHi) => {doLDX(address(vLo, vHi)); return 4})\nPCODE('LDX', MODE.ABS_Y, 0xBE, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doLDX(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLDY = (addr: number) => {\n  s6502.YReg = memGet(addr)\n  checkStatus(s6502.YReg)\n}\nPCODE('LDY', MODE.IMM, 0xA0, 2, (value) => {s6502.YReg = value; checkStatus(s6502.YReg); return 2})\nPCODE('LDY', MODE.ZP_REL, 0xA4, 2, (vZP) => {doLDY(vZP); return 3})\nPCODE('LDY', MODE.ZP_X, 0xB4, 2, (vZP) => {doLDY(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('LDY', MODE.ABS, 0xAC, 3, (vLo, vHi) => {doLDY(address(vLo, vHi)); return 4})\nPCODE('LDY', MODE.ABS_X, 0xBC, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLDY(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doLSR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  setCarry((v & 1) === 1)\n  v >>= 1\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('LSR', MODE.IMPLIED, 0x4A, 1, () => {setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum >>= 1; checkStatus(s6502.Accum); return 2})\nPCODE('LSR', MODE.ZP_REL, 0x46, 2, (vZP) => {doLSR(vZP); return 5})\nPCODE('LSR', MODE.ZP_X, 0x56, 2, (vZP) => {doLSR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('LSR', MODE.ABS, 0x4E, 3, (vLo, vHi) => {doLSR(address(vLo, vHi)); return 6})\nPCODE('LSR', MODE.ABS_X, 0x5E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doLSR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('NOP', MODE.IMPLIED, 0xEA, 1, () => {return 2})\n\n// Undocumented 65c02 1-cycle NOP\nPCODE('NOP', MODE.IMPLIED, 0xEB, 1, () => {return 1})\n\nconst doORA = (addr: number) => {\n  s6502.Accum |= memGet(addr)\n  checkStatus(s6502.Accum)\n}\nPCODE('ORA', MODE.IMM, 0x09, 2, (value) => {s6502.Accum |= value; checkStatus(s6502.Accum); return 2})\nPCODE('ORA', MODE.ZP_REL, 0x05, 2, (vZP) => {doORA(vZP); return 3})\nPCODE('ORA', MODE.ZP_X, 0x15, 2, (vZP) => {doORA(oneByteAdd(vZP, s6502.XReg)); return 4})\nPCODE('ORA', MODE.ABS, 0x0D, 3, (vLo, vHi) => {doORA(address(vLo, vHi)); return 4})\nPCODE('ORA', MODE.ABS_X, 0x1D, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.ABS_Y, 0x19, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doORA(addr); return 4 + pageBoundary(addr, address(vLo, vHi))})\nPCODE('ORA', MODE.IND_X, 0x01, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doORA(address(memGet(vZP), memGet(vZP + 1))); return 6})\nPCODE('ORA', MODE.IND_Y, 0x11, 2, (vZP) => doIndirectYinstruction(vZP, doORA, false))\nPCODE('ORA', MODE.IND, 0x12, 2, (vZP) => doIndirectInstruction(vZP, doORA, false))\n\nPCODE('PHA', MODE.IMPLIED, 0x48, 1, () => {pushStack(\"A\", s6502.Accum); return 3})\nPCODE('PHP', MODE.IMPLIED, 0x08, 1, () => {setBreak(); pushStack(\"S\", s6502.PStatus); return 3})\nPCODE('PHX', MODE.IMPLIED, 0xDA, 1, () => {pushStack(\"X\", s6502.XReg); return 3})\nPCODE('PHY', MODE.IMPLIED, 0x5A, 1, () => {pushStack(\"Y\", s6502.YReg); return 3})\nPCODE('PLA', MODE.IMPLIED, 0x68, 1, () => {s6502.Accum = popStack(); checkStatus(s6502.Accum); return 4})\nPCODE('PLP', MODE.IMPLIED, 0x28, 1, () => {setPStatus(popStack()); return 4})\nPCODE('PLX', MODE.IMPLIED, 0xFA, 1, () => {s6502.XReg = popStack(); checkStatus(s6502.XReg); return 4})\nPCODE('PLY', MODE.IMPLIED, 0x7A, 1, () => {s6502.YReg = popStack(); checkStatus(s6502.YReg); return 4})\n\nconst doROL = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit0 = isCarry() ? 1 : 0;\n  setCarry((v & 128) === 128)\n  v = ((v << 1) % 256) | bit0\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROL', MODE.IMPLIED, 0x2A, 1, () => {const bit0 = isCarry() ? 1 : 0;\n  setCarry((s6502.Accum & 128) === 128);\n  s6502.Accum = ((s6502.Accum << 1) % 256) | bit0; checkStatus(s6502.Accum); return 2})\nPCODE('ROL', MODE.ZP_REL, 0x26, 2, (vZP) => {doROL(vZP); return 5})\nPCODE('ROL', MODE.ZP_X, 0x36, 2, (vZP) => {doROL(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROL', MODE.ABS, 0x2E, 3, (vLo, vHi) => {doROL(address(vLo, vHi)); return 6})\nPCODE('ROL', MODE.ABS_X, 0x3E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROL(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nconst doROR = (addr: number) => {\n  let v = memGet(addr)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  const bit7 = isCarry() ? 128 : 0;\n  setCarry((v & 1) === 1)\n  v = (v >> 1) | bit7\n  memSet(addr, v)\n  checkStatus(v)}\nPCODE('ROR', MODE.IMPLIED, 0x6A, 1, () => {const bit7 = isCarry() ? 128 : 0;\n  setCarry((s6502.Accum & 1) === 1);\n  s6502.Accum = (s6502.Accum >> 1) | bit7; checkStatus(s6502.Accum); return 2})\nPCODE('ROR', MODE.ZP_REL, 0x66, 2, (vZP) => {doROR(vZP); return 5})\nPCODE('ROR', MODE.ZP_X, 0x76, 2, (vZP) => {doROR(oneByteAdd(vZP, s6502.XReg)); return 6})\nPCODE('ROR', MODE.ABS, 0x6E, 3, (vLo, vHi) => {doROR(address(vLo, vHi)); return 6})\nPCODE('ROR', MODE.ABS_X, 0x7E, 3, (vLo, vHi) => {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doROR(addr);\n  return 6 + pageBoundary(addr, address(vLo, vHi))})\n\nPCODE('RTI', MODE.IMPLIED, 0x40, 1, () => {\n  setPStatus(popStack());\n  setPC(address(popStack(), popStack()) - 1); return 6})\n\nPCODE('RTS', MODE.IMPLIED, 0x60, 1, () => {setPC(address(popStack(), popStack())); return 6})\n\n// 300: F8 38 B8 A9 00 E9 00 D8 00\nconst doSBC_BCD = (value: number) => {\n  // On 65c02, do normal hex subtraction to set the carry & overflow flags.\n  const vtmp = 255 - value\n  let tmp = s6502.Accum + vtmp + (isCarry() ? 1 : 0)\n  const newCarry = (tmp >= 256)\n  const bothPositive = (s6502.Accum <= 127 && vtmp <= 127)\n  const bothNegative = (s6502.Accum >= 128 && vtmp >= 128)\n  setOverflow((tmp % 256) >= 128 ? bothPositive : bothNegative)\n\n  let ones = (s6502.Accum & 0x0F) - (value & 0x0F) + (isCarry() ? 0 : -1)\n  tmp = s6502.Accum - value + (isCarry() ? 0 : -1)\n  if (tmp < 0) {\n    tmp -= 0x60\n  }\n  if (ones < 0) {\n    tmp -= 0x06\n  }\n  s6502.Accum = tmp & 0xFF\n  // Assume we're a 65c02 and set the zero flag properly.\n  // This doesn't happen on a 6502 for BCD mode.\n  checkStatus(s6502.Accum)\n  setCarry(newCarry)\n}\n\nconst doSBC = (addr: number) => {\n  if (BCD()) {\n    doSBC_BCD(memGet(addr))\n  } else {\n    doADC_HEX(255 - memGet(addr))\n  }\n}\n\nPCODE('SBC', MODE.IMM, 0xE9, 2, (value) => {\n  if (BCD()) {doSBC_BCD(value)} else {doADC_HEX(255 - value)}\n  return 2 + BCD()})\nPCODE('SBC', MODE.ZP_REL, 0xE5, 2, (vZP) =>\n  {doSBC(vZP); return 3 + BCD()})\nPCODE('SBC', MODE.ZP_X, 0xF5, 2, (vZP) =>\n  {doSBC(oneByteAdd(vZP, s6502.XReg)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS, 0xED, 3, (vLo, vHi) =>\n  {doSBC(address(vLo, vHi)); return 4 + BCD()})\nPCODE('SBC', MODE.ABS_X, 0xFD, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.XReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.ABS_Y, 0xF9, 3, (vLo, vHi) =>\n  {const addr = twoByteAdd(vLo, vHi, s6502.YReg);\n  doSBC(addr); return 4 + BCD() + pageBoundary(addr, address(vLo, vHi))})\nPCODE('SBC', MODE.IND_X, 0xE1, 2, (vOffset) =>\n  {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  doSBC(address(memGet(vZP), memGet(vZP + 1))); return 6 + BCD()})\nPCODE('SBC', MODE.IND_Y, 0xF1, 2, (vZP) =>\n  doIndirectYinstruction(vZP, doSBC, true))\nPCODE('SBC', MODE.IND, 0xF2, 2, (vZP) =>\n  doIndirectInstruction(vZP, doSBC, true))\n\nPCODE('SEC', MODE.IMPLIED, 0x38, 1, () => {setCarry(); return 2})\nPCODE('SED', MODE.IMPLIED, 0xF8, 1, () => {setDecimal(); return 2})\nPCODE('SEI', MODE.IMPLIED, 0x78, 1, () => {setInterrupt(); return 2})\n\n// Zero Page     STA $44       $85  2   3\n// Zero Page,X   STA $44,X     $95  2   4\n// Absolute      STA $4400     $8D  3   4\n// Absolute,X    STA $4400,X   $9D  3   5\n// Absolute,Y    STA $4400,Y   $99  3   5\n// Indirect,X    STA ($44,X)   $81  2   6\n// Indirect,Y    STA ($44),Y   $91  2   6\nPCODE('STA', MODE.ZP_REL, 0x85, 2, (vZP) => {memSet(vZP, s6502.Accum); return 3})\nPCODE('STA', MODE.ZP_X, 0x95, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS, 0x8D, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.Accum); return 4})\nPCODE('STA', MODE.ABS_X, 0x9D, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, s6502.Accum)\n  return 5})\nPCODE('STA', MODE.ABS_Y, 0x99, 3, (vLo, vHi) => {memSet(twoByteAdd(vLo, vHi, s6502.YReg), s6502.Accum); return 5})\nPCODE('STA', MODE.IND_X, 0x81, 2, (vOffset) => {const vZP = oneByteAdd(vOffset, s6502.XReg);\n  memSet(address(memGet(vZP), memGet(vZP + 1)), s6502.Accum); return 6})\nconst doSTA = (addr: number) => {\n  memSet(addr, s6502.Accum)\n}\n// STA ($FF),Y take 6 cycles, doesn't depend upon page boundary\nPCODE('STA', MODE.IND_Y, 0x91, 2, (vZP) => {doIndirectYinstruction(vZP, doSTA, false); return 6})\nPCODE('STA', MODE.IND, 0x92, 2, (vZP) => doIndirectInstruction(vZP, doSTA, false))\n\nPCODE('STX', MODE.ZP_REL, 0x86, 2, (vZP) => {memSet(vZP, s6502.XReg); return 3})\nPCODE('STX', MODE.ZP_Y, 0x96, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.YReg), s6502.XReg); return 4})\nPCODE('STX', MODE.ABS, 0x8E, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.XReg); return 4})\n\nPCODE('STY', MODE.ZP_REL, 0x84, 2, (vZP) => {memSet(vZP, s6502.YReg); return 3})\nPCODE('STY', MODE.ZP_X, 0x94, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), s6502.YReg); return 4})\nPCODE('STY', MODE.ABS, 0x8C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), s6502.YReg); return 4})\n\nPCODE('STZ', MODE.ZP_REL, 0x64, 2, (vZP) => {memSet(vZP, 0); return 3})\nPCODE('STZ', MODE.ZP_X, 0x74, 2, (vZP) => {memSet(oneByteAdd(vZP, s6502.XReg), 0); return 4})\nPCODE('STZ', MODE.ABS, 0x9C, 3, (vLo, vHi) => {memSet(address(vLo, vHi), 0); return 4})\nPCODE('STZ', MODE.ABS_X, 0x9E, 3, (vLo, vHi) => {\n  const addr = twoByteAdd(vLo, vHi, s6502.XReg)\n  memGet(addr)  // extra strobe of the address (Sather IIe p. 4-27)\n  memSet(addr, 0)\n  return 5})\n\nPCODE('TAX', MODE.IMPLIED, 0xAA, 1, () => {s6502.XReg = s6502.Accum; checkStatus(s6502.XReg); return 2})\nPCODE('TAY', MODE.IMPLIED, 0xA8, 1, () => {s6502.YReg = s6502.Accum; checkStatus(s6502.YReg); return 2})\nPCODE('TSX', MODE.IMPLIED, 0xBA, 1, () => {s6502.XReg = s6502.StackPtr; checkStatus(s6502.XReg); return 2})\nPCODE('TXA', MODE.IMPLIED, 0x8A, 1, () => {s6502.Accum = s6502.XReg; checkStatus(s6502.Accum); return 2})\nPCODE('TXS', MODE.IMPLIED, 0x9A, 1, () => {s6502.StackPtr = s6502.XReg; return 2})\nPCODE('TYA', MODE.IMPLIED, 0x98, 1, () => {s6502.Accum = s6502.YReg; checkStatus(s6502.Accum); return 2})\n\n// var endTime = performance.now()\n// console.log(\"PCODE time = \" + (endTime - startTime))","import { pcodes } from \"./instructions\";\nimport { toHex, isRelativeInstr, MODE } from \"./utility\";\n\nconst parseOperand = (operand: string): [MODE, number] => {\n  let mode: MODE = MODE.IMPLIED;\n  let value = -1\n\n  if (operand.length > 0) {\n    if (operand.startsWith('#')) {\n      mode = MODE.IMM\n      operand = operand.substring(1)\n    } else if (operand.startsWith('(')) {\n      if (operand.endsWith(\",Y\")) {\n        mode = MODE.IND_Y\n      } else if (operand.endsWith(\",X)\")) {\n        mode = MODE.IND_X\n      } else {\n        mode = MODE.IND\n      }\n      operand = operand.substring(1)\n    } else if (operand.endsWith(\",X\")) {\n      mode = (operand.length > 5) ? MODE.ABS_X : MODE.ZP_X\n    } else if (operand.endsWith(\",Y\")) {\n      mode = (operand.length > 5) ? MODE.ABS_Y : MODE.ZP_Y\n    } else {\n      mode = (operand.length > 3) ? MODE.ABS : MODE.ZP_REL\n    }\n\n    if (operand.startsWith('$')) {\n      operand = \"0x\" + operand.substring(1)\n    }\n    value = parseInt(operand)\n  }\n\n  return [mode, value]\n}\n\n\nlet labels: { [key: string]: number } = {};\n\nconst doOutput = false\n\nconst getInstructionModeValue =\n  (pc: number, instr: string, operand: string, pass: 1 | 2): [MODE, number] => {\n    let mode = MODE.IMPLIED\n    let value = -1\n    const opParts = operand.match(\n      /(?<num>[#$0-9()]*)(?<label>[A-Z]*)(?<labelSym>[+-]*)(?<labelOperand>[0-9]*)/)?.groups\n    if (opParts) {\n      if (opParts.num) {\n        [mode, value] = parseOperand(operand)\n      } else if (opParts.label) {\n        if (!(opParts.label in labels)) {\n          if (pass === 2) {\n            console.error(\"Missing label: \" + opParts.label)\n            return [mode, value]\n          }\n        } else {\n          value = labels[opParts.label]\n        }\n        if (isRelativeInstr(instr)) {\n          mode = MODE.ZP_REL\n          value = (value - pc + 254) % 256\n        } else {\n          mode = MODE.ABS\n        }\n        if (opParts.labelSym && opParts.labelOperand) {\n          if (opParts.labelSym === '+') {\n            value += parseInt(opParts.labelOperand)\n          } else if (opParts.labelSym === '-') {\n            value -= parseInt(opParts.labelOperand)\n          }\n        }\n      }\n    }\n    return [mode, value]\n}\n\nconst parseOnce = (start: number, code: Array<string>, pass: 1 | 2): Array<number> => {\n  let pc = start\n  let instructions: Array<number> = [];\n  code.forEach(line => {\n    let newInstructions: Array<number> = [];\n    let hexValue = ''\n\n    line = (line.split(';'))[0].trimEnd().toUpperCase()\n\n    let output = (line + '                   ').slice(0, 30) + toHex(pc, 4) + \"- \"\n\n    const parts = line.match(/(?<label>[A-Z]*) *(?<instr>[A-Z]*) *(?<operand>.*)/)?.groups\n    if (line && parts) {\n\n      parts.operand = parts.operand.replace(/\\s/g, '')\n      if (parts.operand && !parts.instr) {\n        console.error(\"Missing instruction: \" + line)\n        instructions = []\n        return\n      }\n\n      if (parts.instr === 'ORG') {\n        if (doOutput && pass === 2) console.log(output)\n        return\n      }\n\n      if (pass === 1 && parts.label) {\n        if (parts.label in labels) {\n          console.error(\"Redefined label: \" + parts.label)\n          instructions = []\n          return\n        }\n        if (parts.instr === 'EQU') {\n          const [mode, value] = parseOperand(parts.operand)\n          if (mode !== MODE.ABS && mode !== MODE.ZP_REL) {\n            console.error(\"Illegal EQU value: \" + parts.operand)\n            instructions = []\n            return\n          }\n          labels[parts.label] = value\n          if (doOutput) console.log(output)\n          return\n        } else {\n          labels[parts.label] = pc\n        }\n      }\n      if (parts.instr === 'EQU') {\n        return\n      }\n\n      const [mode, value] = getInstructionModeValue(pc, parts.instr, parts.operand, pass)\n\n      let match = -1\n      match = pcodes.findIndex(pc => pc && pc.name === parts.instr && pc.mode === mode)\n      if (match >= 0) {\n        const pcode = pcodes[match]\n        newInstructions.push(match);\n        output += toHex(match)\n        if (value >= 0) {\n          if (pcode.mode !== mode) {\n            console.error(\"Mismatch between instruction and mode: \" + line)\n            instructions = []\n            return\n          }\n          newInstructions.push(value % 256)\n          output += ' ' + toHex(newInstructions[1])\n          if (pcode.PC === 3) {\n            newInstructions.push(Math.trunc(value / 256))\n            output += ' ' + toHex(newInstructions[2])\n            hexValue = toHex(value, 4)\n          } else {\n            output += \"   \"\n            hexValue = toHex(value)\n          }\n        } else {\n          output += \"      \"\n        }\n        pc += pcode.PC\n      } else {\n        console.error(\"Unknown instruction: \" + line)\n        instructions = []\n        return\n      }\n\n      output += '  ' + parts.instr + (hexValue !== '' ? \" $\" + hexValue : '')\n      if (doOutput && pass === 2) console.log(output)\n      instructions.push(...newInstructions)\n    }\n  });\n\n  return instructions\n}\n\nexport const parseAssembly = (start: number, code: Array<string>): Array<number> => {\n  labels = {}\n  parseOnce(start, code, 1)\n  const instructions = parseOnce(start, code, 2)\n  return instructions\n}\n\n","\n// export const code = ''\nexport const code = `\n        ORG   $300\n; set up Mockingboard\n        LDA #$C0    ; enable Mockingboard\n        STA $C030\n        LDA #$80    ; select channel 0\n        STA $C010\n        LDA #$00    ; set frequency LSB to 0\n        STA $C012\n        LDA #$05    ; set frequency MSB to 5 (261 Hz)\n        STA $C013\n        LDA #$0F    ; set volume to maximum\n        STA $C015\n\n; play notes\n        LDA #$80    ; start sound\n        STA $C010\n        LDX #20     ; loop for 20 cycles (approx. 1 second)\nLOOP    DEX\n        BNE LOOP\n        LDA #$00    ; stop sound\n        STA $C010\n\n; end of program\n        RTS\n`\nexport const code2 = `\n         ORG   $300\nFREQ     EQU   $350\nPLSWIDTH EQU   $352\n\n         LDA   #$FF\n         STA   FREQ\n         LDA   #$80\n         STA   PLSWIDTH\nPLAY     LDA   $C030\n         LDY   PLSWIDTH\nPULSE    DEY\n         BNE   PULSE\n         LDA   $C030\n         LDX   FREQ\nCOUNTDN  DEX\n         BNE   COUNTDN\n         JSR   READKB\n         JMP   PLAY\n\nINCR     INC   FREQ\n         RTS\n\nDECR     DEC   FREQ\n         RTS\n\nPULSEINC DEC   PLSWIDTH\n         INC   FREQ\n         RTS\n\nPULSEDEC INC   PLSWIDTH\n         DEC   FREQ\n         RTS\n\nREADKB   LDA   $C000\n         STA   $C010   \n         CMP   #$88\n         BEQ   INCR\n         CMP   #$95\n         BEQ   DECR\n         CMP   #$C1\n         BEQ   PULSEINC\n         CMP   #$DA\n         BEQ   PULSEDEC\n         RTS\n`\n","import { parseAssembly } from \"./assembler\"\nimport { setX, setY, setCarry } from \"./instructions\"\nimport { setSlotDriver, memGet, getDataBlock, setDataBlock } from \"./memory\"\nimport { decodeDiskData } from \"./decodedisk\"\nimport { getDriveState, passData } from \"./drivestate\"\n\nlet currentDrive = 2\nlet timerID: any | number = 0\n\nconst code1 = `\n         LDX   #$20\n         LDA   #$00\n         LDX   #$03\n         LDA   #$01\n         STA   $42\n         BIT   $CFFF\n         LDA   #$4C   ; JMP $CsDC\n         STA   $07FD\n         LDA   #$DC\n         STA   $07FE\n         LDA   #$60   ; Fake RTS to determine our slot\n         STA   $07FF\n         JSR   $07FF\n         TSX\n         LDA   $100,X  ; High byte of slot adddress\n         STA   $07FF\n         ASL           ; Shift $Cs up to $s0\n         ASL\n         ASL\n         ASL\n         STA   $43\n         LDA   #$08\n         STA   $45\n         LDA   #$00\n         STA   $44\n         STA   $46\n         STA   $47\n         JSR   $07FD\n         BCS   ERROR\n         LDA   #$0A\n         STA   $45\n         LDA   #$01\n         STA   $46\n         JSR   $07FD\n         BCS   ERROR\n         LDA   $0801\n         BEQ   ERROR\n         LDA   #$01\n         CMP   $0800\n         BNE   ERROR\n         LDX   $43\n         JMP   $801\nERROR    JMP   $E000\n`\nconst code2 = `\n         BCS   ERR\n         LDA   #$00\n         RTS\nERR      LDA   #$27\n         RTS\n`\nconst prodos8driver = () => {\n  const driver = new Uint8Array(256).fill(0)\n  let pcode = parseAssembly(0x0, code1.split(\"\\n\"))\n  driver.set(pcode, 0)\n  pcode = parseAssembly(0x0, code2.split(\"\\n\"))\n  driver.set(pcode, 0xDC)\n  driver[0xFE] = 0b00010011\n  driver[0xFF] = 0xDC\n  return driver\n}\n\nexport const enableHardDrive = () => {\n  setSlotDriver(7, prodos8driver(), 0xC7DC, processHardDriveBlockAccess)\n}\n\nexport const doSetHardDriveProps = (props: DriveProps) => {\n  currentDrive = props.drive\n  let dd = getDriveState(currentDrive)\n  dd.hardDrive = props.hardDrive\n  dd.drive = props.drive\n  dd.diskData = new Uint8Array()\n  dd.status = props.filename\n  dd.filename = props.filename\n  dd.motorRunning = props.motorRunning\n  if (props.diskData.length > 0) {\n    dd.diskData = decodeDiskData(dd, props.diskData)\n  }\n  passData()\n}\n\nexport const processHardDriveBlockAccess = () => {\n  let dd = getDriveState(currentDrive)\n  const block = memGet(0x46) + 256 * memGet(0x47)\n  const blockStart = 512 * block\n  let addr = memGet(0x44) + 256 * memGet(0x45)\n  const dataLen = dd.diskData.length\n//  console.log(`cmd=${memGet(0x42)} addr=${addr.toString(16)} block=${block.toString(16)}`)\n\n  switch (memGet(0x42)) {\n    case 0:\n      // Status test: 300: A2 AB A0 CD 8D 06 C0 A9 00 85 42 A9 70 85 43 20 EA C7 00\n      if (dd.filename.length === 0 || dataLen === 0) {\n        setX(0)\n        setY(0)\n        setCarry()\n        return\n      }\n      const nblocks = dataLen / 512\n      setX(nblocks & 0xFF)\n      setY(nblocks >>> 8)\n      break;\n    case 1:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataRead = dd.diskData.slice(blockStart, blockStart + 512)\n      setDataBlock(addr, dataRead)\n      break;\n    case 2:\n      if (blockStart + 512 > dataLen) {\n        setCarry()\n        return\n      }\n      const dataWrite = getDataBlock(addr)\n      dd.diskData.set(dataWrite, blockStart)\n      dd.diskHasChanges = true\n      break;\n    case 3:\n      console.error(\"Hard drive format not implemented yet\")\n      setCarry()\n      return\n    default:\n      console.error(\"unknown hard drive command\")\n      setCarry()\n      return\n  }\n\n  setCarry(false)\n  dd.motorRunning = true\n  if (!timerID) {\n    timerID = setTimeout(() => {\n      timerID = 0\n      dd.motorRunning = false\n      passData()\n    }, 500)\n  }\n  passData()\n}","// Chris Torrence, 2022\nimport { Buffer } from \"buffer\"\nimport { passMachineState } from \"./worker2main\"\nimport { s6502, set6502State, reset6502, pcodes,\n  incrementPC, cycleCount, setCycleCount } from \"./instructions\"\nimport { STATE, getProcessorStatus, getInstrString, debugZeroPage } from \"./utility\"\nimport { getDriveSaveState, restoreDriveSaveState, doResetDrive, doPauseDrive } from \"./drivestate\"\n// import { slot_omni } from \"./roms/slot_omni_cx00\"\nimport { SWITCHES } from \"./softswitches\";\nimport { memGet, mainMem, auxMem, memC000, getTextPage, getHires, specialJumpTable } from \"./memory\"\nimport { setButtonState, handleGamepad } from \"./joystick\"\nimport { parseAssembly } from \"./assembler\";\nimport { code } from \"./assemblycode\"\nimport { enableHardDrive } from \"./harddrivedata\"\n\n// let timerID: any | number = 0\nlet startTime = 0\nlet prevTime = 0\nlet normalSpeed = true\nlet speed = 0\nlet refreshTime = 16.6881 // 17030 / 1020.488\nlet timeDelta = 0\nlet cpuState = STATE.IDLE\nlet iRefresh = 0\nlet saveTimeSlice = false\nlet iSaveState = 0\nlet iTempState = 0\nlet maxState = 60\nlet saveStates = Array<string>(maxState).fill('')\n// let prevMemory = Buffer.from(mainMem)\n// let DEBUG_ADDRESS = -1 // 0x9631\nlet doDebug = false\nlet doDebugZeroPage = false\nconst instrTrail = new Array<string>(1000)\nlet posTrail = 0\nlet breakpoint = 0\nlet runToRTS = false\n\nconst getApple2State = (): SAVEAPPLE2STATE => {\n  const softSwitches: { [name: string]: boolean } = {}\n  for (const key in SWITCHES) {\n    softSwitches[key] = SWITCHES[key as keyof typeof SWITCHES].isSet\n  }\n  const memory = Buffer.from(mainMem)\n  const memAux = Buffer.from(auxMem)\n  // let memdiff: { [addr: number]: number } = {};\n  // for (let i = 0; i < memory.length; i++) {\n  //   if (prevMemory[i] !== memory[i]) {\n  //     memdiff[i] = memory[i]\n  //   }\n  // }\n  // prevMemory = memory\n  return {\n    s6502: s6502,\n    softSwitches: softSwitches,\n    memory: memory.toString(\"base64\"),\n    memAux: memAux.toString(\"base64\"),\n    memc000: Buffer.from(memC000).toString(\"base64\"),\n  }\n}\n\nconst setApple2State = (newState: SAVEAPPLE2STATE) => {\n  set6502State(newState.s6502)\n  const softSwitches: { [name: string]: boolean } = newState.softSwitches\n  for (const key in softSwitches) {\n    const keyTyped = key as keyof typeof SWITCHES\n    try {\n      SWITCHES[keyTyped].isSet = softSwitches[key]    \n    } catch (error) {\n    }\n  }\n  mainMem.set(Buffer.from(newState.memory, \"base64\"))\n  memC000.set(Buffer.from(newState.memc000, \"base64\"))\n  if (newState.memAux !== undefined) {\n    auxMem.set(Buffer.from(newState.memAux, \"base64\"))\n  }\n}\n\n// export const doRequestSaveState = () => {\n//   passSaveState(doGetSaveState())\n// }\n\nexport const doGetSaveState = () => {\n  const state = { state6502: getApple2State(), driveState: getDriveSaveState() }\n  return JSON.stringify(state)\n//  return Buffer.from(compress(JSON.stringify(state)), 'ucs2').toString('base64')\n}\n\nexport const doRestoreSaveState = (sState: string) => {\n  const state = JSON.parse(sState);\n  setApple2State(state.state6502 as SAVEAPPLE2STATE)\n  restoreDriveSaveState(state.driveState)\n  updateExternalMachineState()\n}\n\nconst doBoot = () => {\n  setCycleCount(0)\n  mainMem.fill(0xFF)\n  auxMem.fill(0xFF)\n  if (code.length > 0) {\n    let pcode = parseAssembly(0x300, code.split(\"\\n\"));\n    mainMem.set(pcode, 0x300);\n  }\n  enableHardDrive()\n  doReset()\n}\n\nconst doReset = () => {\n  memC000.fill(0)\n  for (const key in SWITCHES) {\n    const keyTyped = key as keyof typeof SWITCHES\n    SWITCHES[keyTyped].isSet = false\n  }\n  SWITCHES.TEXT.isSet = true\n  // Reset banked RAM\n  memGet(0xC082)\n  reset6502()\n  doResetDrive()\n  setButtonState()\n}\n\nexport const doSetNormalSpeed = (normal: boolean) => {\n  normalSpeed = normal\n  refreshTime = normalSpeed ? 16.6881 : 0\n  resetRefreshCounter()\n}\n\nexport const doGoBackInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  // if this is the first time we're called, make sure our current\n  // state is up to date\n  if (iTempState === iSaveState) {\n    saveStates[iSaveState] = doGetSaveState()\n  }\n  const newTmp = (iTempState + maxState - 1) % maxState\n  if (newTmp === iSaveState || saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doGoForwardInTime = () => {\n  doSetCPUState(STATE.PAUSED)\n  if (iTempState === iSaveState) {\n    return\n  }\n  const newTmp = (iTempState + 1) % maxState\n  if (saveStates[newTmp] === '') {\n    return\n  }\n  iTempState = newTmp\n  doRestoreSaveState(saveStates[newTmp])\n}\n\nexport const doSaveTimeSlice = () => {\n  // Set a flag and save our slice at the end of the next 6502 display cycle.\n  // Otherwise we risk saving in the middle of a keystroke.\n  saveTimeSlice = true\n}\n\nexport const doStepInto = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  processInstruction(true)\n  cpuState = STATE.PAUSED\n  updateExternalMachineState()\n}\n\nexport const doStepOver = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  if (memGet(s6502.PC) === 0x20) {\n    // If we're at a JSR then briefly step in, then step out.\n    processInstruction(true)\n    doStepOut()\n  } else {\n    // Otherwise just do a single step.\n    doStepInto()\n  }\n}\n\nexport const doStepOut = () => {\n  doDebug = true\n  if (cpuState === STATE.IDLE) {\n    doBoot()\n    cpuState = STATE.PAUSED\n  }\n  runToRTS = true\n  doSetCPUState(STATE.RUNNING)\n}\n\nconst resetRefreshCounter = () => {\n  iRefresh = 0\n  prevTime = performance.now()\n  startTime = prevTime\n}\n\nexport const doSetCPUState = (cpuStateIn: STATE) => {\n  cpuState = cpuStateIn\n  if (cpuState === STATE.PAUSED || cpuState === STATE.RUNNING) {\n    doPauseDrive(cpuState === STATE.RUNNING)\n  }\n  updateExternalMachineState()\n  resetRefreshCounter()\n  if (speed === 0) {\n    doAdvance6502Timer()\n  }\n}\n\nexport const doSetDebug = (debug: boolean) => {\n  doDebug = debug\n}\n\nexport const doSetBreakpoint = (breakpt: number) => {\n  breakpoint = breakpt\n//  if (breakpoint !== 0) doDebug = true\n}\n\nexport const processInstruction = (step = false) => {\n  let cycles = 0\n  let PC1 = s6502.PC\n  const instr = memGet(s6502.PC)\n  const vLo = s6502.PC < 0xFFFF ? memGet(s6502.PC + 1) : 0\n  const vHi = s6502.PC < 0xFFFE ? memGet(s6502.PC + 2) : 0\n  let code = pcodes[instr]\n  if (!code) {\n    code = pcodes[0xEA]\n  }\n  if (code) {\n//    const mainMem1 = mainMem\n    if (PC1 === breakpoint && !step) {\n      cpuState = STATE.PAUSED\n      return -1\n    }\n    // HACK\n    const fn = specialJumpTable.get(PC1)\n    if (fn && !SWITCHES.INTCXROM.isSet) {\n      fn()\n    }\n    // END HACK\n    cycles = code.execute(vLo, vHi)\n    let out = '----'\n    // Do not output during the Apple II's WAIT subroutine\n    if ((PC1 < 0xFCA8 || PC1 > 0xFCB3) && PC1 < 0xFF47) {\n      const cc = (cycleCount.toString() + '      ').slice(0, 10)\n      const ins = getInstrString(code, vLo, vHi, PC1) + '            '\n      out = `${cc}  ${ins.slice(0, 22)}  ${getProcessorStatus(s6502)}`\n    }\n    instrTrail[posTrail] = out\n    posTrail = (posTrail + 1) % instrTrail.length\n    if (doDebug) {\n//      const mem = mainMem.slice(0, 256)\n      if (instr === 0) doDebug = false\n      console.log(out)\n      if (doDebugZeroPage) {\n        debugZeroPage(mainMem.slice(0, 256))\n      }\n    }\n    // if (doDebug) {\n    //   instrTrail.slice(posTrail).forEach(s => console.log(s));\n    //   instrTrail.slice(0, posTrail).forEach(s => console.log(s));\n    //   console.log(\"stop!!!\")\n    // }\n    setCycleCount(cycleCount + cycles)\n    incrementPC(code.PC)\n    if (code.pcode === 0x60 && runToRTS) {\n      runToRTS = false\n      cpuState = STATE.PAUSED\n      return -1\n    }\n  }\n  return cycles\n}\n\n// const getStackString = () => {\n//   const stackvalues = mainMem.slice(256, 512)\n//   const result = new Array<string>()\n//   for (let i = 0xFF; i > s6502.StackPtr; i--) {\n//     let value = \"$\" + toHex(stackvalues[i])\n//     let cmd = stack[i]\n//     if ((stack[i].length > 3) && (i - 1) > s6502.StackPtr) {\n//       if (stack[i-1] === \"JSR\" || stack[i-1] === \"BRK\") {\n//         i--\n//         value += toHex(stackvalues[i])\n//       } else {\n//         cmd = ''\n//       }\n//     }\n//     value = (value + \"   \").substring(0, 6)\n//     result.push(toHex(0x100 + i, 4) + \": \" + value + cmd)\n//   }\n//   return result\n// }\n\nconst getDebugString = () => {\n  return ''\n  // const status = Array<String>(16).fill(\"\")\n  // // const stackString = getStackString()\n  // // for (let i = 0; i < Math.min(20, stackString.length); i++) {\n  // //   status[i] = stackString[i]\n  // // }\n  // for (let j = 0; j < 16; j++) {\n  //   let s = toHex(16 * j) + \":\"\n  //   for (let i = 0; i < 16; i++) {\n  //     s += \" \" + toHex(mainMem[j * 16 + i])\n  //   }\n  //   status[j] = s\n  // }\n  // return status.join('\\n')\n}\n\nconst updateExternalMachineState = () => {\n  const state: MachineState = {\n    state: cpuState,\n    speed: speed,\n    altChar: SWITCHES.ALTCHARSET.isSet,\n    textPage: getTextPage(),\n    lores: getTextPage(true),\n    hires: getHires(),\n    zeroPageStack: getDebugString(),\n    button0: SWITCHES.PB0.isSet,\n    button1: SWITCHES.PB1.isSet,\n  }\n  passMachineState(state)\n}\n\nconst doAdvance6502 = () => {\n  const newTime = performance.now()\n  timeDelta = newTime - prevTime\n  if (timeDelta < refreshTime) return\n  prevTime = newTime\n  if (cpuState === STATE.IDLE || cpuState === STATE.PAUSED) {\n    return;\n  }\n  if (cpuState === STATE.NEED_BOOT) {\n    doBoot();\n    doSetCPUState(STATE.RUNNING)\n  } else if (cpuState === STATE.NEED_RESET) {\n    doReset();\n    doSetCPUState(STATE.RUNNING)\n  }\n  let cycleTotal = 0\n  while (true) {\n    const cycles = processInstruction();\n    if (cycles < 0) break\n    cycleTotal += cycles;\n    if (cycleTotal >= 17030) {\n      break;\n    }\n  }\n  iRefresh++\n  speed = (iRefresh * 17.030) / (performance.now() - startTime)\n  updateExternalMachineState()\n  if (saveTimeSlice) {\n    saveTimeSlice = false\n    iSaveState = (iSaveState + 1) % maxState\n    iTempState = iSaveState\n//    console.log(\"iSaveState \" + iSaveState)\n    saveStates[iSaveState] = doGetSaveState()\n  }\n}\n\nconst doAdvance6502Timer = () => {\n  doAdvance6502()\n  const iRefreshFinish = (iRefresh + 5)\n  while (cpuState === STATE.RUNNING && iRefresh !== iRefreshFinish) {\n    doAdvance6502()\n  }\n  if (cpuState === STATE.RUNNING) {\n    handleGamepad()\n  }\n  setTimeout(doAdvance6502Timer, 0)\n}\n","import { doSetCPUState, doSetBreakpoint,\n  doGetSaveState, doRestoreSaveState, doSetNormalSpeed,\n  doGoBackInTime, doGoForwardInTime, doSetDebug,\n  doStepInto, doStepOver, doStepOut } from \"./motherboard\";\nimport { doSetDriveProps } from \"./drivestate\"\nimport { doSetHardDriveProps } from \"./harddrivedata\"\nimport { addToBuffer } from \"./keyboard\"\nimport { pressAppleCommandKey, setGamepad } from \"./joystick\"\nimport { DRIVE } from \"./utility\";\n\n// This file must have worker types, but not DOM types.\n// The global should be that of a dedicated worker.\n\n// This fixes `self`'s type.\ndeclare var self: DedicatedWorkerGlobalScope;\nexport {};\n\nconst doPostMessage = (msg: string, payload: any) => {\n  self.postMessage({msg, payload});\n}\n\nexport const passMachineState = (state: MachineState) => {\n  doPostMessage(\"MACHINE_STATE\", state)\n}\n\nexport const passClickSpeaker = (cycleCount: number) => {\n  doPostMessage(\"CLICK\", cycleCount)\n}\n\nexport const passDriveProps = (props: DriveProps) => {\n  doPostMessage(\"DRIVE_PROPS\", props)\n}\n\nexport const passDriveSound = (sound: DRIVE) => {\n  doPostMessage(\"DRIVE_SOUND\", sound)\n}\n\nconst passSaveState = (saveState: string) => {\n  doPostMessage(\"SAVE_STATE\", saveState)\n}\n\nself.onmessage = (e: MessageEvent) => {\n  switch (e.data.msg) {\n    case \"STATE\":\n      doSetCPUState(e.data.payload)\n      break;\n    case \"DEBUG\":\n      doSetDebug(e.data.payload)\n      break;\n    case \"BREAKPOINT\":\n      doSetBreakpoint(e.data.payload)\n      break;\n    case \"STEP_INTO\":\n      doStepInto()\n      break;\n    case \"STEP_OVER\":\n      doStepOver()\n      break;\n    case \"STEP_OUT\":\n      doStepOut()\n      break;\n    case \"SPEED\":\n      doSetNormalSpeed(e.data.payload)\n      break;\n    case \"TIME_TRAVEL\":\n      if (e.data.payload === \"FORWARD\") {\n          doGoForwardInTime()\n      } else {\n          doGoBackInTime()\n      }\n      break;\n    case \"RESTORE_STATE\":\n      doRestoreSaveState(e.data.payload)\n      break;\n    case \"KEYBUFFER\":\n      addToBuffer(e.data.payload)\n      break;\n    case \"APPLE_PRESS\":\n      pressAppleCommandKey(true, e.data.payload)\n      break;\n    case \"APPLE_RELEASE\":\n      pressAppleCommandKey(false, e.data.payload)\n      break;\n    case \"GET_SAVE_STATE\":\n      passSaveState(doGetSaveState())\n      break;\n    case \"DRIVE_PROPS\":\n      const props = e.data.payload as DriveProps\n      if (props.hardDrive) {\n        doSetHardDriveProps(props)\n      } else {\n        doSetDriveProps(props)\n      }\n      break;\n    case \"GAMEPAD\":\n      setGamepad(e.data.payload)\n      break\n    default:\n      console.log(\"worker2main onmessage: unknown msg: \" + JSON.stringify(e.data))\n      break;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [766], function() { return __webpack_require__(645); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"c4ffd2f3\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t645: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkapple2ts\"] = self[\"webpackChunkapple2ts\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(766).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["STATE","DRIVE","MODE","isRelativeInstr","instr","startsWith","toHex","value","ndigits","arguments","length","undefined","toString","toUpperCase","slice","getProcessorStatus","s6502","concat","Accum","XReg","YReg","PStatus","P","StackPtr","getInstrString","code","vLo","vHi","PC","result","_modeString","mode","prefix","suffix","IMM","ZP_X","ABS_X","ZP_Y","ABS_Y","IND","IND_X","IND_Y","modeString","_modeString2","_slicedToArray","name","addr","address","zpPrev","Uint8Array","debugZeroPage","zp","diff","i","console","log","toASCII","s","split","map","char","charCodeAt","uint32toBytes","n","keyBuffer","popKey","memC000","key","keyPress","doSaveTimeSlice","prevKey","addToBuffer","text","tPrev","addToBufferDebounce","timeout","t","performance","now","fill","write_byte","woz","position","shift","byte_position","write_4_and_4","write_sync","encode_6_and_2","src","six_and_two_mapping","dest","bit_reverse","c","location","serialise_track","track_number","is_prodos","track_position","sector","ls","contents","crcTable","Uint32Array","makeCRCTable","k","decodeWoz2","driveState","diskData","find","isWriteProtected","crc","storedCRC","Math","pow","actualCRC","data","offset","crc32","alert","filename","htrack","tmap_index","tmap_offset","trk","trackStart","trackNbits","decodeDSK","f","dskData","isPO","set","trackInput","trackData","convertdsk2woz","endsWith","lastIndexOf","substring","diskHasChanges","int32","decodeDiskData","fname","toLowerCase","nbytes","magic","String","fromCharCode","error","decode2MG","isDSK","decodeWoz1","currentDrive","motorOffTimeout","doPauseDiskDrive","motorRunning","startMotor","passDriveSound","MOTOR_OFF","moveHead","dd","halftrack","prevHalfTrack","TRACK_END","TRACK_SEEK","status","passData","trackLocation","floor","pickbit","clearbit","getNextBit","bit","fileOffset","byte","b","dataRegister","prevCycleCount","doWriteBit","doWriteByte","delta","debugCache","push","doMotorTimeout","SWITCHES","isSet","clearTimeout","MOTOR_ON","dumpData","handleDriveSoftSwitches","getDriveState","cycleCount","DRVDATA","offAddr","writeMode","getNextByte","onAddr","setTimeout","stopMotor","DRVSEL","ddOld","ps","DRVSM0","DRVSM1","DRVSM2","DRVSM3","a","ascend","currentPhase","descend","DRVWRITE","initDriveState","hardDrive","drive","Array","getDriveSaveState","driveData","Buffer","dprops","passDriveProps","doResetDrive","doResetDiskDrive","gamePad","maxTimeoutCycles","trunc","paddle0timeout","paddle1timeout","countStart","leftAppleDown","rightAppleDown","leftButtonDown","rightButtonDown","isRightDown","setButtonState","PB0","PB1","pressAppleCommandKey","isDown","left","memSet1","defaultButtons","aztec","funcs","setGamepad","gamePadIn","includes","nearZero","sswitch","NewSwitch","isSetAddr","writeOnly","setFunc","rand","random","handleBankedRAM","READBSR2","WRITEBSR2","OFFBSR2","RDWRBSR2","READBSR1","WRITEBSR1","OFFBSR1","RDWRBSR1","BSRBANK2","BSRREADRAM","STORE80","RAMRD","RAMWRT","INTCXROM","ALTZP","SLOTC3ROM","COLUMN80","ALTCHARSET","KBRDSTROBE","CASSOUT","SPEAKER","passClickSpeaker","EMUBYTE","TEXT","MIXED","PAGE2","HIRES","AN0","AN1","AN2","AN3","CASSIN1","PB2","JOYSTICK12","checkJoystickValues","CASSIN2","FASTCHIP_LOCK","FASTCHIP_ENABLE","FASTCHIP_SPEED","JOYSTICKRESET","resetJoystick","LASER128EX","checkSoftSwitches","calledFromMemSet","sswitch1","func","mainMem","auxMem","empty","slots","specialJumpTable","Map","rom","replaceAll","readWriteAuxMem","useAux","memGetSoftSwitch","memGetBankC000","slot","bankRamAdjust","memGet","memSet","TEXT_PAGE1","TEXT_PAGE2","getTextPage","jstart","jend","is80column","pageOffset","textPage","j","joffset","start","getHires","doubleRes","nlines","hgrPage","setX","setY","setCycleCount","cycles","incrementPC","setPC","assert","isNaN","setPStatus","stack","pushStack","call","popStack","Error","isCarry","setCarry","isZero","setZero","setInterrupt","isDecimal","BCD","setDecimal","setBreak","isOverflow","setOverflow","isNegative","setNegative","checkStatus","doBranch","takeBranch","oldPC","pageBoundary","oneByteAdd","twoByteAdd","addr1","addr2","pcodes","PCODE","pcode","execute","doIndirectYinstruction","vZP","doInstruction","addBCD","doIndirectInstruction","doADC_BCD","ones","tmp","bothPositive","bothNegative","doADC_HEX","doADC","ZP_REL","ABS","vOffset","doAND","doASL","v","IMPLIED","doBit","PC2","doCMP","doCMP1","doCPX","doCPY","doDEC","doEOR","doINC","doLDA","doLDX","doLDY","doLSR","doORA","doROL","bit0","doROR","bit7","doSBC_BCD","vtmp","newCarry","doSBC","doSTA","parseOperand","operand","parseInt","labels","parseOnce","pass","pc","instructions","forEach","line","_line$match","newInstructions","hexValue","parts","trimEnd","match","_wrapRegExp","label","groups","_instructions","replace","_parseOperand3","_parseOperand4","_getInstructionModeVa","_operand$match","opParts","num","labelSym","labelOperand","_parseOperand","_parseOperand2","getInstructionModeValue","_getInstructionModeVa2","findIndex","apply","parseAssembly","timerID","enableHardDrive","driver","jump","fn","setSlotDriver","prodos8driver","processHardDriveBlockAccess","blockStart","dataLen","nblocks","doAux","setDataBlock","dataWrite","getDataBlock","startTime","prevTime","speed","refreshTime","cpuState","IDLE","iRefresh","saveTimeSlice","iSaveState","iTempState","saveStates","doDebug","doDebugZeroPage","instrTrail","posTrail","breakpoint","runToRTS","getApple2State","softSwitches","memory","memAux","memc000","setApple2State","newState","new6502","keyTyped","doGetSaveState","state","state6502","JSON","stringify","doRestoreSaveState","sState","parse","fileName","diskImageHasChanges","motorIsRunning","restoreDriveSaveState","updateExternalMachineState","doBoot","doReset","doStepInto","PAUSED","processInstruction","doStepOut","doSetCPUState","RUNNING","resetRefreshCounter","cpuStateIn","doAdvance6502Timer","step","PC1","get","out","cc","ins","altChar","lores","hires","zeroPageStack","button0","button1","passMachineState","doAdvance6502","newTime","NEED_BOOT","NEED_RESET","cycleTotal","iRefreshFinish","connected","xstick","axes","ystick","abs","dist","sqrt","clip","max","min","buttons","button","handleGamepad","doPostMessage","msg","payload","self","postMessage","props","sound","onmessage","e","debug","breakpt","normal","newTmp","doGoForwardInTime","doGoBackInTime","saveState","doSetHardDriveProps","doSetDriveProps","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","splice","r","d","definition","o","defineProperty","enumerable","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}